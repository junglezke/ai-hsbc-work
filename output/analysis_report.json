{
  "repo_structure": {
    "directories": [
      ".devcontainer",
      ".github",
      ".github\\ISSUE_TEMPLATE",
      ".github\\workflows",
      "docs",
      "docs\\deploying",
      "docs\\patterns",
      "docs\\tutorial",
      "docs\\_static",
      "examples",
      "examples\\celery",
      "examples\\celery\\src",
      "examples\\celery\\src\\task_app",
      "examples\\celery\\src\\task_app\\templates",
      "examples\\javascript",
      "examples\\javascript\\js_example",
      "examples\\javascript\\js_example\\templates",
      "examples\\javascript\\tests",
      "examples\\tutorial",
      "examples\\tutorial\\flaskr",
      "examples\\tutorial\\flaskr\\static",
      "examples\\tutorial\\flaskr\\templates",
      "examples\\tutorial\\flaskr\\templates\\auth",
      "examples\\tutorial\\flaskr\\templates\\blog",
      "examples\\tutorial\\tests",
      "src",
      "src\\flask",
      "src\\flask\\json",
      "src\\flask\\sansio",
      "tests",
      "tests\\static",
      "tests\\templates",
      "tests\\templates\\nested",
      "tests\\test_apps",
      "tests\\test_apps\\blueprintapp",
      "tests\\test_apps\\blueprintapp\\apps",
      "tests\\test_apps\\blueprintapp\\apps\\admin",
      "tests\\test_apps\\blueprintapp\\apps\\admin\\static",
      "tests\\test_apps\\blueprintapp\\apps\\admin\\static\\css",
      "tests\\test_apps\\blueprintapp\\apps\\admin\\templates",
      "tests\\test_apps\\blueprintapp\\apps\\admin\\templates\\admin",
      "tests\\test_apps\\blueprintapp\\apps\\frontend",
      "tests\\test_apps\\blueprintapp\\apps\\frontend\\templates",
      "tests\\test_apps\\blueprintapp\\apps\\frontend\\templates\\frontend",
      "tests\\test_apps\\cliapp",
      "tests\\test_apps\\cliapp\\inner1",
      "tests\\test_apps\\cliapp\\inner1\\inner2",
      "tests\\test_apps\\helloworld",
      "tests\\test_apps\\subdomaintestmodule",
      "tests\\test_apps\\subdomaintestmodule\\static",
      "tests\\type_check"
    ],
    "file_types": {
      "": 7,
      ".yaml": 6,
      ".rst": 78,
      ".txt": 10,
      ".toml": 5,
      ".md": 6,
      ".lock": 1,
      ".json": 2,
      ".sh": 1,
      ".yml": 1,
      ".py": 83,
      ".bat": 1,
      ".png": 5,
      ".svg": 3,
      ".html": 20,
      ".sql": 2,
      ".css": 2,
      ".typed": 1
    },
    "total_files": 234,
    "depth": 7
  },
  "file_analysis": {
    ".pre-commit-config.yaml": {
      "file_type": ".yaml",
      "size": 630,
      "lines": 18,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "order"
      ]
    },
    ".readthedocs.yaml": {
      "file_type": ".yaml",
      "size": 242,
      "lines": 10,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": []
    },
    "README.md": {
      "file_type": ".md",
      "size": 1639,
      "lines": 53,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "feature",
        "user",
        "report",
        "route",
        "order"
      ],
      "headings": [
        {
          "level": 1,
          "title": "Flask"
        },
        {
          "level": 2,
          "title": "A Simple Example"
        },
        {
          "level": 1,
          "title": "save this as app.py"
        },
        {
          "level": 2,
          "title": "Donate"
        },
        {
          "level": 2,
          "title": "Contributing"
        }
      ],
      "code_blocks": [
        "python",
        "",
        "",
        ""
      ],
      "links": []
    },
    ".devcontainer\\devcontainer.json": {
      "file_type": ".json",
      "size": 434,
      "lines": 17,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "setting"
      ]
    },
    ".github\\pull_request_template.md": {
      "file_type": ".md",
      "size": 822,
      "lines": 25,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "feature"
      ],
      "headings": [],
      "code_blocks": [],
      "links": []
    },
    ".github\\ISSUE_TEMPLATE\\bug-report.md": {
      "file_type": ".md",
      "size": 615,
      "lines": 27,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "report",
        "exception"
      ],
      "headings": [],
      "code_blocks": [],
      "links": []
    },
    ".github\\ISSUE_TEMPLATE\\config.yml": {
      "file_type": ".yml",
      "size": 511,
      "lines": 11,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "report",
        "security"
      ]
    },
    ".github\\ISSUE_TEMPLATE\\feature-request.md": {
      "file_type": ".md",
      "size": 416,
      "lines": 15,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "feature"
      ],
      "headings": [],
      "code_blocks": [],
      "links": []
    },
    ".github\\workflows\\lock.yaml": {
      "file_type": ".yaml",
      "size": 682,
      "lines": 24,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "permission"
      ]
    },
    ".github\\workflows\\pre-commit.yaml": {
      "file_type": ".yaml",
      "size": 983,
      "lines": 25,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "config",
        "checkout"
      ]
    },
    ".github\\workflows\\publish.yaml": {
      "file_type": ".yaml",
      "size": 1539,
      "lines": 45,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "checkout",
        "log",
        "permission"
      ]
    },
    ".github\\workflows\\tests.yaml": {
      "file_type": ".yaml",
      "size": 1937,
      "lines": 51,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "checkout"
      ]
    },
    "docs\\conf.py": {
      "file_type": ".py",
      "size": 3386,
      "lines": 101,
      "functions": [
        {
          "name": "github_link",
          "args": [
            "name",
            "rawtext",
            "text",
            "lineno",
            "inliner",
            "options",
            "content"
          ],
          "docstring": null,
          "line_number": 72,
          "is_async": false
        },
        {
          "name": "setup",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 100,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "packaging.version",
        "pallets_sphinx_themes.get_version",
        "pallets_sphinx_themes.ProjectLink",
        "docutils.nodes.reference",
        "docutils.parsers.rst.roles.set_classes"
      ],
      "comments": [
        "Project --------------------------------------------------------------",
        "General --------------------------------------------------------------",
        "HTML -----------------------------------------------------------------",
        "Local Extensions -----------------------------------------------------"
      ],
      "business_keywords": [
        "config",
        "security",
        "setting",
        "role",
        "log",
        "order"
      ]
    },
    "examples\\celery\\make_celery.py": {
      "file_type": ".py",
      "size": 102,
      "lines": 4,
      "functions": [],
      "classes": [],
      "imports": [
        "task_app.create_app"
      ],
      "comments": [],
      "business_keywords": []
    },
    "examples\\celery\\README.md": {
      "file_type": ".md",
      "size": 950,
      "lines": 27,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "config",
        "api",
        "log"
      ],
      "headings": [],
      "code_blocks": [
        "shell",
        "",
        "shell",
        ""
      ],
      "links": [
        {
          "text": "Flask's documentation about Celery",
          "url": "https://flask.palletsprojects.com/patterns/celery/"
        }
      ]
    },
    "examples\\celery\\src\\task_app\\tasks.py": {
      "file_type": ".py",
      "size": 484,
      "lines": 23,
      "functions": [
        {
          "name": "add",
          "args": [
            "a",
            "b"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "block",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "process",
          "args": [
            "self",
            "total"
          ],
          "docstring": null,
          "line_number": 18,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "time",
        "celery.shared_task",
        "celery.Task"
      ],
      "comments": [],
      "business_keywords": [
        "process"
      ]
    },
    "examples\\celery\\src\\task_app\\views.py": {
      "file_type": ".py",
      "size": 954,
      "lines": 38,
      "functions": [
        {
          "name": "result",
          "args": [
            "id"
          ],
          "docstring": null,
          "line_number": 11,
          "is_async": false
        },
        {
          "name": "add",
          "args": [],
          "docstring": null,
          "line_number": 22,
          "is_async": false
        },
        {
          "name": "block",
          "args": [],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "process",
          "args": [],
          "docstring": null,
          "line_number": 36,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "celery.result.AsyncResult",
        "flask.Blueprint",
        "flask.request",
        ".tasks"
      ],
      "comments": [],
      "business_keywords": [
        "process"
      ]
    },
    "examples\\celery\\src\\task_app\\__init__.py": {
      "file_type": ".py",
      "size": 1019,
      "lines": 39,
      "functions": [
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 7,
          "is_async": false
        },
        {
          "name": "celery_init_app",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 29,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "__call__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 31,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "FlaskTask",
          "methods": [
            "__call__"
          ],
          "docstring": null,
          "line_number": 30,
          "bases": [
            "Task"
          ]
        }
      ],
      "imports": [
        "celery.Celery",
        "celery.Task",
        "flask.Flask",
        "flask.render_template",
        ".views"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "template",
        "route",
        "register",
        "view"
      ]
    },
    "examples\\javascript\\js_example\\views.py": {
      "file_type": ".py",
      "size": 429,
      "lines": 18,
      "functions": [
        {
          "name": "index",
          "args": [
            "js"
          ],
          "docstring": null,
          "line_number": 10,
          "is_async": false
        },
        {
          "name": "add",
          "args": [],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.jsonify",
        "flask.render_template",
        "flask.request",
        ".app"
      ],
      "comments": [],
      "business_keywords": [
        "template",
        "route",
        "query"
      ]
    },
    "examples\\javascript\\js_example\\__init__.py": {
      "file_type": ".py",
      "size": 97,
      "lines": 5,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask",
        "js_example.views"
      ],
      "comments": [],
      "business_keywords": [
        "view"
      ]
    },
    "examples\\javascript\\tests\\conftest.py": {
      "file_type": ".py",
      "size": 216,
      "lines": 15,
      "functions": [
        {
          "name": "fixture_app",
          "args": [],
          "docstring": null,
          "line_number": 7,
          "is_async": false
        },
        {
          "name": "client",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 14,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "pytest",
        "js_example.app"
      ],
      "comments": [],
      "business_keywords": []
    },
    "examples\\javascript\\tests\\test_js_example.py": {
      "file_type": ".py",
      "size": 727,
      "lines": 27,
      "functions": [
        {
          "name": "test_index",
          "args": [
            "app",
            "client",
            "path",
            "template_name"
          ],
          "docstring": null,
          "line_number": 14,
          "is_async": false
        },
        {
          "name": "test_add",
          "args": [
            "client",
            "a",
            "b",
            "result"
          ],
          "docstring": null,
          "line_number": 25,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "sender",
            "template",
            "context"
          ],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "pytest",
        "flask.template_rendered"
      ],
      "comments": [],
      "business_keywords": [
        "template",
        "query"
      ]
    },
    "examples\\tutorial\\flaskr\\auth.py": {
      "file_type": ".py",
      "size": 3296,
      "lines": 116,
      "functions": [
        {
          "name": "login_required",
          "args": [
            "view"
          ],
          "docstring": "View decorator that redirects anonymous users to the login page.",
          "line_number": 19,
          "is_async": false
        },
        {
          "name": "load_logged_in_user",
          "args": [],
          "docstring": "If a user id is stored in the session, load the user object from\nthe database into ``g.user``.",
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "register",
          "args": [],
          "docstring": "Register a new user.\n\nValidates that the username is not already taken. Hashes the\npassword for security.",
          "line_number": 47,
          "is_async": false
        },
        {
          "name": "login",
          "args": [],
          "docstring": "Log in a registered user by adding the user id to the session.",
          "line_number": 85,
          "is_async": false
        },
        {
          "name": "logout",
          "args": [],
          "docstring": "Clear the current session, including the stored user id.",
          "line_number": 113,
          "is_async": false
        },
        {
          "name": "wrapped_view",
          "args": [],
          "docstring": null,
          "line_number": 23,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "functools",
        "flask.Blueprint",
        "flask.flash",
        "flask.g",
        "flask.redirect",
        "flask.render_template",
        "flask.request",
        "flask.session",
        "flask.url_for",
        "werkzeug.security.check_password_hash",
        "werkzeug.security.generate_password_hash",
        "db.get_db"
      ],
      "comments": [
        "The username was already taken, which caused the",
        "commit to fail. Show a validation error.",
        "Success, go to the login page.",
        "store the user id in a new session and return to the index"
      ],
      "business_keywords": [
        "validation",
        "security",
        "user",
        "template",
        "route",
        "register",
        "log",
        "view",
        "error",
        "login",
        "database"
      ]
    },
    "examples\\tutorial\\flaskr\\blog.py": {
      "file_type": ".py",
      "size": 3305,
      "lines": 125,
      "functions": [
        {
          "name": "index",
          "args": [],
          "docstring": "Show all the posts, most recent first.",
          "line_number": 17,
          "is_async": false
        },
        {
          "name": "get_post",
          "args": [
            "id",
            "check_author"
          ],
          "docstring": "Get a post and its author by id.\n\nChecks that the id exists and optionally that the current user is\nthe author.\n\n:param id: id of post to get\n:param check_author: require the current user to be the author\n:return: the post with author information\n:raise 404: if a post with the given id doesn't exist\n:raise 403: if the current user isn't the author",
          "line_number": 28,
          "is_async": false
        },
        {
          "name": "create",
          "args": [],
          "docstring": "Create a new post for the current user.",
          "line_number": 62,
          "is_async": false
        },
        {
          "name": "update",
          "args": [
            "id"
          ],
          "docstring": "Update a post if the current user is the author.",
          "line_number": 88,
          "is_async": false
        },
        {
          "name": "delete",
          "args": [
            "id"
          ],
          "docstring": "Delete a post.\n\nEnsures that the post exists and that the logged in user is the\nauthor of the post.",
          "line_number": 115,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.Blueprint",
        "flask.flash",
        "flask.g",
        "flask.redirect",
        "flask.render_template",
        "flask.request",
        "flask.url_for",
        "werkzeug.exceptions.abort",
        "auth.login_required",
        "db.get_db"
      ],
      "comments": [],
      "business_keywords": [
        "user",
        "exception",
        "template",
        "route",
        "log",
        "error",
        "login",
        "order"
      ]
    },
    "examples\\tutorial\\flaskr\\db.py": {
      "file_type": ".py",
      "size": 1317,
      "lines": 56,
      "functions": [
        {
          "name": "get_db",
          "args": [],
          "docstring": "Connect to the application's configured database. The connection\nis unique for each request and will be reused if this is called\nagain.",
          "line_number": 9,
          "is_async": false
        },
        {
          "name": "close_db",
          "args": [
            "e"
          ],
          "docstring": "If this request connected to the database, close the\nconnection.",
          "line_number": 23,
          "is_async": false
        },
        {
          "name": "init_db",
          "args": [],
          "docstring": "Clear existing data and create new tables.",
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "init_db_command",
          "args": [],
          "docstring": "Clear existing data and create new tables.",
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "init_app",
          "args": [
            "app"
          ],
          "docstring": "Register database functions with the Flask app. This is called by\nthe application factory.",
          "line_number": 51,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "sqlite3",
        "datetime.datetime",
        "click",
        "flask.current_app",
        "flask.g"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "register",
        "database"
      ]
    },
    "examples\\tutorial\\flaskr\\__init__.py": {
      "file_type": ".py",
      "size": 1437,
      "lines": 51,
      "functions": [
        {
          "name": "create_app",
          "args": [
            "test_config"
          ],
          "docstring": "Create and configure an instance of the Flask application.",
          "line_number": 6,
          "is_async": false
        },
        {
          "name": "hello",
          "args": [],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "os",
        "flask.Flask",
        ".db",
        ".auth",
        ".blog"
      ],
      "comments": [
        "a default secret that should be overridden by instance config",
        "store the database in the instance folder",
        "load the instance config, if it exists, when not testing",
        "load the test config if passed in",
        "ensure the instance folder exists",
        "register the database commands",
        "apply the blueprints to the app",
        "make url_for('index') == url_for('blog.index')",
        "in another app, you might define a separate main index here with",
        "app.route, while giving the blog blueprint a url_prefix, but for",
        "the tutorial the blog will be the main index"
      ],
      "business_keywords": [
        "config",
        "route",
        "register",
        "log",
        "error",
        "rule",
        "database",
        "endpoint"
      ]
    },
    "examples\\tutorial\\tests\\conftest.py": {
      "file_type": ".py",
      "size": 1454,
      "lines": 62,
      "functions": [
        {
          "name": "app",
          "args": [],
          "docstring": "Create and configure a new app instance for each test.",
          "line_number": 16,
          "is_async": false
        },
        {
          "name": "client",
          "args": [
            "app"
          ],
          "docstring": "A test client for the app.",
          "line_number": 36,
          "is_async": false
        },
        {
          "name": "runner",
          "args": [
            "app"
          ],
          "docstring": "A test runner for the app's Click commands.",
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "auth",
          "args": [
            "client"
          ],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "client"
          ],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "login",
          "args": [
            "self",
            "username",
            "password"
          ],
          "docstring": null,
          "line_number": 51,
          "is_async": false
        },
        {
          "name": "logout",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 56,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AuthActions",
          "methods": [
            "__init__",
            "login",
            "logout"
          ],
          "docstring": null,
          "line_number": 47,
          "bases": []
        }
      ],
      "imports": [
        "os",
        "tempfile",
        "pytest",
        "flaskr.create_app",
        "flaskr.db.get_db",
        "flaskr.db.init_db"
      ],
      "comments": [
        "read in SQL for populating test data",
        "create a temporary file to isolate the database for each test",
        "create the app with common test config",
        "create the database and load test data",
        "close and remove the temporary database"
      ],
      "business_keywords": [
        "config",
        "user",
        "log",
        "login",
        "database"
      ]
    },
    "examples\\tutorial\\tests\\test_auth.py": {
      "file_type": ".py",
      "size": 2070,
      "lines": 69,
      "functions": [
        {
          "name": "test_register",
          "args": [
            "client",
            "app"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_register_validate_input",
          "args": [
            "client",
            "username",
            "password",
            "message"
          ],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "test_login",
          "args": [
            "client",
            "auth"
          ],
          "docstring": null,
          "line_number": 39,
          "is_async": false
        },
        {
          "name": "test_login_validate_input",
          "args": [
            "auth",
            "username",
            "password",
            "message"
          ],
          "docstring": null,
          "line_number": 59,
          "is_async": false
        },
        {
          "name": "test_logout",
          "args": [
            "client",
            "auth"
          ],
          "docstring": null,
          "line_number": 64,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "pytest",
        "flask.g",
        "flask.session",
        "flaskr.db.get_db"
      ],
      "comments": [
        "test that viewing the page renders without template errors",
        "test that successful registration redirects to the login page",
        "test that the user was inserted into the database",
        "test that viewing the page renders without template errors",
        "test that successful login redirects to the index page",
        "login request set the user_id in the session",
        "check that the user is loaded from the session"
      ],
      "business_keywords": [
        "user",
        "template",
        "register",
        "log",
        "view",
        "error",
        "login",
        "database"
      ]
    },
    "examples\\tutorial\\tests\\test_blog.py": {
      "file_type": ".py",
      "size": 2503,
      "lines": 83,
      "functions": [
        {
          "name": "test_index",
          "args": [
            "client",
            "auth"
          ],
          "docstring": null,
          "line_number": 6,
          "is_async": false
        },
        {
          "name": "test_login_required",
          "args": [
            "client",
            "path"
          ],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "test_author_required",
          "args": [
            "app",
            "client",
            "auth"
          ],
          "docstring": null,
          "line_number": 25,
          "is_async": false
        },
        {
          "name": "test_exists_required",
          "args": [
            "client",
            "auth",
            "path"
          ],
          "docstring": null,
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "test_create",
          "args": [
            "client",
            "auth",
            "app"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "test_update",
          "args": [
            "client",
            "auth",
            "app"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "test_create_update_validate",
          "args": [
            "client",
            "auth",
            "path"
          ],
          "docstring": null,
          "line_number": 69,
          "is_async": false
        },
        {
          "name": "test_delete",
          "args": [
            "client",
            "auth",
            "app"
          ],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "pytest",
        "flaskr.db.get_db"
      ],
      "comments": [
        "change the post author to another user",
        "current user can't modify other user's post",
        "current user doesn't see edit link"
      ],
      "business_keywords": [
        "login",
        "user",
        "register",
        "log"
      ]
    },
    "examples\\tutorial\\tests\\test_db.py": {
      "file_type": ".py",
      "size": 616,
      "lines": 29,
      "functions": [
        {
          "name": "test_get_close_db",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_init_db_command",
          "args": [
            "runner",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 19,
          "is_async": false
        },
        {
          "name": "fake_init_db",
          "args": [],
          "docstring": null,
          "line_number": 23,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Recorder",
          "methods": [],
          "docstring": null,
          "line_number": 20,
          "bases": []
        }
      ],
      "imports": [
        "sqlite3",
        "pytest",
        "flaskr.db.get_db"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "order"
      ]
    },
    "examples\\tutorial\\tests\\test_factory.py": {
      "file_type": ".py",
      "size": 298,
      "lines": 12,
      "functions": [
        {
          "name": "test_config",
          "args": [],
          "docstring": "Test create_app without passing test config.",
          "line_number": 4,
          "is_async": false
        },
        {
          "name": "test_hello",
          "args": [
            "client"
          ],
          "docstring": null,
          "line_number": 10,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flaskr.create_app"
      ],
      "comments": [],
      "business_keywords": [
        "config"
      ]
    },
    "src\\flask\\app.py": {
      "file_type": ".py",
      "size": 61744,
      "lines": 1536,
      "functions": [
        {
          "name": "_make_timedelta",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 74,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "import_name",
            "static_url_path",
            "static_folder",
            "static_host",
            "host_matching",
            "subdomain_matching",
            "template_folder",
            "instance_path",
            "instance_relative_config",
            "root_path"
          ],
          "docstring": null,
          "line_number": 226,
          "is_async": false
        },
        {
          "name": "get_send_file_max_age",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
          "line_number": 281,
          "is_async": false
        },
        {
          "name": "send_static_file",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
          "line_number": 308,
          "is_async": false
        },
        {
          "name": "open_resource",
          "args": [
            "self",
            "resource",
            "mode",
            "encoding"
          ],
          "docstring": "Open a resource file relative to :attr:`root_path` for reading.\n\nFor example, if the file ``schema.sql`` is next to the file\n``app.py`` where the ``Flask`` app is defined, it can be opened\nwith:\n\n.. code-block:: python\n\n    with app.open_resource(\"schema.sql\") as f:\n        conn.executescript(f.read())\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
          "line_number": 330,
          "is_async": false
        },
        {
          "name": "open_instance_resource",
          "args": [
            "self",
            "resource",
            "mode",
            "encoding"
          ],
          "docstring": "Open a resource file relative to the application's instance folder\n:attr:`instance_path`. Unlike :meth:`open_resource`, files in the\ninstance folder can be opened for writing.\n\n:param resource: Path to the resource relative to :attr:`instance_path`.\n:param mode: Open the file in this mode.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
          "line_number": 363,
          "is_async": false
        },
        {
          "name": "create_jinja_environment",
          "args": [
            "self"
          ],
          "docstring": "Create the Jinja environment based on :attr:`jinja_options`\nand the various Jinja-related methods of the app. Changing\n:attr:`jinja_options` after this will have no effect. Also adds\nFlask-related globals and filters to the environment.\n\n.. versionchanged:: 0.11\n   ``Environment.auto_reload`` set in accordance with\n   ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n.. versionadded:: 0.5",
          "line_number": 385,
          "is_async": false
        },
        {
          "name": "create_url_adapter",
          "args": [
            "self",
            "request"
          ],
          "docstring": "Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.\n\n.. versionchanged:: 3.1\n    If :data:`SERVER_NAME` is set, it does not restrict requests to\n    only that domain, for both ``subdomain_matching`` and\n    ``host_matching``.\n\n.. versionchanged:: 1.0\n    :data:`SERVER_NAME` no longer implicitly enables subdomain\n    matching. Use :attr:`subdomain_matching` instead.\n\n.. versionchanged:: 0.9\n   This can be called outside a request when the URL adapter is created\n   for an application context.\n\n.. versionadded:: 0.6",
          "line_number": 425,
          "is_async": false
        },
        {
          "name": "raise_routing_exception",
          "args": [
            "self",
            "request"
          ],
          "docstring": "Intercept routing exceptions and possibly do something else.\n\nIn debug mode, intercept a routing redirect and replace it with\nan error if the body will be discarded.\n\nWith modern Werkzeug this shouldn't occur, since it now uses a\n308 status which tells the browser to resend the method and\nbody.\n\n.. versionchanged:: 2.1\n    Don't intercept 307 and 308 redirects.\n\n:meta private:\n:internal:",
          "line_number": 478,
          "is_async": false
        },
        {
          "name": "update_template_context",
          "args": [
            "self",
            "context"
          ],
          "docstring": "Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.\n\n:param context: the context as a dictionary that is updated in place\n                to add extra variables.",
          "line_number": 506,
          "is_async": false
        },
        {
          "name": "make_shell_context",
          "args": [
            "self"
          ],
          "docstring": "Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.\n\n.. versionadded:: 0.11",
          "line_number": 534,
          "is_async": false
        },
        {
          "name": "run",
          "args": [
            "self",
            "host",
            "port",
            "debug",
            "load_dotenv"
          ],
          "docstring": "Runs the application on a local development server.\n\nDo not use ``run()`` in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see :doc:`/deploying/index` for WSGI server recommendations.\n\nIf the :attr:`debug` flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.\n\nIf you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n``use_evalex=False`` as parameter.  This will keep the debugger's\ntraceback screen active, but disable code execution.\n\nIt is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the :command:`flask` command line script's ``run`` support.\n\n.. admonition:: Keep in Mind\n\n   Flask will suppress any server error with a generic error page\n   unless it is in debug mode.  As such to enable just the\n   interactive debugger without the code reloading, you have to\n   invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n   Setting ``use_debugger`` to ``True`` without being in debug mode\n   won't catch any exceptions because there won't be any to\n   catch.\n\n:param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n    have the server available externally as well. Defaults to\n    ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n    if present.\n:param port: the port of the webserver. Defaults to ``5000`` or the\n    port defined in the ``SERVER_NAME`` config variable if present.\n:param debug: if given, enable or disable debug mode. See\n    :attr:`debug`.\n:param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n    files to set environment variables. Will also change the working\n    directory to the directory containing the first file found.\n:param options: the options to be forwarded to the underlying Werkzeug\n    server. See :func:`werkzeug.serving.run_simple` for more\n    information.\n\n.. versionchanged:: 1.0\n    If installed, python-dotenv will be used to load environment\n    variables from :file:`.env` and :file:`.flaskenv` files.\n\n    The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n\n    Threaded mode is enabled by default.\n\n.. versionchanged:: 0.10\n    The default port is now picked from the ``SERVER_NAME``\n    variable.",
          "line_number": 546,
          "is_async": false
        },
        {
          "name": "test_client",
          "args": [
            "self",
            "use_cookies"
          ],
          "docstring": "Creates a test client for this application.  For information\nabout unit testing head over to :doc:`/testing`.\n\nNote that if you are testing for assertions or exceptions in your\napplication code, you must set ``app.testing = True`` in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the :attr:`testing`\nattribute.  For example::\n\n    app.testing = True\n    client = app.test_client()\n\nThe test client can be used in a ``with`` block to defer the closing down\nof the context until the end of the ``with`` block.  This is useful if\nyou want to access the context locals for testing::\n\n    with app.test_client() as c:\n        rv = c.get('/?vodka=42')\n        assert request.args['vodka'] == '42'\n\nAdditionally, you may pass optional keyword arguments that will then\nbe passed to the application's :attr:`test_client_class` constructor.\nFor example::\n\n    from flask.testing import FlaskClient\n\n    class CustomClient(FlaskClient):\n        def __init__(self, *args, **kwargs):\n            self._authentication = kwargs.pop(\"authentication\")\n            super(CustomClient,self).__init__( *args, **kwargs)\n\n    app.test_client_class = CustomClient\n    client = app.test_client(authentication='Basic ....')\n\nSee :class:`~flask.testing.FlaskClient` for more information.\n\n.. versionchanged:: 0.4\n   added support for ``with`` block usage for the client.\n\n.. versionadded:: 0.7\n   The `use_cookies` parameter was added as well as the ability\n   to override the client to be used by setting the\n   :attr:`test_client_class` attribute.\n\n.. versionchanged:: 0.11\n   Added `**kwargs` to support passing additional keyword arguments to\n   the constructor of :attr:`test_client_class`.",
          "line_number": 669,
          "is_async": false
        },
        {
          "name": "test_cli_runner",
          "args": [
            "self"
          ],
          "docstring": "Create a CLI runner for testing CLI commands.\nSee :ref:`testing-cli`.\n\nReturns an instance of :attr:`test_cli_runner_class`, by default\n:class:`~flask.testing.FlaskCliRunner`. The Flask app object is\npassed as the first argument.\n\n.. versionadded:: 1.0",
          "line_number": 727,
          "is_async": false
        },
        {
          "name": "handle_http_exception",
          "args": [
            "self",
            "e"
          ],
          "docstring": "Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.\n\n.. versionchanged:: 1.0.3\n    ``RoutingException``, used internally for actions such as\n     slash redirects during routing, is not passed to error\n     handlers.\n\n.. versionchanged:: 1.0\n    Exceptions are looked up by code *and* by MRO, so\n    ``HTTPException`` subclasses can be handled with a catch-all\n    handler for the base ``HTTPException``.\n\n.. versionadded:: 0.3",
          "line_number": 744,
          "is_async": false
        },
        {
          "name": "handle_user_exception",
          "args": [
            "self",
            "e"
          ],
          "docstring": "This method is called whenever an exception occurs that\nshould be handled. A special case is :class:`~werkzeug\n.exceptions.HTTPException` which is forwarded to the\n:meth:`handle_http_exception` method. This function will either\nreturn a response value or reraise the exception with the same\ntraceback.\n\n.. versionchanged:: 1.0\n    Key errors raised from request data like ``form`` show the\n    bad key in debug mode rather than a generic bad request\n    message.\n\n.. versionadded:: 0.7",
          "line_number": 779,
          "is_async": false
        },
        {
          "name": "handle_exception",
          "args": [
            "self",
            "e"
          ],
          "docstring": "Handle an exception that did not have an error handler\nassociated with it, or that was raised from an error handler.\nThis always causes a 500 ``InternalServerError``.\n\nAlways sends the :data:`got_request_exception` signal.\n\nIf :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\nmode, the error will be re-raised so that the debugger can\ndisplay it. Otherwise, the original exception is logged, and\nan :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\nIf an error handler is registered for ``InternalServerError`` or\n``500``, it will be used. For consistency, the handler will\nalways receive the ``InternalServerError``. The original\nunhandled exception is available as ``e.original_exception``.\n\n.. versionchanged:: 1.1.0\n    Always passes the ``InternalServerError`` instance to the\n    handler, setting ``original_exception`` to the unhandled\n    error.\n\n.. versionchanged:: 1.1.0\n    ``after_request`` functions and other finalization is done\n    even for the default 500 response when there is no handler.\n\n.. versionadded:: 0.3",
          "line_number": 811,
          "is_async": false
        },
        {
          "name": "log_exception",
          "args": [
            "self",
            "exc_info"
          ],
          "docstring": "Logs an exception.  This is called by :meth:`handle_exception`\nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n:attr:`logger`.\n\n.. versionadded:: 0.8",
          "line_number": 864,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": "Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call :func:`make_response`.\n\n.. versionchanged:: 0.7\n   This no longer does the exception handling, this code was\n   moved to the new :meth:`full_dispatch_request`.",
          "line_number": 879,
          "is_async": false
        },
        {
          "name": "full_dispatch_request",
          "args": [
            "self"
          ],
          "docstring": "Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.\n\n.. versionadded:: 0.7",
          "line_number": 904,
          "is_async": false
        },
        {
          "name": "finalize_request",
          "args": [
            "self",
            "rv",
            "from_error_handler"
          ],
          "docstring": "Given the return value from a view function this finalizes\nthe request by converting it into a response and invoking the\npostprocessing functions.  This is invoked for both normal\nrequest dispatching as well as error handlers.\n\nBecause this means that it might be called as a result of a\nfailure a special safe mode is available which can be enabled\nwith the `from_error_handler` flag.  If enabled, failures in\nresponse processing will be logged and otherwise ignored.\n\n:internal:",
          "line_number": 922,
          "is_async": false
        },
        {
          "name": "make_default_options_response",
          "args": [
            "self"
          ],
          "docstring": "This method is called to create the default ``OPTIONS`` response.\nThis can be changed through subclassing to change the default\nbehavior of ``OPTIONS`` responses.\n\n.. versionadded:: 0.7",
          "line_number": 953,
          "is_async": false
        },
        {
          "name": "ensure_sync",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Ensure that the function is synchronous for WSGI workers.\nPlain ``def`` functions are returned as-is. ``async def``\nfunctions are wrapped to run and wait for the response.\n\nOverride this method to change how the app runs async views.\n\n.. versionadded:: 2.0",
          "line_number": 966,
          "is_async": false
        },
        {
          "name": "async_to_sync",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Return a sync function that will run the coroutine function.\n\n.. code-block:: python\n\n    result = app.async_to_sync(func)(*args, **kwargs)\n\nOverride this method to change how the app converts async code\nto be synchronously callable.\n\n.. versionadded:: 2.0",
          "line_number": 980,
          "is_async": false
        },
        {
          "name": "url_for",
          "args": [
            "endpoint"
          ],
          "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis is called by :func:`flask.url_for`, and can be called\ndirectly as well.\n\nAn *endpoint* is the name of a URL rule, usually added with\n:meth:`@app.route() <route>`, and usually the same name as the\nview function. A route defined in a :class:`~flask.Blueprint`\nwill prepend the blueprint's name separated by a ``.`` to the\nendpoint.\n\nIn some cases, such as email messages, you want URLs to include\nthe scheme and domain, like ``https://example.com/hello``. When\nnot in an active request, URLs will be external by default, but\nthis requires setting :data:`SERVER_NAME` so Flask knows what\ndomain to use. :data:`APPLICATION_ROOT` and\n:data:`PREFERRED_URL_SCHEME` should also be configured as\nneeded. This config is only used when not in an active request.\n\nFunctions can be decorated with :meth:`url_defaults` to modify\nkeyword arguments before the URL is built.\n\nIf building fails for some reason, such as an unknown endpoint\nor incorrect values, the app's :meth:`handle_url_build_error`\nmethod is called. If that returns a string, that is returned,\notherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it\n    is external.\n:param _external: If given, prefer the URL to be internal\n    (False) or require it to be external (True). External URLs\n    include the scheme and domain. When not in an active\n    request, URLs are external by default.\n:param values: Values to use for the variable parts of the URL\n    rule. Unknown keys are appended as query string arguments,\n    like ``?a=b&c=d``.\n\n.. versionadded:: 2.2\n    Moved from ``flask.url_for``, which calls this method.",
          "line_number": 1003,
          "is_async": false
        },
        {
          "name": "make_response",
          "args": [
            "self",
            "rv"
          ],
          "docstring": "Convert the return value from a view function to an instance of\n:attr:`response_class`.\n\n:param rv: the return value from the view function. The view function\n    must return a response. Returning ``None``, or the view ending\n    without returning, is not allowed. The following types are allowed\n    for ``view_rv``:\n\n    ``str``\n        A response object is created with the string encoded to UTF-8\n        as the body.\n\n    ``bytes``\n        A response object is created with the bytes as the body.\n\n    ``dict``\n        A dictionary that will be jsonify'd before being returned.\n\n    ``list``\n        A list that will be jsonify'd before being returned.\n\n    ``generator`` or ``iterator``\n        A generator that returns ``str`` or ``bytes`` to be\n        streamed as the response.\n\n    ``tuple``\n        Either ``(body, status, headers)``, ``(body, status)``, or\n        ``(body, headers)``, where ``body`` is any of the other types\n        allowed here, ``status`` is a string or an integer, and\n        ``headers`` is a dictionary or a list of ``(key, value)``\n        tuples. If ``body`` is a :attr:`response_class` instance,\n        ``status`` overwrites the exiting value and ``headers`` are\n        extended.\n\n    :attr:`response_class`\n        The object is returned unchanged.\n\n    other :class:`~werkzeug.wrappers.Response` class\n        The object is coerced to :attr:`response_class`.\n\n    :func:`callable`\n        The function is called as a WSGI application. The result is\n        used to create a response object.\n\n.. versionchanged:: 2.2\n    A generator will be converted to a streaming response.\n    A list will be converted to a JSON response.\n\n.. versionchanged:: 1.1\n    A dict will be converted to a JSON response.\n\n.. versionchanged:: 0.9\n   Previously a tuple was interpreted as the arguments for the\n   response object.",
          "line_number": 1129,
          "is_async": false
        },
        {
          "name": "preprocess_request",
          "args": [
            "self"
          ],
          "docstring": "Called before the request is dispatched. Calls\n:attr:`url_value_preprocessors` registered with the app and the\ncurrent blueprint (if any). Then calls :attr:`before_request_funcs`\nregistered with the app and the blueprint.\n\nIf any :meth:`before_request` handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.",
          "line_number": 1271,
          "is_async": false
        },
        {
          "name": "process_response",
          "args": [
            "self",
            "response"
          ],
          "docstring": "Can be overridden in order to modify the response object\nbefore it's sent to the WSGI server.  By default this will\ncall all the :meth:`after_request` decorated functions.\n\n.. versionchanged:: 0.5\n   As of Flask 0.5 the functions registered for after request\n   execution are called in reverse order of registration.\n\n:param response: a :attr:`response_class` object.\n:return: a new response object or the same, has to be an\n         instance of :attr:`response_class`.",
          "line_number": 1298,
          "is_async": false
        },
        {
          "name": "do_teardown_request",
          "args": [
            "self",
            "exc"
          ],
          "docstring": "Called after the request is dispatched and the response is\nreturned, right before the request context is popped.\n\nThis calls all functions decorated with\n:meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\nif a blueprint handled the request. Finally, the\n:data:`request_tearing_down` signal is sent.\n\nThis is called by\n:meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\nwhich may be delayed during testing to maintain access to\nresources.\n\n:param exc: An unhandled exception raised while dispatching the\n    request. Detected from the current exception information if\n    not passed. Passed to each teardown function.\n\n.. versionchanged:: 0.9\n    Added the ``exc`` argument.",
          "line_number": 1326,
          "is_async": false
        },
        {
          "name": "do_teardown_appcontext",
          "args": [
            "self",
            "exc"
          ],
          "docstring": "Called right before the application context is popped.\n\nWhen handling a request, the application context is popped\nafter the request context. See :meth:`do_teardown_request`.\n\nThis calls all functions decorated with\n:meth:`teardown_appcontext`. Then the\n:data:`appcontext_tearing_down` signal is sent.\n\nThis is called by\n:meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n.. versionadded:: 0.9",
          "line_number": 1360,
          "is_async": false
        },
        {
          "name": "app_context",
          "args": [
            "self"
          ],
          "docstring": "Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\nblock to push the context, which will make :data:`current_app`\npoint at this application.\n\nAn application context is automatically pushed by\n:meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\nwhen handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.\n\n::\n\n    with app.app_context():\n        init_db()\n\nSee :doc:`/appcontext`.\n\n.. versionadded:: 0.9",
          "line_number": 1386,
          "is_async": false
        },
        {
          "name": "request_context",
          "args": [
            "self",
            "environ"
          ],
          "docstring": "Create a :class:`~flask.ctx.RequestContext` representing a\nWSGI environment. Use a ``with`` block to push the context,\nwhich will make :data:`request` point at this request.\n\nSee :doc:`/reqcontext`.\n\nTypically you should not call this from your own code. A request\ncontext is automatically pushed by the :meth:`wsgi_app` when\nhandling a request. Use :meth:`test_request_context` to create\nan environment and context instead of this method.\n\n:param environ: a WSGI environment",
          "line_number": 1407,
          "is_async": false
        },
        {
          "name": "test_request_context",
          "args": [
            "self"
          ],
          "docstring": "Create a :class:`~flask.ctx.RequestContext` for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.\n\nSee :doc:`/reqcontext`.\n\nUse a ``with`` block to push the context, which will make\n:data:`request` point at the request for the created\nenvironment. ::\n\n    with app.test_request_context(...):\n        generate_report()\n\nWhen using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation. ::\n\n    ctx = app.test_request_context(...)\n    ctx.push()\n    ...\n    ctx.pop()\n\nTakes the same arguments as Werkzeug's\n:class:`~werkzeug.test.EnvironBuilder`, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.\n\n:param path: URL path being requested.\n:param base_url: Base URL where the app is being served, which\n    ``path`` is relative to. If not given, built from\n    :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n    :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n:param subdomain: Subdomain name to append to\n    :data:`SERVER_NAME`.\n:param url_scheme: Scheme to use instead of\n    :data:`PREFERRED_URL_SCHEME`.\n:param data: The request body, either as a string or a dict of\n    form keys and values.\n:param json: If given, this is serialized as JSON and passed as\n    ``data``. Also defaults ``content_type`` to\n    ``application/json``.\n:param args: other positional arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.\n:param kwargs: other keyword arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.",
          "line_number": 1423,
          "is_async": false
        },
        {
          "name": "wsgi_app",
          "args": [
            "self",
            "environ",
            "start_response"
          ],
          "docstring": "The actual WSGI application. This is not implemented in\n:meth:`__call__` so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this::\n\n    app = MyMiddleware(app)\n\nIt's a better idea to do this instead::\n\n    app.wsgi_app = MyMiddleware(app.wsgi_app)\n\nThen you still have the original application object around and\ncan continue to call methods on it.\n\n.. versionchanged:: 0.7\n    Teardown events for the request and app contexts are called\n    even if an unhandled error occurs. Other events may not be\n    called depending on when an error occurs during dispatch.\n    See :ref:`callbacks-and-errors`.\n\n:param environ: A WSGI environment.\n:param start_response: A callable accepting a status code,\n    a list of headers, and an optional exception context to\n    start the response.",
          "line_number": 1479,
          "is_async": false
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "environ",
            "start_response"
          ],
          "docstring": "The WSGI server calls the Flask application object as the\nWSGI application. This calls :meth:`wsgi_app`, which can be\nwrapped to apply middleware.",
          "line_number": 1529,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Flask",
          "methods": [
            "__init__",
            "get_send_file_max_age",
            "send_static_file",
            "open_resource",
            "open_instance_resource",
            "create_jinja_environment",
            "create_url_adapter",
            "raise_routing_exception",
            "update_template_context",
            "make_shell_context",
            "run",
            "test_client",
            "test_cli_runner",
            "handle_http_exception",
            "handle_user_exception",
            "handle_exception",
            "log_exception",
            "dispatch_request",
            "full_dispatch_request",
            "finalize_request",
            "make_default_options_response",
            "ensure_sync",
            "async_to_sync",
            "url_for",
            "make_response",
            "preprocess_request",
            "process_response",
            "do_teardown_request",
            "do_teardown_appcontext",
            "app_context",
            "request_context",
            "test_request_context",
            "wsgi_app",
            "__call__"
          ],
          "docstring": "The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.\n\nThe name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\nFor more information about resource loading, see :func:`open_resource`.\n\nUsually you create a :class:`Flask` instance in your main module or\nin the :file:`__init__.py` file of your package like this::\n\n    from flask import Flask\n    app = Flask(__name__)\n\n.. admonition:: About the First Parameter\n\n    The idea of the first parameter is to give Flask an idea of what\n    belongs to your application.  This name is used to find resources\n    on the filesystem, can be used by extensions to improve debugging\n    information and a lot more.\n\n    So it's important what you provide there.  If you are using a single\n    module, `__name__` is always the correct value.  If you however are\n    using a package, it's usually recommended to hardcode the name of\n    your package there.\n\n    For example if your application is defined in :file:`yourapplication/app.py`\n    you should create it with one of the two versions below::\n\n        app = Flask('yourapplication')\n        app = Flask(__name__.split('.')[0])\n\n    Why is that?  The application will work even with `__name__`, thanks\n    to how resources are looked up.  However it will make debugging more\n    painful.  Certain extensions can make assumptions based on the\n    import name of your application.  For example the Flask-SQLAlchemy\n    extension will look for the code in your application that triggered\n    an SQL query in debug mode.  If the import name is not properly set\n    up, that debugging information is lost.  (For example it would only\n    pick up SQL queries in `yourapplication.app` and not\n    `yourapplication.views.frontend`)\n\n.. versionadded:: 0.7\n   The `static_url_path`, `static_folder`, and `template_folder`\n   parameters were added.\n\n.. versionadded:: 0.8\n   The `instance_path` and `instance_relative_config` parameters were\n   added.\n\n.. versionadded:: 0.11\n   The `root_path` parameter was added.\n\n.. versionadded:: 1.0\n   The ``host_matching`` and ``static_host`` parameters were added.\n\n.. versionadded:: 1.0\n   The ``subdomain_matching`` parameter was added. Subdomain\n   matching needs to be enabled manually now. Setting\n   :data:`SERVER_NAME` does not implicitly enable it.\n\n:param import_name: the name of the application package\n:param static_url_path: can be used to specify a different path for the\n                        static files on the web.  Defaults to the name\n                        of the `static_folder` folder.\n:param static_folder: The folder with static files that is served at\n    ``static_url_path``. Relative to the application ``root_path``\n    or an absolute path. Defaults to ``'static'``.\n:param static_host: the host to use when adding the static route.\n    Defaults to None. Required when using ``host_matching=True``\n    with a ``static_folder`` configured.\n:param host_matching: set ``url_map.host_matching`` attribute.\n    Defaults to False.\n:param subdomain_matching: consider the subdomain relative to\n    :data:`SERVER_NAME` when matching routes. Defaults to False.\n:param template_folder: the folder that contains the templates that should\n                        be used by the application.  Defaults to\n                        ``'templates'`` folder in the root path of the\n                        application.\n:param instance_path: An alternative instance path for the application.\n                      By default the folder ``'instance'`` next to the\n                      package or module is assumed to be the instance\n                      path.\n:param instance_relative_config: if set to ``True`` relative filenames\n                                 for loading the config are assumed to\n                                 be relative to the instance path instead\n                                 of the application root.\n:param root_path: The path to the root of the application files.\n    This should only be set manually when it can't be detected\n    automatically, such as for namespace packages.",
          "line_number": 81,
          "bases": [
            "App"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "comments": [
        ": The class that is used for request objects.  See :class:`~flask.Request`",
        ": for more information.",
        ": The class that is used for response objects.  See",
        ": :class:`~flask.Response` for more information.",
        ": the session interface to use.  By default an instance of",
        ": :class:`~flask.sessions.SecureCookieSessionInterface` is used here.",
        ":",
        ": .. versionadded:: 0.8",
        ": The Click command group for registering CLI commands for this",
        ": object. The commands are available from the ``flask`` command",
        ": once the application has been discovered and blueprints have",
        ": been registered.",
        "Set the name of the Click group in case someone wants to add",
        "the app's commands to another CLI tool.",
        "Add a static route using the provided static_url_path, static_host,",
        "and static_folder if there is a configured static_folder.",
        "Note we do this without checking if static_folder exists.",
        "For one, it might be created while the server is running (e.g. during",
        "development). Also, Google App Engine stores static files somewhere",
        "Use a weakref to avoid creating a reference cycle between the app",
        "and the view function (see #3761).",
        "send_file only knows to call get_send_file_max_age on the app,",
        "call it here so it works for blueprints too.",
        "request, session and g are normally added with the",
        "context processor for efficiency reasons but for imported",
        "templates we also want the proxies in there.",
        "Check trusted_hosts here until bind_to_environ does.",
        "Don't pass SERVER_NAME, otherwise it's used and the actual",
        "host is ignored, which breaks host matching.",
        "Werkzeug doesn't implement subdomain matching yet. Until then,",
        "disable it by forcing the current subdomain to the default, or",
        "the empty string.",
        "Need at least SERVER_NAME to match/build outside a request.",
        "A template may be rendered outside a request context.",
        "The values passed to render_template take precedence. Keep a",
        "copy to re-apply after all context functions.",
        "Ignore this call so that it doesn't start another server if",
        "the 'flask run' command is used.",
        "if set, env var overrides existing value",
        "debug passed to method overrides all other sources",
        "reset the first request information if the development server",
        "reset normally.  This makes it possible to restart the server",
        "without reloader and that stuff from an interactive shell.",
        "Proxy exceptions don't have error codes.  We want to always return",
        "those unchanged as errors",
        "RoutingExceptions are used internally to trigger routing",
        "actions, such as slash redirects raising RequestRedirect. They",
        "are not raised or handled in user code.",
        "Re-raise if called with an active exception, otherwise",
        "raise the passed in exception.",
        "if we provide automatic options for this URL and the",
        "request came with the OPTIONS method, reply automatically",
        "otherwise dispatch to the handler for that endpoint",
        "If the endpoint starts with \".\" and the request matches a",
        "blueprint, the endpoint is relative to the blueprint.",
        "When in a request, generate a URL without scheme and",
        "domain by default, unless a scheme is given.",
        "If called by helpers.url_for, an app context is active,",
        "use its url_adapter. Otherwise, app.url_for was called",
        "directly, build an adapter.",
        "When outside a request, generate a URL with scheme and",
        "domain by default.",
        "It is an error to set _scheme when _external=False, in order",
        "to avoid accidental insecure URLs.",
        "unpack tuple returns",
        "a 3-tuple is unpacked directly",
        "decide if a 2-tuple has status or headers",
        "other sized tuples are not allowed",
        "the body must not be None",
        "make sure the body is an instance of the response class",
        "let the response class set the status and headers instead of",
        "waiting to do it manually, so that the class can handle any",
        "special logic",
        "evaluate a WSGI callable, or coerce a different response",
        "class to the correct type",
        "prefer the status if it was provided",
        "extend existing headers with provided headers"
      ],
      "business_keywords": [
        "security",
        "setting",
        "report",
        "error",
        "endpoint",
        "user",
        "email",
        "rule",
        "config",
        "product",
        "authentication",
        "exception",
        "query",
        "module",
        "template",
        "route",
        "register",
        "log",
        "process",
        "view",
        "order"
      ]
    },
    "src\\flask\\blueprints.py": {
      "file_type": ".py",
      "size": 4541,
      "lines": 128,
      "functions": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "import_name",
            "static_folder",
            "static_url_path",
            "template_folder",
            "url_prefix",
            "subdomain",
            "url_defaults",
            "root_path",
            "cli_group"
          ],
          "docstring": null,
          "line_number": 19,
          "is_async": false
        },
        {
          "name": "get_send_file_max_age",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
          "line_number": 55,
          "is_async": false
        },
        {
          "name": "send_static_file",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
          "line_number": 82,
          "is_async": false
        },
        {
          "name": "open_resource",
          "args": [
            "self",
            "resource",
            "mode",
            "encoding"
          ],
          "docstring": "Open a resource file relative to :attr:`root_path` for reading. The\nblueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\nmethod.\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
          "line_number": 104,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Blueprint",
          "methods": [
            "__init__",
            "get_send_file_max_age",
            "send_static_file",
            "open_resource"
          ],
          "docstring": null,
          "line_number": 18,
          "bases": [
            "SansioBlueprint"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "datetime.timedelta",
        "cli.AppGroup",
        "globals.current_app",
        "helpers.send_from_directory",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.scaffold._sentinel",
        "wrappers.Response"
      ],
      "comments": [
        ": The Click command group for registering CLI commands for this",
        ": object. The commands are available from the ``flask`` command",
        ": once the application has been discovered and blueprints have",
        ": been registered.",
        "Set the name of the Click group in case someone wants to add",
        "the app's commands to another CLI tool.",
        "send_file only knows to call get_send_file_max_age on the app,",
        "call it here so it works for blueprints too."
      ],
      "business_keywords": [
        "config",
        "template",
        "route",
        "register",
        "view",
        "error"
      ]
    },
    "src\\flask\\cli.py": {
      "file_type": ".py",
      "size": 36838,
      "lines": 1127,
      "functions": [
        {
          "name": "find_best_app",
          "args": [
            "module"
          ],
          "docstring": "Given a module instance this tries to find the best possible\napplication in the module or raises an exception.",
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "_called_with_wrong_args",
          "args": [
            "f"
          ],
          "docstring": "Check whether calling a function raised a ``TypeError`` because\nthe call failed or because something in the factory raised the\nerror.\n\n:param f: The function that was called.\n:return: ``True`` if the call failed.",
          "line_number": 94,
          "is_async": false
        },
        {
          "name": "find_app_by_string",
          "args": [
            "module",
            "app_name"
          ],
          "docstring": "Check if the given string is a variable name or a function. Call\na function to get the app instance, or return the variable directly.",
          "line_number": 120,
          "is_async": false
        },
        {
          "name": "prepare_import",
          "args": [
            "path"
          ],
          "docstring": "Given a filename this will try to calculate the python path, add it\nto the search path and return the actual module name that is expected.",
          "line_number": 200,
          "is_async": false
        },
        {
          "name": "locate_app",
          "args": [
            "module_name",
            "app_name",
            "raise_if_not_found"
          ],
          "docstring": null,
          "line_number": 230,
          "is_async": false
        },
        {
          "name": "locate_app",
          "args": [
            "module_name",
            "app_name",
            "raise_if_not_found"
          ],
          "docstring": null,
          "line_number": 236,
          "is_async": false
        },
        {
          "name": "locate_app",
          "args": [
            "module_name",
            "app_name",
            "raise_if_not_found"
          ],
          "docstring": null,
          "line_number": 241,
          "is_async": false
        },
        {
          "name": "get_version",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": null,
          "line_number": 267,
          "is_async": false
        },
        {
          "name": "with_appcontext",
          "args": [
            "f"
          ],
          "docstring": "Wraps a callback so that it's guaranteed to be executed with the\nscript's application context.\n\nCustom commands (and their options) registered under ``app.cli`` or\n``blueprint.cli`` will always have an app context available, this\ndecorator is not required in that case.\n\n.. versionchanged:: 2.2\n    The app context is active for subcommands as well as the\n    decorated callback. The app context is always available to\n    ``app.cli`` command and parameter callbacks.",
          "line_number": 380,
          "is_async": false
        },
        {
          "name": "_set_app",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": null,
          "line_number": 440,
          "is_async": false
        },
        {
          "name": "_set_debug",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": null,
          "line_number": 468,
          "is_async": false
        },
        {
          "name": "_env_file_callback",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": null,
          "line_number": 493,
          "is_async": false
        },
        {
          "name": "_path_is_ancestor",
          "args": [
            "path",
            "other"
          ],
          "docstring": "Take ``other`` and remove the length of ``path`` from it. Then join it\nto ``path``. If it is the original value, ``path`` is an ancestor of\n``other``.",
          "line_number": 691,
          "is_async": false
        },
        {
          "name": "load_dotenv",
          "args": [
            "path",
            "load_defaults"
          ],
          "docstring": "Load \"dotenv\" files to set environment variables. A given path takes\nprecedence over ``.env``, which takes precedence over ``.flaskenv``. After\nloading and combining these files, values are only set if the key is not\nalready set in ``os.environ``.\n\nThis is a no-op if `python-dotenv`_ is not installed.\n\n.. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n:param path: Load the file at this location.\n:param load_defaults: Search for and load the default ``.flaskenv`` and\n    ``.env`` files.\n:return: ``True`` if at least one env var was loaded.\n\n.. versionchanged:: 3.1\n    Added the ``load_defaults`` parameter. A given path takes precedence\n    over default files.\n\n.. versionchanged:: 2.0\n    The current directory is not changed to the location of the\n    loaded file.\n\n.. versionchanged:: 2.0\n    When loading the env files, set the default encoding to UTF-8.\n\n.. versionchanged:: 1.1.0\n    Returns ``False`` when python-dotenv is not installed, or when\n    the given path isn't a file.\n\n.. versionadded:: 1.0",
          "line_number": 698,
          "is_async": false
        },
        {
          "name": "show_server_banner",
          "args": [
            "debug",
            "app_import_path"
          ],
          "docstring": "Show extra startup messages the first time the server is run,\nignoring the reloader.",
          "line_number": 766,
          "is_async": false
        },
        {
          "name": "_validate_key",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": "The ``--key`` option must be specified when ``--cert`` is a file.\nModifies the ``cert`` param to be a ``(cert, key)`` pair if needed.",
          "line_number": 828,
          "is_async": false
        },
        {
          "name": "run_command",
          "args": [
            "info",
            "host",
            "port",
            "reload",
            "debugger",
            "with_threads",
            "cert",
            "extra_files",
            "exclude_patterns"
          ],
          "docstring": "Run a local development server.\n\nThis server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.\n\nThe reloader and debugger are enabled by default with the '--debug'\noption.",
          "line_number": 935,
          "is_async": false
        },
        {
          "name": "shell_command",
          "args": [],
          "docstring": "Run an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to its configuration.\n\nThis is useful for executing small snippets of management code\nwithout having to manually configure the application.",
          "line_number": 1001,
          "is_async": false
        },
        {
          "name": "routes_command",
          "args": [
            "sort",
            "all_methods"
          ],
          "docstring": "Show all registered routes with endpoints and methods.",
          "line_number": 1061,
          "is_async": false
        },
        {
          "name": "main",
          "args": [],
          "docstring": null,
          "line_number": 1122,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app_import_path",
            "create_app",
            "set_debug_flag",
            "load_dotenv_defaults"
          ],
          "docstring": null,
          "line_number": 305,
          "is_async": false
        },
        {
          "name": "load_app",
          "args": [
            "self"
          ],
          "docstring": "Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.",
          "line_number": 333,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [],
          "docstring": null,
          "line_number": 395,
          "is_async": false
        },
        {
          "name": "command",
          "args": [
            "self"
          ],
          "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\nunless it's disabled by passing ``with_appcontext=False``.",
          "line_number": 413,
          "is_async": false
        },
        {
          "name": "group",
          "args": [
            "self"
          ],
          "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it defaults the group class to\n:class:`AppGroup`.",
          "line_number": 429,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "add_default_commands",
            "create_app",
            "add_version_option",
            "load_dotenv",
            "set_debug_flag"
          ],
          "docstring": null,
          "line_number": 563,
          "is_async": false
        },
        {
          "name": "_load_plugin_commands",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 600,
          "is_async": false
        },
        {
          "name": "get_command",
          "args": [
            "self",
            "ctx",
            "name"
          ],
          "docstring": null,
          "line_number": 609,
          "is_async": false
        },
        {
          "name": "list_commands",
          "args": [
            "self",
            "ctx"
          ],
          "docstring": null,
          "line_number": 636,
          "is_async": false
        },
        {
          "name": "make_context",
          "args": [
            "self",
            "info_name",
            "args",
            "parent"
          ],
          "docstring": null,
          "line_number": 657,
          "is_async": false
        },
        {
          "name": "parse_args",
          "args": [
            "self",
            "ctx",
            "args"
          ],
          "docstring": null,
          "line_number": 678,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 788,
          "is_async": false
        },
        {
          "name": "convert",
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "docstring": null,
          "line_number": 791,
          "is_async": false
        },
        {
          "name": "convert",
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "docstring": null,
          "line_number": 873,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 422,
          "is_async": false
        },
        {
          "name": "app",
          "args": [
            "environ",
            "start_response"
          ],
          "docstring": null,
          "line_number": 963,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "NoAppException",
          "methods": [],
          "docstring": "Raised if an application cannot be found or loaded.",
          "line_number": 37,
          "bases": [
            "click.UsageError"
          ]
        },
        {
          "name": "ScriptInfo",
          "methods": [
            "__init__",
            "load_app"
          ],
          "docstring": "Helper object to deal with Flask applications.  This is usually not\nnecessary to interface with as it's used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it's created automatically by the\n:class:`FlaskGroup` but you can also manually create it and pass it\nonwards as click object.\n\n.. versionchanged:: 3.1\n    Added the ``load_dotenv_defaults`` parameter and attribute.",
          "line_number": 293,
          "bases": []
        },
        {
          "name": "AppGroup",
          "methods": [
            "command",
            "group"
          ],
          "docstring": "This works similar to a regular click :class:`~click.Group` but it\nchanges the behavior of the :meth:`command` decorator so that it\nautomatically wraps the functions in :func:`with_appcontext`.\n\nNot to be confused with :class:`FlaskGroup`.",
          "line_number": 405,
          "bases": [
            "click.Group"
          ]
        },
        {
          "name": "FlaskGroup",
          "methods": [
            "__init__",
            "_load_plugin_commands",
            "get_command",
            "list_commands",
            "make_context",
            "parse_args"
          ],
          "docstring": "Special subclass of the :class:`AppGroup` group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this. see :ref:`custom-scripts`.\n\n:param add_default_commands: if this is True then the default run and\n    shell commands will be added.\n:param add_version_option: adds the ``--version`` option.\n:param create_app: an optional callback that is passed the script info and\n    returns the loaded app.\n:param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n    files to set environment variables. Will also change the working\n    directory to the directory containing the first file found.\n:param set_debug_flag: Set the app's debug flag.\n\n.. versionchanged:: 3.1\n    ``-e path`` takes precedence over default ``.env`` and ``.flaskenv`` files.\n\n.. versionchanged:: 2.2\n    Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.\n\n.. versionchanged:: 2.2\n    An app context is pushed when running ``app.cli`` commands, so\n    ``@with_appcontext`` is no longer required for those commands.\n\n.. versionchanged:: 1.0\n    If installed, python-dotenv will be used to load environment variables\n    from :file:`.env` and :file:`.flaskenv` files.",
          "line_number": 531,
          "bases": [
            "AppGroup"
          ]
        },
        {
          "name": "CertParamType",
          "methods": [
            "__init__",
            "convert"
          ],
          "docstring": "Click option type for the ``--cert`` option. Allows either an\nexisting file, the string ``'adhoc'``, or an import for a\n:class:`~ssl.SSLContext` object.",
          "line_number": 780,
          "bases": [
            "click.ParamType"
          ]
        },
        {
          "name": "SeparatedPathType",
          "methods": [
            "convert"
          ],
          "docstring": "Click option type that accepts a list of values separated by the\nOS's path separator (``:``, ``;`` on Windows). Each value is\nvalidated as a :class:`click.Path` type.",
          "line_number": 867,
          "bases": [
            "click.Path"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "comments": [
        "Search for the most common names first.",
        "Otherwise find the only object that is a Flask instance.",
        "Search for app factory functions.",
        "In the function, it was called successfully.",
        "Didn't reach the function.",
        "Delete tb to break a circular reference.",
        "https://docs.python.org/2/library/sys.html#sys.exc_info",
        "Parse app_name as a single expression to determine if it's a valid",
        "attribute name or function call.",
        "Ensure the function name is an attribute name only.",
        "Parse the positional and keyword arguments as literals.",
        "literal_eval gives cryptic error messages, show a generic",
        "message with the full expression instead.",
        "If the attribute is a function, call it with any args and kwargs",
        "to get the real application.",
        "move up until outside package structure (no __init__.py)",
        "Reraise the ImportError if it occurred within the imported module.",
        "Determine this by checking whether the trace has a depth > 1.",
        ": Optionally the import path for the Flask application.",
        ": Optionally a function that is passed the script info to create",
        ": the instance of the application.",
        ": A dictionary with arbitrary data that can be associated with",
        ": this script info.",
        "Update the app's debug flag through the descriptor so that",
        "other values repopulate as well.",
        "This option is eager so the app will be available if --help is given.",
        "--help is also eager, so --app must be before it in the param list.",
        "no_args_is_help bypasses eager processing, so this option must be",
        "processed manually in that case to ensure FLASK_APP gets picked up.",
        "If the flag isn't provided, it will default to False. Don't use",
        "that, let debug be set by env in that case.",
        "Set with env var instead of ScriptInfo.load so that it can be",
        "accessed early during a factory function.",
        "Only show an error if a value was passed, otherwise we still want to",
        "call load_dotenv and show a message without exiting.",
        "Load if a value was passed, or we want to load default files, or both.",
        "This option is eager so env vars are loaded as early as possible to be",
        "used by other options.",
        "Processing is done with option callbacks instead of a group",
        "callback. This allows users to make a custom group callback",
        "without losing the behavior. --env-file must come first so",
        "that it is eagerly evaluated before --app.",
        "Look up built-in and plugin commands, which should be",
        "available even if the app fails to load.",
        "Look up commands provided by the app, showing an error and",
        "continuing if the app couldn't be loaded.",
        "Push an app context for the loaded app unless it is already",
        "active somehow. This makes the context available to parameter",
        "and command callbacks without needing @with_appcontext.",
        "Start with the built-in and plugin commands.",
        "Add commands provided by the app, showing an error and",
        "continuing if the app couldn't be loaded.",
        "When an app couldn't be loaded, show the error message",
        "without the traceback.",
        "When any other errors occurred during loading, show the",
        "full traceback.",
        "Set a flag to tell app.run to become a no-op. If app.run was",
        "not in a __name__ == __main__ guard, it would start the server",
        "when importing, blocking whatever command is being called.",
        "Attempt to load --env-file and --app early in case they",
        "were given as env vars. Otherwise no_args_is_help will not",
        "see commands from app.cli.",
        "can't call no-arg super() inside list comprehension until Python 3.12",
        "When reloading, print out the error immediately, but raise",
        "it later so the debugger or server can handle it.",
        "When not reloading, raise the error immediately so the",
        "command fails.",
        "Support the regular Python interpreter startup script if someone",
        "is using it.",
        "Site, customize, or startup script can set a hook to call when",
        "entering interactive mode. The default one sets up readline with",
        "tab and history completion.",
        "rlcompleter uses __main__.__dict__ by default, which is",
        "flask.__main__. Use the shell context instead."
      ],
      "business_keywords": [
        "config",
        "product",
        "user",
        "security",
        "module",
        "setting",
        "role",
        "exception",
        "template",
        "route",
        "register",
        "process",
        "error",
        "rule",
        "order",
        "endpoint"
      ]
    },
    "src\\flask\\config.py": {
      "file_type": ".py",
      "size": 13219,
      "lines": 367,
      "functions": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "get_converter"
          ],
          "docstring": null,
          "line_number": 23,
          "is_async": false
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_number": 35,
          "is_async": false
        },
        {
          "name": "__set__",
          "args": [
            "self",
            "obj",
            "value"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "root_path",
            "defaults"
          ],
          "docstring": null,
          "line_number": 94,
          "is_async": false
        },
        {
          "name": "from_envvar",
          "args": [
            "self",
            "variable_name",
            "silent"
          ],
          "docstring": "Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code::\n\n    app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n:param variable_name: name of the environment variable\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.",
          "line_number": 102,
          "is_async": false
        },
        {
          "name": "from_prefixed_env",
          "args": [
            "self",
            "prefix"
          ],
          "docstring": "Load any environment variables that start with ``FLASK_``,\ndropping the prefix from the env key for the config key. Values\nare passed through a loading function to attempt to convert them\nto more specific types than strings.\n\nKeys are loaded in :func:`sorted` order.\n\nThe default loading function attempts to parse values as any\nvalid JSON type, including dicts and lists.\n\nSpecific items in nested dicts can be set by separating the\nkeys with double underscores (``__``). If an intermediate key\ndoesn't exist, it will be initialized to an empty dict.\n\n:param prefix: Load env vars that start with this prefix,\n    separated with an underscore (``_``).\n:param loads: Pass each string value to this function and use\n    the returned value as the config value. If any error is\n    raised it is ignored and the value remains a string. The\n    default is :func:`json.loads`.\n\n.. versionadded:: 2.1",
          "line_number": 126,
          "is_async": false
        },
        {
          "name": "from_pyfile",
          "args": [
            "self",
            "filename",
            "silent"
          ],
          "docstring": "Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n:meth:`from_object` function.\n\n:param filename: the filename of the config.  This can either be an\n                 absolute filename or a filename relative to the\n                 root path.\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionadded:: 0.7\n   `silent` parameter.",
          "line_number": 187,
          "is_async": false
        },
        {
          "name": "from_object",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Updates the values from the given object.  An object can be of one\nof the following two types:\n\n-   a string: in this case the object with that name will be imported\n-   an actual object reference: that object is used directly\n\nObjects are usually either modules or classes. :meth:`from_object`\nloads only the uppercase attributes of the module/class. A ``dict``\nobject will not work with :meth:`from_object` because the keys of a\n``dict`` are not attributes of the ``dict`` class.\n\nExample of module-based configuration::\n\n    app.config.from_object('yourapplication.default_config')\n    from yourapplication import default_config\n    app.config.from_object(default_config)\n\nNothing is done to the object before loading. If the object is a\nclass and has ``@property`` attributes, it needs to be\ninstantiated before being passed to this method.\n\nYou should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith :meth:`from_pyfile` and ideally from a location not within the\npackage because the package might be installed system wide.\n\nSee :ref:`config-dev-prod` for an example of class-based configuration\nusing :meth:`from_object`.\n\n:param obj: an import name or object",
          "line_number": 218,
          "is_async": false
        },
        {
          "name": "from_file",
          "args": [
            "self",
            "filename",
            "load",
            "silent",
            "text"
          ],
          "docstring": "Update the values in the config from a file that is loaded\nusing the ``load`` parameter. The loaded data is passed to the\n:meth:`from_mapping` method.\n\n.. code-block:: python\n\n    import json\n    app.config.from_file(\"config.json\", load=json.load)\n\n    import tomllib\n    app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n:param filename: The path to the data file. This can be an\n    absolute path or relative to the config root path.\n:param load: A callable that takes a file handle and returns a\n    mapping of loaded data from the file.\n:type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n    implements a ``read`` method.\n:param silent: Ignore the file if it doesn't exist.\n:param text: Open the file in text or binary mode.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionchanged:: 2.3\n    The ``text`` parameter was added.\n\n.. versionadded:: 2.0",
          "line_number": 256,
          "is_async": false
        },
        {
          "name": "from_mapping",
          "args": [
            "self",
            "mapping"
          ],
          "docstring": "Updates the config like :meth:`update` ignoring items with\nnon-upper keys.\n\n:return: Always returns ``True``.\n\n.. versionadded:: 0.11",
          "line_number": 304,
          "is_async": false
        },
        {
          "name": "get_namespace",
          "args": [
            "self",
            "namespace",
            "lowercase",
            "trim_namespace"
          ],
          "docstring": "Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage::\n\n    app.config['IMAGE_STORE_TYPE'] = 'fs'\n    app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n    app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n    image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\nThe resulting dictionary `image_store_config` would look like::\n\n    {\n        'type': 'fs',\n        'path': '/var/app/images',\n        'base_url': 'http://img.website.com'\n    }\n\nThis is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.\n\n:param namespace: a configuration namespace\n:param lowercase: a flag indicating if the keys of the resulting\n                  dictionary should be lowercase\n:param trim_namespace: a flag indicating if the keys of the resulting\n                  dictionary should not include the namespace\n\n.. versionadded:: 0.11",
          "line_number": 323,
          "is_async": false
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 366,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ConfigAttribute",
          "methods": [
            "__init__",
            "__get__",
            "__get__",
            "__get__",
            "__set__"
          ],
          "docstring": "Makes an attribute forward to the config",
          "line_number": 20,
          "bases": [
            "<ast.Subscript object at 0x0000015104C27640>"
          ]
        },
        {
          "name": "Config",
          "methods": [
            "__init__",
            "from_envvar",
            "from_prefixed_env",
            "from_pyfile",
            "from_object",
            "from_file",
            "from_mapping",
            "get_namespace",
            "__repr__"
          ],
          "docstring": "Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig.\n\nEither you can fill the config from a config file::\n\n    app.config.from_pyfile('yourconfig.cfg')\n\nOr alternatively you can define the configuration options in the\nmodule that calls :meth:`from_object` or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call::\n\n    DEBUG = True\n    SECRET_KEY = 'development key'\n    app.config.from_object(__name__)\n\nIn both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.\n\nProbably the most interesting way to load configurations is from an\nenvironment variable pointing to a file::\n\n    app.config.from_envvar('YOURAPPLICATION_SETTINGS')\n\nIn this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement::\n\n    export YOURAPPLICATION_SETTINGS='/path/to/config/file'\n\nOn windows use `set` instead.\n\n:param root_path: path to which files are read relative from.  When the\n                  config object is created by the application, this is\n                  the application's :attr:`~flask.Flask.root_path`.\n:param defaults: an optional dictionary of default values",
          "line_number": 50,
          "bases": [
            "dict"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "comments": [
        "Keep the value as a string if loading failed.",
        "A non-nested key, set directly.",
        "Traverse nested dictionaries with keys separated by \"__\".",
        "If an intermediate dict does not exist, create it."
      ],
      "business_keywords": [
        "config",
        "setting",
        "exception",
        "error",
        "module",
        "order"
      ]
    },
    "src\\flask\\ctx.py": {
      "file_type": ".py",
      "size": 15064,
      "lines": 449,
      "functions": [
        {
          "name": "after_this_request",
          "args": [
            "f"
          ],
          "docstring": "Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.\n\nExample::\n\n    @app.route('/')\n    def index():\n        @after_this_request\n        def add_header(response):\n            response.headers['X-Foo'] = 'Parachute'\n            return response\n        return 'Hello World!'\n\nThis is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.\n\n.. versionadded:: 0.9",
          "line_number": 117,
          "is_async": false
        },
        {
          "name": "copy_current_request_context",
          "args": [
            "f"
          ],
          "docstring": "A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.  The current session is also\nincluded in the copied request context.\n\nExample::\n\n    import gevent\n    from flask import copy_current_request_context\n\n    @app.route('/')\n    def index():\n        @copy_current_request_context\n        def do_some_work():\n            # do some work here, it can access flask.request or\n            # flask.session like you would otherwise in the view function.\n            ...\n        gevent.spawn(do_some_work)\n        return 'Regular response'\n\n.. versionadded:: 0.10",
          "line_number": 155,
          "is_async": false
        },
        {
          "name": "has_request_context",
          "args": [],
          "docstring": "If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.\n\n::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and has_request_context():\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\nAlternatively you can also just test any of the context bound objects\n(such as :class:`request` or :class:`g`) for truthness::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and request:\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\n.. versionadded:: 0.7",
          "line_number": 196,
          "is_async": false
        },
        {
          "name": "has_app_context",
          "args": [],
          "docstring": "Works like :func:`has_request_context` but for the application\ncontext.  You can also just do a boolean check on the\n:data:`current_app` object instead.\n\n.. versionadded:: 0.9",
          "line_number": 228,
          "is_async": false
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_number": 52,
          "is_async": false
        },
        {
          "name": "__setattr__",
          "args": [
            "self",
            "name",
            "value"
          ],
          "docstring": null,
          "line_number": 58,
          "is_async": false
        },
        {
          "name": "__delattr__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self",
            "name",
            "default"
          ],
          "docstring": "Get an attribute by name, or a default value. Like\n:meth:`dict.get`.\n\n:param name: Name of attribute to get.\n:param default: Value to return if the attribute is not present.\n\n.. versionadded:: 0.10",
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "pop",
          "args": [
            "self",
            "name",
            "default"
          ],
          "docstring": "Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n:param name: Name of attribute to pop.\n:param default: Value to return if the attribute is not present,\n    instead of raising a ``KeyError``.\n\n.. versionadded:: 0.11",
          "line_number": 78,
          "is_async": false
        },
        {
          "name": "setdefault",
          "args": [
            "self",
            "name",
            "default"
          ],
          "docstring": "Get the value of an attribute if it is present, otherwise\nset and return a default value. Like :meth:`dict.setdefault`.\n\n:param name: Name of attribute to get.\n:param default: Value to set and return if the attribute is not\n    present.\n\n.. versionadded:: 0.11",
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "__contains__",
          "args": [
            "self",
            "item"
          ],
          "docstring": null,
          "line_number": 104,
          "is_async": false
        },
        {
          "name": "__iter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 107,
          "is_async": false
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 110,
          "is_async": false
        },
        {
          "name": "wrapper",
          "args": [],
          "docstring": null,
          "line_number": 189,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 245,
          "is_async": false
        },
        {
          "name": "push",
          "args": [
            "self"
          ],
          "docstring": "Binds the app context to the current context.",
          "line_number": 251,
          "is_async": false
        },
        {
          "name": "pop",
          "args": [
            "self",
            "exc"
          ],
          "docstring": "Pops the app context.",
          "line_number": 256,
          "is_async": false
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 274,
          "is_async": false
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "tb"
          ],
          "docstring": null,
          "line_number": 278,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app",
            "environ",
            "request",
            "session"
          ],
          "docstring": null,
          "line_number": 309,
          "is_async": false
        },
        {
          "name": "copy",
          "args": [
            "self"
          ],
          "docstring": "Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.\n\n.. versionadded:: 0.10\n\n.. versionchanged:: 1.1\n   The current session object is used instead of reloading the original\n   data. This prevents `flask.session` pointing to an out-of-date object.",
          "line_number": 337,
          "is_async": false
        },
        {
          "name": "match_request",
          "args": [
            "self"
          ],
          "docstring": "Can be overridden by a subclass to hook into the matching\nof the request.",
          "line_number": 357,
          "is_async": false
        },
        {
          "name": "push",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 367,
          "is_async": false
        },
        {
          "name": "pop",
          "args": [
            "self",
            "exc"
          ],
          "docstring": "Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n:meth:`~flask.Flask.teardown_request` decorator.\n\n.. versionchanged:: 0.9\n   Added the `exc` argument.",
          "line_number": 396,
          "is_async": false
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 433,
          "is_async": false
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "tb"
          ],
          "docstring": null,
          "line_number": 437,
          "is_async": false
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 445,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "_AppCtxGlobals",
          "methods": [
            "__getattr__",
            "__setattr__",
            "__delattr__",
            "get",
            "pop",
            "setdefault",
            "__contains__",
            "__iter__",
            "__repr__"
          ],
          "docstring": "A plain object. Used as a namespace for storing data during an\napplication context.\n\nCreating an app context automatically creates this object, which is\nmade available as the :data:`g` proxy.\n\n.. describe:: 'key' in g\n\n    Check whether an attribute is present.\n\n    .. versionadded:: 0.10\n\n.. describe:: iter(g)\n\n    Return an iterator over the attribute names.\n\n    .. versionadded:: 0.10",
          "line_number": 29,
          "bases": []
        },
        {
          "name": "AppContext",
          "methods": [
            "__init__",
            "push",
            "pop",
            "__enter__",
            "__exit__"
          ],
          "docstring": "The app context contains application-specific information. An app\ncontext is created and pushed at the beginning of each request if\none is not already active. An app context is also pushed when\nrunning CLI commands.",
          "line_number": 238,
          "bases": []
        },
        {
          "name": "RequestContext",
          "methods": [
            "__init__",
            "copy",
            "match_request",
            "push",
            "pop",
            "__enter__",
            "__exit__",
            "__repr__"
          ],
          "docstring": "The request context contains per-request information. The Flask\napp creates and pushes it at the beginning of the request, then pops\nit at the end of the request. It will create the URL adapter and\nrequest object for the WSGI environment provided.\n\nDo not attempt to use this class directly, instead use\n:meth:`~flask.Flask.test_request_context` and\n:meth:`~flask.Flask.request_context` to create this object.\n\nWhen the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n(:meth:`~flask.Flask.teardown_request`).\n\nThe request context is automatically popped at the end of the\nrequest. When using the interactive debugger, the context will be\nrestored so ``request`` is still accessible. Similarly, the test\nclient can preserve the context after the request ends. However,\nteardown functions may already have closed some resources such as\ndatabase connections.",
          "line_number": 287,
          "bases": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "comments": [
        "a singleton sentinel value for parameter defaults",
        "Define attr methods to let mypy know this is a namespace object",
        "that has arbitrary attributes.",
        "do some work here, it can access flask.request or",
        "flask.session like you would otherwise in the view function.",
        "Functions that should be executed after the request on the response",
        "object.  These will be called before the regular \"after_request\"",
        "functions.",
        "Before we push the request context we have to ensure that there",
        "is an application context.",
        "Open the session at the moment that the request context is available.",
        "This allows a custom open_session method to use the request context.",
        "Only open a new session if this is the first time the request was",
        "pushed, otherwise stream_with_context loses the session.",
        "Match the request URL after loading the session, so that the",
        "session is available in custom URL converters.",
        "get rid of circular dependencies at the end of the request",
        "so that we don't require the GC to be active."
      ],
      "business_keywords": [
        "module",
        "user",
        "model",
        "exception",
        "route",
        "register",
        "view",
        "error",
        "rule",
        "database"
      ]
    },
    "src\\flask\\debughelpers.py": {
      "file_type": ".py",
      "size": 6080,
      "lines": 178,
      "functions": [
        {
          "name": "attach_enctype_error_multidict",
          "args": [
            "request"
          ],
          "docstring": "Patch ``request.files.__getitem__`` to raise a descriptive error\nabout ``enctype=multipart/form-data``.\n\n:param request: The request to patch.\n:meta private:",
          "line_number": 81,
          "is_async": false
        },
        {
          "name": "_dump_loader_info",
          "args": [
            "loader"
          ],
          "docstring": null,
          "line_number": 107,
          "is_async": false
        },
        {
          "name": "explain_template_loading_attempts",
          "args": [
            "app",
            "template",
            "attempts"
          ],
          "docstring": "This should help developers understand what failed",
          "line_number": 124,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "request",
            "key"
          ],
          "docstring": null,
          "line_number": 28,
          "is_async": false
        },
        {
          "name": "__str__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "request"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "key"
          ],
          "docstring": null,
          "line_number": 91,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "UnexpectedUnicodeError",
          "methods": [],
          "docstring": "Raised in places where we want some better error reporting for\nunexpected unicode or binary data.",
          "line_number": 17,
          "bases": [
            "AssertionError",
            "UnicodeError"
          ]
        },
        {
          "name": "DebugFilesKeyError",
          "methods": [
            "__init__",
            "__str__"
          ],
          "docstring": "Raised from request.files during debugging.  The idea is that it can\nprovide a better error message than just a generic KeyError/BadRequest.",
          "line_number": 23,
          "bases": [
            "KeyError",
            "AssertionError"
          ]
        },
        {
          "name": "FormDataRoutingRedirect",
          "methods": [
            "__init__"
          ],
          "docstring": "This exception is raised in debug mode if a routing redirect\nwould cause the browser to drop the method or body. This happens\nwhen method is not GET, HEAD or OPTIONS and the status code is not\n307 or 308.",
          "line_number": 50,
          "bases": [
            "AssertionError"
          ]
        },
        {
          "name": "newcls",
          "methods": [
            "__getitem__"
          ],
          "docstring": null,
          "line_number": 90,
          "bases": [
            "oldcls"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "comments": [],
      "business_keywords": [
        "report",
        "exception",
        "template",
        "log",
        "error",
        "module",
        "endpoint"
      ]
    },
    "src\\flask\\globals.py": {
      "file_type": ".py",
      "size": 1713,
      "lines": 51,
      "functions": [],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "typing",
        "contextvars.ContextVar",
        "werkzeug.local.LocalProxy",
        "app.Flask",
        "ctx._AppCtxGlobals",
        "ctx.AppContext",
        "ctx.RequestContext",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "comments": [],
      "business_keywords": []
    },
    "src\\flask\\helpers.py": {
      "file_type": ".py",
      "size": 23505,
      "lines": 634,
      "functions": [
        {
          "name": "get_debug_flag",
          "args": [],
          "docstring": "Get whether debug mode should be enabled for the app, indicated by the\n:envvar:`FLASK_DEBUG` environment variable. The default is ``False``.",
          "line_number": 27,
          "is_async": false
        },
        {
          "name": "get_load_dotenv",
          "args": [
            "default"
          ],
          "docstring": "Get whether the user has disabled loading default dotenv files by\nsetting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\nthe files.\n\n:param default: What to return if the env var isn't set.",
          "line_number": 35,
          "is_async": false
        },
        {
          "name": "stream_with_context",
          "args": [
            "generator_or_function"
          ],
          "docstring": null,
          "line_number": 51,
          "is_async": false
        },
        {
          "name": "stream_with_context",
          "args": [
            "generator_or_function"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "stream_with_context",
          "args": [
            "generator_or_function"
          ],
          "docstring": "Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.\n\nThis function however can help you keep the context around for longer::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        @stream_with_context\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(generate())\n\nAlternatively it can also be used around a specific generator::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(stream_with_context(generate()))\n\n.. versionadded:: 0.9",
          "line_number": 62,
          "is_async": false
        },
        {
          "name": "make_response",
          "args": [],
          "docstring": "Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.\n\nIf view looked like this and you want to add a new header::\n\n    def index():\n        return render_template('index.html', foo=42)\n\nYou can now do something like this::\n\n    def index():\n        response = make_response(render_template('index.html', foo=42))\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n        return response\n\nThis function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode::\n\n    response = make_response(render_template('not_found.html'), 404)\n\nThe other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators::\n\n    response = make_response(view_function())\n    response.headers['X-Parachutes'] = 'parachutes are cool'\n\nInternally this function does the following things:\n\n-   if no arguments are passed, it creates a new response argument\n-   if one argument is passed, :meth:`flask.Flask.make_response`\n    is invoked with it.\n-   if more than one argument is passed, the arguments are passed\n    to the :meth:`flask.Flask.make_response` function as tuple.\n\n.. versionadded:: 0.6",
          "line_number": 139,
          "is_async": false
        },
        {
          "name": "url_for",
          "args": [
            "endpoint"
          ],
          "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis requires an active request or application context, and calls\n:meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\nfor full documentation.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it is\n    external.\n:param _external: If given, prefer the URL to be internal (False) or\n    require it to be external (True). External URLs include the\n    scheme and domain. When not in an active request, URLs are\n    external by default.\n:param values: Values to use for the variable parts of the URL rule.\n    Unknown keys are appended as query string arguments, like\n    ``?a=b&c=d``.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.url_for``, allowing an app to override the\n    behavior.\n\n.. versionchanged:: 0.10\n   The ``_scheme`` parameter was added.\n\n.. versionchanged:: 0.9\n   The ``_anchor`` and ``_method`` parameters were added.\n\n.. versionchanged:: 0.9\n   Calls ``app.handle_url_build_error`` on build errors.",
          "line_number": 188,
          "is_async": false
        },
        {
          "name": "redirect",
          "args": [
            "location",
            "code",
            "Response"
          ],
          "docstring": "Create a redirect response object.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`~flask.Flask.redirect` method, otherwise it will use\n:func:`werkzeug.utils.redirect`.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n:param Response: The response class to use. Not used when\n    ``current_app`` is active, which uses ``app.response_class``.\n\n.. versionadded:: 2.2\n    Calls ``current_app.redirect`` if available instead of always\n    using Werkzeug's default ``redirect``.",
          "line_number": 242,
          "is_async": false
        },
        {
          "name": "abort",
          "args": [
            "code"
          ],
          "docstring": "Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\nstatus code.\n\nIf :data:`~flask.current_app` is available, it will call its\n:attr:`~flask.Flask.aborter` object, otherwise it will use\n:func:`werkzeug.exceptions.abort`.\n\n:param code: The status code for the exception, which must be\n    registered in ``app.aborter``.\n:param args: Passed to the exception.\n:param kwargs: Passed to the exception.\n\n.. versionadded:: 2.2\n    Calls ``current_app.aborter`` if available instead of always\n    using Werkzeug's default ``abort``.",
          "line_number": 266,
          "is_async": false
        },
        {
          "name": "get_template_attribute",
          "args": [
            "template_name",
            "attribute"
          ],
          "docstring": "Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named :file:`_cider.html` with the following contents:\n\n.. sourcecode:: html+jinja\n\n   {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\nYou can access this from Python code like this::\n\n    hello = get_template_attribute('_cider.html', 'hello')\n    return hello('World')\n\n.. versionadded:: 0.2\n\n:param template_name: the name of the template\n:param attribute: the name of the variable of macro to access",
          "line_number": 289,
          "is_async": false
        },
        {
          "name": "flash",
          "args": [
            "message",
            "category"
          ],
          "docstring": "Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call :func:`get_flashed_messages`.\n\n.. versionchanged:: 0.3\n   `category` parameter added.\n\n:param message: the message to be flashed.\n:param category: the category for the message.  The following values\n                 are recommended: ``'message'`` for any kind of message,\n                 ``'error'`` for errors, ``'info'`` for information\n                 messages and ``'warning'`` for warnings.  However any\n                 kind of string can be used as category.",
          "line_number": 311,
          "is_async": false
        },
        {
          "name": "get_flashed_messages",
          "args": [
            "with_categories",
            "category_filter"
          ],
          "docstring": "Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when `with_categories` is set to ``True``, the return value will\nbe a list of tuples in the form ``(category, message)`` instead.\n\nFilter the flashed messages to one or more categories by providing those\ncategories in `category_filter`.  This allows rendering categories in\nseparate html blocks.  The `with_categories` and `category_filter`\narguments are distinct:\n\n* `with_categories` controls whether categories are returned with message\n  text (``True`` gives a tuple, where ``False`` gives just the message text).\n* `category_filter` filters the messages down to only those matching the\n  provided categories.\n\nSee :doc:`/patterns/flashing` for examples.\n\n.. versionchanged:: 0.3\n   `with_categories` parameter added.\n\n.. versionchanged:: 0.9\n    `category_filter` parameter added.\n\n:param with_categories: set to ``True`` to also receive categories.\n:param category_filter: filter of categories to limit return values.  Only\n                        categories in the list will be returned.",
          "line_number": 345,
          "is_async": false
        },
        {
          "name": "_prepare_send_file_kwargs",
          "args": [],
          "docstring": null,
          "line_number": 387,
          "is_async": false
        },
        {
          "name": "send_file",
          "args": [
            "path_or_file",
            "mimetype",
            "as_attachment",
            "download_name",
            "conditional",
            "etag",
            "last_modified",
            "max_age"
          ],
          "docstring": "Send the contents of a file to the client.\n\nThe first argument can be a file path or a file-like object. Paths\nare preferred in most cases because Werkzeug can manage the file and\nget extra information from the path. Passing a file-like object\nrequires that the file is opened in binary mode, and is mostly\nuseful when building a file in memory with :class:`io.BytesIO`.\n\nNever pass file paths provided by a user. The path is assumed to be\ntrusted, so a user could craft a path to access a file you didn't\nintend. Use :func:`send_from_directory` to safely serve\nuser-requested paths from within a directory.\n\nIf the WSGI server sets a ``file_wrapper`` in ``environ``, it is\nused, otherwise Werkzeug's built-in wrapper is used. Alternatively,\nif the HTTP server supports ``X-Sendfile``, configuring Flask with\n``USE_X_SENDFILE = True`` will tell the server to send the given\npath, which is much more efficient than reading it in Python.\n\n:param path_or_file: The path to the file to send, relative to the\n    current working directory if a relative path is given.\n    Alternatively, a file-like object opened in binary mode. Make\n    sure the file pointer is seeked to the start of the data.\n:param mimetype: The MIME type to send for the file. If not\n    provided, it will try to detect it from the file name.\n:param as_attachment: Indicate to a browser that it should offer to\n    save the file instead of displaying it.\n:param download_name: The default name browsers will use when saving\n    the file. Defaults to the passed file name.\n:param conditional: Enable conditional and range responses based on\n    request headers. Requires passing a file path and ``environ``.\n:param etag: Calculate an ETag for the file, which requires passing\n    a file path. Can also be a string to use instead.\n:param last_modified: The last modified time to send for the file,\n    in seconds. If not provided, it will try to detect it from the\n    file path.\n:param max_age: How long the client should cache the file, in\n    seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n    it will be ``no-cache`` to prefer conditional caching.\n\n.. versionchanged:: 2.0\n    ``download_name`` replaces the ``attachment_filename``\n    parameter. If ``as_attachment=False``, it is passed with\n    ``Content-Disposition: inline`` instead.\n\n.. versionchanged:: 2.0\n    ``max_age`` replaces the ``cache_timeout`` parameter.\n    ``conditional`` is enabled and ``max_age`` is not set by\n    default.\n\n.. versionchanged:: 2.0\n    ``etag`` replaces the ``add_etags`` parameter. It can be a\n    string to use instead of generating one.\n\n.. versionchanged:: 2.0\n    Passing a file-like object that inherits from\n    :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n    than sending an empty file.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionchanged:: 1.1\n    ``filename`` may be a :class:`~os.PathLike` object.\n\n.. versionchanged:: 1.1\n    Passing a :class:`~io.BytesIO` object supports range requests.\n\n.. versionchanged:: 1.0.3\n    Filenames are encoded with ASCII instead of Latin-1 for broader\n    compatibility with WSGI servers.\n\n.. versionchanged:: 1.0\n    UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n.. versionchanged:: 0.12\n    The filename is no longer automatically inferred from file\n    objects. If you want to use automatic MIME and etag support,\n    pass a filename via ``filename_or_fp`` or\n    ``attachment_filename``.\n\n.. versionchanged:: 0.12\n    ``attachment_filename`` is preferred over ``filename`` for MIME\n    detection.\n\n.. versionchanged:: 0.9\n    ``cache_timeout`` defaults to\n    :meth:`Flask.get_send_file_max_age`.\n\n.. versionchanged:: 0.7\n    MIME guessing and etag support for file-like objects was\n    removed because it was unreliable. Pass a filename if you are\n    able to, otherwise attach an etag yourself.\n\n.. versionchanged:: 0.5\n    The ``add_etags``, ``cache_timeout`` and ``conditional``\n    parameters were added. The default behavior is to add etags.\n\n.. versionadded:: 0.2",
          "line_number": 400,
          "is_async": false
        },
        {
          "name": "send_from_directory",
          "args": [
            "directory",
            "path"
          ],
          "docstring": "Send a file from within a directory using :func:`send_file`.\n\n.. code-block:: python\n\n    @app.route(\"/uploads/<path:name>\")\n    def download_file(name):\n        return send_from_directory(\n            app.config['UPLOAD_FOLDER'], name, as_attachment=True\n        )\n\nThis is a secure way to serve files from a folder, such as static\nfiles or uploads. Uses :func:`~werkzeug.security.safe_join` to\nensure the path coming from the client is not maliciously crafted to\npoint outside the specified directory.\n\nIf the final path does not point to an existing regular file,\nraises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n:param directory: The directory that ``path`` must be located under,\n    relative to the current application's root path. This *must not*\n    be a value provided by the client, otherwise it becomes insecure.\n:param path: The path to the file to send, relative to\n    ``directory``.\n:param kwargs: Arguments to pass to :func:`send_file`.\n\n.. versionchanged:: 2.0\n    ``path`` replaces the ``filename`` parameter.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionadded:: 0.5",
          "line_number": 526,
          "is_async": false
        },
        {
          "name": "get_root_path",
          "args": [
            "import_name"
          ],
          "docstring": "Find the root path of a package, or the path that contains a\nmodule. If it cannot be found, returns the current working\ndirectory.\n\nNot to be confused with the value returned by :func:`find_package`.\n\n:meta private:",
          "line_number": 570,
          "is_async": false
        },
        {
          "name": "_split_blueprint_path",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 628,
          "is_async": false
        },
        {
          "name": "generator",
          "args": [],
          "docstring": null,
          "line_number": 108,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [],
          "docstring": null,
          "line_number": 102,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "comments": [
        "Dummy sentinel.  Has to be inside the context block or we're",
        "not actually keeping the context around.",
        "The try/finally is here so that if someone passes a WSGI level",
        "iterator in we're still running the cleanup logic.  Generators",
        "don't need that because they are closed on their destruction",
        "automatically.",
        "The trick is to start the generator.  Then the code execution runs until",
        "the first dummy None is yielded at which point the context was already",
        "pushed.  This item is discarded.  Then when the iteration continues the",
        "real generator is executed.",
        "Original implementation:",
        "",
        "session.setdefault('_flashes', []).append((category, message))",
        "",
        "This assumed that changes made to mutable structures in the session are",
        "always in sync with the session object, which is not true for session",
        "implementations that use external storage for keeping their keys/values.",
        "Module already imported and has a file attribute. Use that first.",
        "Next attempt: check the loader.",
        "Loader does not exist or we're referring to an unloaded main",
        "module or a main module without path (interactive sessions), go",
        "with the current working directory.",
        "Fall back to imports.",
        "If we don't have a file path it might be because it is a",
        "namespace package. In this case pick the root path from the",
        "first module that is contained in the package.",
        "filepath is import_name.py for a module, or __init__.py for a package."
      ],
      "business_keywords": [
        "config",
        "security",
        "user",
        "module",
        "setting",
        "exception",
        "template",
        "route",
        "register",
        "log",
        "view",
        "query",
        "error",
        "rule",
        "order",
        "endpoint"
      ]
    },
    "src\\flask\\logging.py": {
      "file_type": ".py",
      "size": 2377,
      "lines": 79,
      "functions": [
        {
          "name": "wsgi_errors_stream",
          "args": [],
          "docstring": "Find the most appropriate error stream for the application. If a request\nis active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\nIf you configure your own :class:`logging.StreamHandler`, you may want to\nuse this for the stream. If you are using file or dict configuration and\ncan't import this directly, you can refer to it as\n``ext://flask.logging.wsgi_errors_stream``.",
          "line_number": 16,
          "is_async": false
        },
        {
          "name": "has_level_handler",
          "args": [
            "logger"
          ],
          "docstring": "Check if there is a handler in the logging chain that will handle the\ngiven logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.",
          "line_number": 31,
          "is_async": false
        },
        {
          "name": "create_logger",
          "args": [
            "app"
          ],
          "docstring": "Get the Flask app's logger and configure it if needed.\n\nThe logger name will be the same as\n:attr:`app.import_name <flask.Flask.name>`.\n\nWhen :attr:`~flask.Flask.debug` is enabled, set the logger level to\n:data:`logging.DEBUG` if it is not set.\n\nIf there is no handler for the logger's effective level, add a\n:class:`~logging.StreamHandler` for\n:func:`~flask.logging.wsgi_errors_stream` with a basic format.",
          "line_number": 58,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "logging",
        "sys",
        "typing",
        "werkzeug.local.LocalProxy",
        "globals.request",
        "sansio.app.App"
      ],
      "comments": [
        ": Log messages to :func:`~flask.logging.wsgi_errors_stream` with the format",
        ": ``[%(asctime)s] %(levelname)s in %(module)s: %(message)s``."
      ],
      "business_keywords": [
        "error",
        "module",
        "log",
        "config"
      ]
    },
    "src\\flask\\sessions.py": {
      "file_type": ".py",
      "size": 15480,
      "lines": 399,
      "functions": [
        {
          "name": "_lazy_sha1",
          "args": [
            "string"
          ],
          "docstring": "Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\nSHA-1, in which case the import and use as a default would fail before the\ndeveloper can configure something else.",
          "line_number": 290,
          "is_async": false
        },
        {
          "name": "permanent",
          "args": [
            "self"
          ],
          "docstring": "This reflects the ``'_permanent'`` key in the dict.",
          "line_number": 28,
          "is_async": false
        },
        {
          "name": "permanent",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "initial"
          ],
          "docstring": null,
          "line_number": 74,
          "is_async": false
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "key"
          ],
          "docstring": null,
          "line_number": 84,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": null,
          "line_number": 88,
          "is_async": false
        },
        {
          "name": "setdefault",
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 103,
          "is_async": false
        },
        {
          "name": "make_null_session",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.\n\nThis creates an instance of :attr:`null_session_class` by default.",
          "line_number": 164,
          "is_async": false
        },
        {
          "name": "is_null_session",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.\n\nThis checks if the object is an instance of :attr:`null_session_class`\nby default.",
          "line_number": 176,
          "is_async": false
        },
        {
          "name": "get_cookie_name",
          "args": [
            "self",
            "app"
          ],
          "docstring": "The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.",
          "line_number": 185,
          "is_async": false
        },
        {
          "name": "get_cookie_domain",
          "args": [
            "self",
            "app"
          ],
          "docstring": "The value of the ``Domain`` parameter on the session cookie. If not set,\nbrowsers will only send the cookie to the exact domain it was set from.\nOtherwise, they will send it to any subdomain of the given value as well.\n\nUses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n.. versionchanged:: 2.3\n    Not set by default, does not fall back to ``SERVER_NAME``.",
          "line_number": 189,
          "is_async": false
        },
        {
          "name": "get_cookie_path",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the ``SESSION_COOKIE_PATH``\nconfig var if it's set, and falls back to ``APPLICATION_ROOT`` or\nuses ``/`` if it's ``None``.",
          "line_number": 201,
          "is_async": false
        },
        {
          "name": "get_cookie_httponly",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\nconfig var.",
          "line_number": 209,
          "is_async": false
        },
        {
          "name": "get_cookie_secure",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Returns True if the cookie should be secure.  This currently\njust returns the value of the ``SESSION_COOKIE_SECURE`` setting.",
          "line_number": 216,
          "is_async": false
        },
        {
          "name": "get_cookie_samesite",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n``SameSite`` attribute. This currently just returns the value of\nthe :data:`SESSION_COOKIE_SAMESITE` setting.",
          "line_number": 222,
          "is_async": false
        },
        {
          "name": "get_cookie_partitioned",
          "args": [
            "self",
            "app"
          ],
          "docstring": "Returns True if the cookie should be partitioned. By default, uses\nthe value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n.. versionadded:: 3.1",
          "line_number": 229,
          "is_async": false
        },
        {
          "name": "get_expiration_time",
          "args": [
            "self",
            "app",
            "session"
          ],
          "docstring": "A helper method that returns an expiration date for the session\nor ``None`` if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.",
          "line_number": 237,
          "is_async": false
        },
        {
          "name": "should_set_cookie",
          "args": [
            "self",
            "app",
            "session"
          ],
          "docstring": "Used by session backends to determine if a ``Set-Cookie`` header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\nalways set.\n\nThis check is usually skipped if the session was deleted.\n\n.. versionadded:: 0.11",
          "line_number": 247,
          "is_async": false
        },
        {
          "name": "open_session",
          "args": [
            "self",
            "app",
            "request"
          ],
          "docstring": "This is called at the beginning of each request, after\npushing the request context, before matching the URL.\n\nThis must return an object which implements a dictionary-like\ninterface as well as the :class:`SessionMixin` interface.\n\nThis will return ``None`` to indicate that loading failed in\nsome way that is not immediately an error. The request\ncontext will fall back to using :meth:`make_null_session`\nin this case.",
          "line_number": 263,
          "is_async": false
        },
        {
          "name": "save_session",
          "args": [
            "self",
            "app",
            "session",
            "response"
          ],
          "docstring": "This is called at the end of each request, after generating\na response, before removing the request context. It is skipped\nif :meth:`is_null_session` returns ``True``.",
          "line_number": 277,
          "is_async": false
        },
        {
          "name": "get_signing_serializer",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 317,
          "is_async": false
        },
        {
          "name": "open_session",
          "args": [
            "self",
            "app",
            "request"
          ],
          "docstring": null,
          "line_number": 337,
          "is_async": false
        },
        {
          "name": "save_session",
          "args": [
            "self",
            "app",
            "session",
            "response"
          ],
          "docstring": null,
          "line_number": 351,
          "is_async": false
        },
        {
          "name": "on_update",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 78,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SessionMixin",
          "methods": [
            "permanent",
            "permanent"
          ],
          "docstring": "Expands a basic dictionary with session attributes.",
          "line_number": 24,
          "bases": [
            "<ast.Subscript object at 0x0000015104C361F0>"
          ]
        },
        {
          "name": "SecureCookieSession",
          "methods": [
            "__init__",
            "__getitem__",
            "get",
            "setdefault"
          ],
          "docstring": "Base class for sessions based on signed cookies.\n\nThis session backend will set the :attr:`modified` and\n:attr:`accessed` attributes. It cannot reliably track whether a\nsession is new (vs. empty), so :attr:`new` remains hard coded to\n``False``.",
          "line_number": 52,
          "bases": [
            "<ast.Subscript object at 0x0000015104C152E0>",
            "SessionMixin"
          ]
        },
        {
          "name": "NullSession",
          "methods": [
            "_fail"
          ],
          "docstring": "Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting.",
          "line_number": 97,
          "bases": [
            "SecureCookieSession"
          ]
        },
        {
          "name": "SessionInterface",
          "methods": [
            "make_null_session",
            "is_null_session",
            "get_cookie_name",
            "get_cookie_domain",
            "get_cookie_path",
            "get_cookie_httponly",
            "get_cookie_secure",
            "get_cookie_samesite",
            "get_cookie_partitioned",
            "get_expiration_time",
            "should_set_cookie",
            "open_session",
            "save_session"
          ],
          "docstring": "The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug's securecookie\nimplementation.  The only methods you have to implement are\n:meth:`open_session` and :meth:`save_session`, the others have\nuseful defaults which you don't need to change.\n\nThe session object returned by the :meth:`open_session` method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the :class:`SessionMixin`.  We recommend just subclassing a dict\nand adding that mixin::\n\n    class Session(dict, SessionMixin):\n        pass\n\nIf :meth:`open_session` returns ``None`` Flask will call into\n:meth:`make_null_session` to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default :class:`NullSession` class that is created\nwill complain that the secret key was not set.\n\nTo replace the session interface on an application all you have to do\nis to assign :attr:`flask.Flask.session_interface`::\n\n    app = Flask(__name__)\n    app.session_interface = MySessionInterface()\n\nMultiple requests with the same session may be sent and handled\nconcurrently. When implementing a new session interface, consider\nwhether reads or writes to the backing store must be synchronized.\nThere is no guarantee on the order in which the session for each\nrequest is opened or saved, it will occur in the order that requests\nbegin and end processing.\n\n.. versionadded:: 0.8",
          "line_number": 114,
          "bases": []
        },
        {
          "name": "SecureCookieSessionInterface",
          "methods": [
            "get_signing_serializer",
            "open_session",
            "save_session"
          ],
          "docstring": "The default session interface that stores sessions in signed cookies\nthrough the :mod:`itsdangerous` module.",
          "line_number": 298,
          "bases": [
            "SessionInterface"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "comments": [
        ": Some implementations can detect whether a session is newly",
        ": created, but that is not guaranteed. Use with caution. The mixin",
        "default is hard-coded ``False``.",
        ": Some implementations can detect changes to the session and set",
        ": this when that happens. The mixin default is hard coded to",
        ": ``True``.",
        ": Some implementations can detect when session data is read or",
        ": written and set this when that happens. The mixin default is hard",
        ": coded to ``True``.",
        ": When data is changed, this is set to ``True``. Only the session",
        ": dictionary itself is tracked; if the session contains mutable",
        ": data (for example a nested dict) then this must be set to",
        ": ``True`` manually when modifying that data. The session cookie",
        ": will only be written to the response if this is ``True``.",
        ": When data is read or written, this is set to ``True``. Used by",
        ":class:`.SecureCookieSessionInterface` to add a ``Vary: Cookie``",
        ": header, which allows caching proxies to cache different pages for",
        ": different users.",
        ": :meth:`make_null_session` will look here for the class that should",
        ": be created when a null session is requested.  Likewise the",
        ": :meth:`is_null_session` method will perform a typecheck against",
        ": this type.",
        ": A flag that indicates if the session interface is pickle based.",
        ": This can be used by Flask extensions to make a decision in regards",
        ": to how to deal with the session object.",
        ":",
        ": .. versionadded:: 0.10",
        ": the salt that should be applied on top of the secret key for the",
        ": signing of cookie based sessions.",
        ": the hash function to use for the signature.  The default is sha1",
        ": the name of the itsdangerous supported key derivation.  The default",
        ": is hmac.",
        ": A python serializer for the payload.  The default is a compact",
        ": JSON derived serializer with support for some extra Python types",
        ": such as datetime objects or tuples.",
        "Add a \"Vary: Cookie\" header if the session was accessed at all.",
        "If the session is modified to be empty, remove the cookie.",
        "If the session is empty, return without setting the cookie."
      ],
      "business_keywords": [
        "config",
        "user",
        "setting",
        "process",
        "error",
        "module",
        "order"
      ]
    },
    "src\\flask\\signals.py": {
      "file_type": ".py",
      "size": 750,
      "lines": 17,
      "functions": [],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "blinker.Namespace"
      ],
      "comments": [
        "This namespace is only for signals provided by Flask itself."
      ],
      "business_keywords": [
        "template",
        "exception"
      ]
    },
    "src\\flask\\templating.py": {
      "file_type": ".py",
      "size": 7537,
      "lines": 219,
      "functions": [
        {
          "name": "_default_template_ctx_processor",
          "args": [],
          "docstring": "Default template context processor.  Injects `request`,\n`session` and `g`.",
          "line_number": 24,
          "is_async": false
        },
        {
          "name": "_render",
          "args": [
            "app",
            "template",
            "context"
          ],
          "docstring": null,
          "line_number": 126,
          "is_async": false
        },
        {
          "name": "render_template",
          "args": [
            "template_name_or_list"
          ],
          "docstring": "Render a template by name with the given context.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.",
          "line_number": 138,
          "is_async": false
        },
        {
          "name": "render_template_string",
          "args": [
            "source"
          ],
          "docstring": "Render a template from the given source string with the given\ncontext.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.",
          "line_number": 153,
          "is_async": false
        },
        {
          "name": "_stream",
          "args": [
            "app",
            "template",
            "context"
          ],
          "docstring": null,
          "line_number": 165,
          "is_async": false
        },
        {
          "name": "stream_template",
          "args": [
            "template_name_or_list"
          ],
          "docstring": "Render a template by name with the given context as a stream.\nThis returns an iterator of strings, which can be used as a\nstreaming response from a view.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
          "line_number": 188,
          "is_async": false
        },
        {
          "name": "stream_template_string",
          "args": [
            "source"
          ],
          "docstring": "Render a template from the given source string with the given\ncontext as a stream. This returns an iterator of strings, which can\nbe used as a streaming response from a view.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
          "line_number": 207,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 45,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "get_source",
          "args": [
            "self",
            "environment",
            "template"
          ],
          "docstring": null,
          "line_number": 60,
          "is_async": false
        },
        {
          "name": "_get_source_explained",
          "args": [
            "self",
            "environment",
            "template"
          ],
          "docstring": null,
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "_get_source_fast",
          "args": [
            "self",
            "environment",
            "template"
          ],
          "docstring": null,
          "line_number": 91,
          "is_async": false
        },
        {
          "name": "_iter_loaders",
          "args": [
            "self",
            "template"
          ],
          "docstring": null,
          "line_number": 101,
          "is_async": false
        },
        {
          "name": "list_templates",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 111,
          "is_async": false
        },
        {
          "name": "generate",
          "args": [],
          "docstring": null,
          "line_number": 173,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Environment",
          "methods": [
            "__init__"
          ],
          "docstring": "Works like a regular Jinja2 environment but has some additional\nknowledge of how Flask's blueprint works so that it can prepend the\nname of the blueprint to referenced templates if necessary.",
          "line_number": 39,
          "bases": [
            "BaseEnvironment"
          ]
        },
        {
          "name": "DispatchingJinjaLoader",
          "methods": [
            "__init__",
            "get_source",
            "_get_source_explained",
            "_get_source_fast",
            "_iter_loaders",
            "list_templates"
          ],
          "docstring": "A loader that looks for templates in the application and all\nthe blueprint folders.",
          "line_number": 52,
          "bases": [
            "BaseLoader"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "comments": [
        "If a request context is active, keep it while generating."
      ],
      "business_keywords": [
        "config",
        "view",
        "template",
        "process"
      ]
    },
    "src\\flask\\testing.py": {
      "file_type": ".py",
      "size": 10120,
      "lines": 298,
      "functions": [
        {
          "name": "_get_werkzeug_version",
          "args": [],
          "docstring": null,
          "line_number": 100,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app",
            "path",
            "base_url",
            "subdomain",
            "url_scheme"
          ],
          "docstring": null,
          "line_number": 49,
          "is_async": false
        },
        {
          "name": "json_dumps",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Serialize ``obj`` to a JSON-formatted string.\n\nThe serialization will be configured according to the config associated\nwith this EnvironBuilder's ``app``.",
          "line_number": 88,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 125,
          "is_async": false
        },
        {
          "name": "session_transaction",
          "args": [
            "self"
          ],
          "docstring": "When used in combination with a ``with`` statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the ``with`` block is left the session is\nstored back.\n\n::\n\n    with client.session_transaction() as session:\n        session['value'] = 42\n\nInternally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n:meth:`~flask.Flask.test_request_context` which are directly\npassed through.",
          "line_number": 136,
          "is_async": false
        },
        {
          "name": "_copy_environ",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_number": 185,
          "is_async": false
        },
        {
          "name": "_request_from_builder_args",
          "args": [
            "self",
            "args",
            "kwargs"
          ],
          "docstring": null,
          "line_number": 193,
          "is_async": false
        },
        {
          "name": "open",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 204,
          "is_async": false
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 249,
          "is_async": false
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "tb"
          ],
          "docstring": null,
          "line_number": 255,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 271,
          "is_async": false
        },
        {
          "name": "invoke",
          "args": [
            "self",
            "cli",
            "args"
          ],
          "docstring": "Invokes a CLI command in an isolated environment. See\n:meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\nfull method documentation. See :ref:`testing-cli` for examples.\n\nIf the ``obj`` argument is not given, passes an instance of\n:class:`~flask.cli.ScriptInfo` that knows how to load the Flask\napp being tested.\n\n:param cli: Command object to invoke. Default is the app's\n    :attr:`~flask.app.Flask.cli` group.\n:param args: List of strings to invoke the command with.\n\n:return: a :class:`~click.testing.Result` object.",
          "line_number": 275,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "EnvironBuilder",
          "methods": [
            "__init__",
            "json_dumps"
          ],
          "docstring": "An :class:`~werkzeug.test.EnvironBuilder`, that takes defaults from the\napplication.\n\n:param app: The Flask application to configure the environment from.\n:param path: URL path being requested.\n:param base_url: Base URL where the app is being served, which\n    ``path`` is relative to. If not given, built from\n    :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n    :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n:param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n:param url_scheme: Scheme to use instead of\n    :data:`PREFERRED_URL_SCHEME`.\n:param json: If given, this is serialized as JSON and passed as\n    ``data``. Also defaults ``content_type`` to\n    ``application/json``.\n:param args: other positional arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.\n:param kwargs: other keyword arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.",
          "line_number": 27,
          "bases": [
            "werkzeug.test.EnvironBuilder"
          ]
        },
        {
          "name": "FlaskClient",
          "methods": [
            "__init__",
            "session_transaction",
            "_copy_environ",
            "_request_from_builder_args",
            "open",
            "__enter__",
            "__exit__"
          ],
          "docstring": "Works like a regular Werkzeug test client but has knowledge about\nFlask's contexts to defer the cleanup of the request context until\nthe end of a ``with`` block. For general information about how to\nuse this class refer to :class:`werkzeug.test.Client`.\n\n.. versionchanged:: 0.12\n   `app.test_client()` includes preset default environment, which can be\n   set after instantiation of the `app.test_client()` object in\n   `client.environ_base`.\n\nBasic usage is outlined in the :doc:`/testing` chapter.",
          "line_number": 109,
          "bases": [
            "Client"
          ]
        },
        {
          "name": "FlaskCliRunner",
          "methods": [
            "__init__",
            "invoke"
          ],
          "docstring": "A :class:`~click.testing.CliRunner` for testing a Flask app's\nCLI commands. Typically created using\n:meth:`~flask.Flask.test_cli_runner`. See :ref:`testing-cli`.",
          "line_number": 265,
          "bases": [
            "CliRunner"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "comments": [
        "isinstance(args[0], BaseRequest)",
        "request is None",
        "Pop any previously preserved contexts. This prevents contexts",
        "from being preserved across redirects or multiple requests",
        "within a single block.",
        "Re-push contexts that were preserved during the request."
      ],
      "business_keywords": [
        "config",
        "user",
        "exception",
        "query",
        "manager",
        "error",
        "module"
      ]
    },
    "src\\flask\\typing.py": {
      "file_type": ".py",
      "size": 3114,
      "lines": 87,
      "functions": [],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "typing",
        "_typeshed.wsgi.WSGIApplication",
        "werkzeug.datastructures.Headers",
        "werkzeug.sansio.response.Response"
      ],
      "comments": [
        "The possible types that are directly convertible or are a Response object.",
        "Only dict is actually accepted, but Mapping allows for TypedDict.",
        "the possible types for an individual HTTP header",
        "the possible types for HTTP headers",
        "The possible types returned by a route function.",
        "Allow any subclass of werkzeug.Response, such as the one from Flask,",
        "as a callback argument. Using werkzeug.Response directly makes a",
        "callback annotated with flask.Response fail type checking.",
        "This should take Exception, but that either breaks typing the argument",
        "with a specific exception, or decorating multiple times with different",
        "exceptions (and using a union type on the argument).",
        "https://github.com/pallets/flask/issues/4095",
        "https://github.com/pallets/flask/issues/4295",
        "https://github.com/pallets/flask/issues/4297"
      ],
      "business_keywords": [
        "exception",
        "template",
        "route",
        "process",
        "error"
      ]
    },
    "src\\flask\\views.py": {
      "file_type": ".py",
      "size": 6962,
      "lines": 191,
      "functions": [
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": "The actual view function behavior. Subclasses must override\nthis and return a valid response. Any variables from the URL\nrule are passed as keyword arguments.",
          "line_number": 78,
          "is_async": false
        },
        {
          "name": "as_view",
          "args": [
            "cls",
            "name"
          ],
          "docstring": "Convert the class into a view function that can be registered\nfor a route.\n\nBy default, the generated view will create a new instance of the\nview class for every request and call its\n:meth:`dispatch_request` method. If the view class sets\n:attr:`init_every_request` to ``False``, the same instance will\nbe used for every request.\n\nExcept for ``name``, all other arguments passed to this method\nare forwarded to the view class ``__init__`` method.\n\n.. versionchanged:: 2.2\n    Added the ``init_every_request`` class attribute.",
          "line_number": 86,
          "is_async": false
        },
        {
          "name": "__init_subclass__",
          "args": [
            "cls"
          ],
          "docstring": null,
          "line_number": 165,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 182,
          "is_async": false
        },
        {
          "name": "view",
          "args": [],
          "docstring": null,
          "line_number": 106,
          "is_async": false
        },
        {
          "name": "view",
          "args": [],
          "docstring": null,
          "line_number": 115,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "View",
          "methods": [
            "dispatch_request",
            "as_view"
          ],
          "docstring": "Subclass this class and override :meth:`dispatch_request` to\ncreate a generic class-based view. Call :meth:`as_view` to create a\nview function that creates an instance of the class with the given\narguments and calls its ``dispatch_request`` method with any URL\nvariables.\n\nSee :doc:`views` for a detailed guide.\n\n.. code-block:: python\n\n    class Hello(View):\n        init_every_request = False\n\n        def dispatch_request(self, name):\n            return f\"Hello, {name}!\"\n\n    app.add_url_rule(\n        \"/hello/<name>\", view_func=Hello.as_view(\"hello\")\n    )\n\nSet :attr:`methods` on the class to change what methods the view\naccepts.\n\nSet :attr:`decorators` on the class to apply a list of decorators to\nthe generated view function. Decorators applied to the class itself\nwill not be applied to the generated view function!\n\nSet :attr:`init_every_request` to ``False`` for efficiency, unless\nyou need to store request-global data on ``self``.",
          "line_number": 16,
          "bases": []
        },
        {
          "name": "MethodView",
          "methods": [
            "__init_subclass__",
            "dispatch_request"
          ],
          "docstring": "Dispatches request methods to the corresponding instance methods.\nFor example, if you implement a ``get`` method, it will be used to\nhandle ``GET`` requests.\n\nThis can be useful for defining a REST API.\n\n:attr:`methods` is automatically set based on the methods defined on\nthe class.\n\nSee :doc:`views` for a detailed guide.\n\n.. code-block:: python\n\n    class CounterAPI(MethodView):\n        def get(self):\n            return str(session.get(\"counter\", 0))\n\n        def post(self):\n            session[\"counter\"] = session.get(\"counter\", 0) + 1\n            return redirect(url_for(\"counter\"))\n\n    app.add_url_rule(\n        \"/counter\", view_func=CounterAPI.as_view(\"counter\")\n    )",
          "line_number": 138,
          "bases": [
            "View"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "comments": [
        ": The methods this view is registered for. Uses the same default",
        ": (``[\"GET\", \"HEAD\", \"OPTIONS\"]``) as ``route`` and",
        ": ``add_url_rule`` by default.",
        ": Control whether the ``OPTIONS`` method is handled automatically.",
        ": Uses the same default (``True``) as ``route`` and",
        ": ``add_url_rule`` by default.",
        ": A list of decorators to apply, in order, to the generated view",
        ": function. Remember that ``@decorator`` syntax is applied bottom",
        ": to top, so the first decorator in the list would be the bottom",
        ": decorator.",
        ":",
        ": .. versionadded:: 0.8",
        ": Create a new instance of this view class for every request by",
        ": default. If a view subclass sets this to ``False``, the same",
        ": instance is used for every request.",
        ":",
        ": A single instance is more efficient, especially if complex setup",
        ": is done during init. However, storing data on ``self`` is no",
        ": longer safe across requests, and :data:`~flask.g` should be used",
        ": instead.",
        ":",
        ": .. versionadded:: 2.2",
        "We attach the view class to the view function for two reasons:",
        "first of all it allows us to easily figure out what class-based",
        "view this thing came from, secondly it's also used for instantiating",
        "the view class so you can actually replace it with something else",
        "for testing purposes and debugging.",
        "If the request method is HEAD and we don't have a handler for it",
        "retry with GET."
      ],
      "business_keywords": [
        "api",
        "rule",
        "route",
        "register",
        "view",
        "error",
        "module",
        "order"
      ]
    },
    "src\\flask\\wrappers.py": {
      "file_type": ".py",
      "size": 9406,
      "lines": 257,
      "functions": [
        {
          "name": "max_content_length",
          "args": [
            "self"
          ],
          "docstring": "The maximum number of bytes that will be read during this request. If\nthis limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\nerror is raised. If it is set to ``None``, no limit is enforced at the\nFlask application level. However, if it is ``None`` and the request has\nno ``Content-Length`` header and the WSGI server does not indicate that\nit terminates the stream, then no data is read to avoid an infinite\nstream.\n\nEach request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\ndefaults to ``None``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This can be set per-request.\n\n.. versionchanged:: 0.6\n    This is configurable through Flask config.",
          "line_number": 60,
          "is_async": false
        },
        {
          "name": "max_content_length",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 89,
          "is_async": false
        },
        {
          "name": "max_form_memory_size",
          "args": [
            "self"
          ],
          "docstring": "The maximum size in bytes any non-file form field may be in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\ndefaults to ``500_000``. It can be set on a specific ``request`` to\napply the limit to that specific view. This should be set appropriately\nbased on an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
          "line_number": 93,
          "is_async": false
        },
        {
          "name": "max_form_memory_size",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 116,
          "is_async": false
        },
        {
          "name": "max_form_parts",
          "args": [
            "self"
          ],
          "docstring": "The maximum number of fields that may be present in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_PARTS` config, which\ndefaults to ``1_000``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
          "line_number": 120,
          "is_async": false
        },
        {
          "name": "max_form_parts",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "endpoint",
          "args": [
            "self"
          ],
          "docstring": "The endpoint that matched the request URL.\n\nThis will be ``None`` if matching failed or has not been\nperformed yet.\n\nThis in combination with :attr:`view_args` can be used to\nreconstruct the same URL or a modified URL.",
          "line_number": 147,
          "is_async": false
        },
        {
          "name": "blueprint",
          "args": [
            "self"
          ],
          "docstring": "The registered name of the current blueprint.\n\nThis will be ``None`` if the endpoint is not part of a\nblueprint, or if URL matching failed or has not been performed\nyet.\n\nThis does not necessarily match the name the blueprint was\ncreated with. It may have been nested, or registered with a\ndifferent name.",
          "line_number": 162,
          "is_async": false
        },
        {
          "name": "blueprints",
          "args": [
            "self"
          ],
          "docstring": "The registered names of the current blueprint upwards through\nparent blueprints.\n\nThis will be an empty list if there is no current blueprint, or\nif URL matching failed.\n\n.. versionadded:: 2.0.1",
          "line_number": 181,
          "is_async": false
        },
        {
          "name": "_load_form_data",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 197,
          "is_async": false
        },
        {
          "name": "on_json_loading_failed",
          "args": [
            "self",
            "e"
          ],
          "docstring": null,
          "line_number": 212,
          "is_async": false
        },
        {
          "name": "max_cookie_size",
          "args": [
            "self"
          ],
          "docstring": "Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\nSee :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\nWerkzeug's docs.",
          "line_number": 247,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Request",
          "methods": [
            "max_content_length",
            "max_content_length",
            "max_form_memory_size",
            "max_form_memory_size",
            "max_form_parts",
            "max_form_parts",
            "endpoint",
            "blueprint",
            "blueprints",
            "_load_form_data",
            "on_json_loading_failed"
          ],
          "docstring": "The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments.\n\nIt is what ends up as :class:`~flask.request`.  If you want to replace\nthe request object used you can subclass this and set\n:attr:`~flask.Flask.request_class` to your subclass.\n\nThe request object is a :class:`~werkzeug.wrappers.Request` subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.",
          "line_number": 18,
          "bases": [
            "RequestBase"
          ]
        },
        {
          "name": "Response",
          "methods": [
            "max_cookie_size"
          ],
          "docstring": "The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don't have to create this object yourself because\n:meth:`~flask.Flask.make_response` will take care of that for you.\n\nIf you want to replace the response object used you can subclass this and\nset :attr:`~flask.Flask.response_class` to your subclass.\n\n.. versionchanged:: 1.0\n    JSON support is added to the response, like the request. This is useful\n    when testing to get the test client response data as JSON.\n\n.. versionchanged:: 1.0\n\n    Added :attr:`max_cookie_size`.",
          "line_number": 222,
          "bases": [
            "ResponseBase"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "comments": [
        ": The internal URL rule that matched the request.  This can be",
        ": useful to inspect which methods are allowed for the URL from",
        ": a before/after handler (``request.url_rule.methods``) etc.",
        ": Though if the request's method was invalid for the URL rule,",
        ": the valid list is available in ``routing_exception.valid_methods``",
        ": instead (an attribute of the Werkzeug exception",
        ": :exc:`~werkzeug.exceptions.MethodNotAllowed`)",
        ": because the request was never internally bound.",
        ":",
        ": .. versionadded:: 0.6",
        ": A dict of view arguments that matched the request.  If an exception",
        ": happened when matching, this will be ``None``.",
        ": If matching the URL failed, this is the exception that will be",
        ": raised / was raised as part of the request handling.  This is",
        ": usually a :exc:`~werkzeug.exceptions.NotFound` exception or",
        ": something similar.",
        "In debug mode we're replacing the files multidict with an ad-hoc",
        "subclass that raises a different error for key errors.",
        "return Werkzeug's default when not in an app context"
      ],
      "business_keywords": [
        "config",
        "module",
        "exception",
        "register",
        "view",
        "error",
        "rule",
        "endpoint"
      ]
    },
    "src\\flask\\__init__.py": {
      "file_type": ".py",
      "size": 2072,
      "lines": 39,
      "functions": [],
      "classes": [],
      "imports": [
        ".json",
        "app.Flask",
        "blueprints.Blueprint",
        "config.Config",
        "ctx.after_this_request",
        "ctx.copy_current_request_context",
        "ctx.has_app_context",
        "ctx.has_request_context",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.session",
        "helpers.abort",
        "helpers.flash",
        "helpers.get_flashed_messages",
        "helpers.get_template_attribute",
        "helpers.make_response",
        "helpers.redirect",
        "helpers.send_file",
        "helpers.send_from_directory",
        "helpers.stream_with_context",
        "helpers.url_for",
        "json.jsonify",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "signals.appcontext_tearing_down",
        "signals.before_render_template",
        "signals.got_request_exception",
        "signals.message_flashed",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "signals.template_rendered",
        "templating.render_template",
        "templating.render_template_string",
        "templating.stream_template",
        "templating.stream_template_string",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "template",
        "exception"
      ]
    },
    "src\\flask\\__main__.py": {
      "file_type": ".py",
      "size": 30,
      "lines": 3,
      "functions": [],
      "classes": [],
      "imports": [
        "cli.main"
      ],
      "comments": [],
      "business_keywords": []
    },
    "src\\flask\\json\\provider.py": {
      "file_type": ".py",
      "size": 7644,
      "lines": 215,
      "functions": [
        {
          "name": "_default",
          "args": [
            "o"
          ],
          "docstring": null,
          "line_number": 108,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 38,
          "is_async": false
        },
        {
          "name": "dumps",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Serialize data as JSON.\n\n:param obj: The data to serialize.\n:param kwargs: May be passed to the underlying JSON library.",
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "dump",
          "args": [
            "self",
            "obj",
            "fp"
          ],
          "docstring": "Serialize data as JSON and write to a file.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: May be passed to the underlying JSON library.",
          "line_number": 49,
          "is_async": false
        },
        {
          "name": "loads",
          "args": [
            "self",
            "s"
          ],
          "docstring": "Deserialize data as JSON.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
          "line_number": 59,
          "is_async": false
        },
        {
          "name": "load",
          "args": [
            "self",
            "fp"
          ],
          "docstring": "Deserialize data as JSON read from a file.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "_prepare_response_obj",
          "args": [
            "self",
            "args",
            "kwargs"
          ],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "response",
          "args": [
            "self"
          ],
          "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype.\n\nThe :func:`~flask.json.jsonify` function calls this method for\nthe current application.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
          "line_number": 89,
          "is_async": false
        },
        {
          "name": "dumps",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Serialize data as JSON to a string.\n\nKeyword arguments are passed to :func:`json.dumps`. Sets some\nparameter defaults from the :attr:`default`,\n:attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n:param obj: The data to serialize.\n:param kwargs: Passed to :func:`json.dumps`.",
          "line_number": 166,
          "is_async": false
        },
        {
          "name": "loads",
          "args": [
            "self",
            "s"
          ],
          "docstring": "Deserialize data as JSON from a string or bytes.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Passed to :func:`json.loads`.",
          "line_number": 181,
          "is_async": false
        },
        {
          "name": "response",
          "args": [
            "self"
          ],
          "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with it. The response mimetype\nwill be \"application/json\" and can be changed with\n:attr:`mimetype`.\n\nIf :attr:`compact` is ``False`` or debug mode is enabled, the\noutput will be formatted to be easier to read.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
          "line_number": 189,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "JSONProvider",
          "methods": [
            "__init__",
            "dumps",
            "dump",
            "loads",
            "load",
            "_prepare_response_obj",
            "response"
          ],
          "docstring": "A standard set of JSON operations for an application. Subclasses\nof this can be used to customize JSON behavior or use different\nJSON libraries.\n\nTo implement a provider for a specific library, subclass this base\nclass and implement at least :meth:`dumps` and :meth:`loads`. All\nother methods have default implementations.\n\nTo use a different provider, either subclass ``Flask`` and set\n:attr:`~flask.Flask.json_provider_class` to a provider class, or set\n:attr:`app.json <flask.Flask.json>` to an instance of the class.\n\n:param app: An application instance. This will be stored as a\n    :class:`weakref.proxy` on the :attr:`_app` attribute.\n\n.. versionadded:: 2.2",
          "line_number": 19,
          "bases": []
        },
        {
          "name": "DefaultJSONProvider",
          "methods": [
            "dumps",
            "loads",
            "response"
          ],
          "docstring": "Provide JSON operations using Python's built-in :mod:`json`\nlibrary. Serializes the following additional data types:\n\n-   :class:`datetime.datetime` and :class:`datetime.date` are\n    serialized to :rfc:`822` strings. This is the same as the HTTP\n    date format.\n-   :class:`uuid.UUID` is serialized to a string.\n-   :class:`dataclasses.dataclass` is passed to\n    :func:`dataclasses.asdict`.\n-   :class:`~markupsafe.Markup` (or any object with a ``__html__``\n    method) will call the ``__html__`` method to get a string.",
          "line_number": 124,
          "bases": [
            "JSONProvider"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "comments": [],
      "business_keywords": [
        "error"
      ]
    },
    "src\\flask\\json\\tag.py": {
      "file_type": ".py",
      "size": 9281,
      "lines": 327,
      "functions": [
        {
          "name": "__init__",
          "args": [
            "self",
            "serializer"
          ],
          "docstring": "Create a tagger for the given serializer.",
          "line_number": 69,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Check if the given value should be tagged by this tag.",
          "line_number": 73,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.",
          "line_number": 77,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Convert the JSON representation back to the correct type. The tag\nwill already be removed.",
          "line_number": 82,
          "is_async": false
        },
        {
          "name": "tag",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Convert the value to a valid JSON type and add the tag structure\naround it.",
          "line_number": 87,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 103,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 110,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 114,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 122,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 125,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 137,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 140,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 150,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 153,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 166,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 169,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 181,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 184,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 187,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 195,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 198,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 201,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 209,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 212,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 215,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 249,
          "is_async": false
        },
        {
          "name": "register",
          "args": [
            "self",
            "tag_class",
            "force",
            "index"
          ],
          "docstring": "Register a new tag with this serializer.\n\n:param tag_class: tag class to register. Will be instantiated with this\n    serializer instance.\n:param force: overwrite an existing tag. If false (default), a\n    :exc:`KeyError` is raised.\n:param index: index to insert the new tag in the tag order. Useful when\n    the new tag is a special case of an existing tag. If ``None``\n    (default), the tag is appended to the end of the order.\n\n:raise KeyError: if the tag key is already registered and ``force`` is\n    not true.",
          "line_number": 256,
          "is_async": false
        },
        {
          "name": "tag",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Convert a value to a tagged representation if necessary.",
          "line_number": 289,
          "is_async": false
        },
        {
          "name": "untag",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Convert a tagged representation back to the original type.",
          "line_number": 297,
          "is_async": false
        },
        {
          "name": "_untag_scan",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 309,
          "is_async": false
        },
        {
          "name": "dumps",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Tag the value and dump it to a compact JSON string.",
          "line_number": 321,
          "is_async": false
        },
        {
          "name": "loads",
          "args": [
            "self",
            "value"
          ],
          "docstring": "Load data from a JSON string and deserialized any tagged objects.",
          "line_number": 325,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "JSONTag",
          "methods": [
            "__init__",
            "check",
            "to_json",
            "to_python",
            "tag"
          ],
          "docstring": "Base class for defining type tags for :class:`TaggedJSONSerializer`.",
          "line_number": 60,
          "bases": []
        },
        {
          "name": "TagDict",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": "Tag for 1-item dicts whose only key matches a registered tag.\n\nInternally, the dict key is suffixed with `__`, and the suffix is removed\nwhen deserializing.",
          "line_number": 93,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "PassDict",
          "methods": [
            "check",
            "to_json"
          ],
          "docstring": null,
          "line_number": 119,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TagTuple",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": null,
          "line_number": 133,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "PassList",
          "methods": [
            "check",
            "to_json"
          ],
          "docstring": null,
          "line_number": 147,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TagBytes",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": null,
          "line_number": 159,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TagMarkup",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": "Serialize anything matching the :class:`~markupsafe.Markup` API by\nhaving a ``__html__`` method to the result of that method. Always\ndeserializes to an instance of :class:`~markupsafe.Markup`.",
          "line_number": 173,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TagUUID",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": null,
          "line_number": 191,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TagDateTime",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": null,
          "line_number": 205,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "TaggedJSONSerializer",
          "methods": [
            "__init__",
            "register",
            "tag",
            "untag",
            "_untag_scan",
            "dumps",
            "loads"
          ],
          "docstring": "Serializer that uses a tag system to compactly represent objects that\nare not JSON types. Passed as the intermediate serializer to\n:class:`itsdangerous.Serializer`.\n\nThe following extra types are supported:\n\n* :class:`dict`\n* :class:`tuple`\n* :class:`bytes`\n* :class:`~markupsafe.Markup`\n* :class:`~uuid.UUID`\n* :class:`~datetime.datetime`",
          "line_number": 219,
          "bases": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "comments": [
        ": The tag to mark the serialized object with. If empty, this tag is",
        ": only used as an intermediate step during tagging.",
        "JSON objects may only have string keys, so don't bother tagging the",
        "key here.",
        ": Tag classes to bind when creating the serializer. Other tags can be",
        ": added later using :meth:`~register`.",
        "untag each item recursively",
        "untag the dict itself",
        "untag each item recursively"
      ],
      "business_keywords": [
        "api",
        "register",
        "process",
        "error",
        "order"
      ]
    },
    "src\\flask\\json\\__init__.py": {
      "file_type": ".py",
      "size": 5602,
      "lines": 170,
      "functions": [
        {
          "name": "dumps",
          "args": [
            "obj"
          ],
          "docstring": "Serialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\nmethod, otherwise it will use :func:`json.dumps`.\n\n:param obj: The data to serialize.\n:param kwargs: Arguments passed to the ``dumps`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dumps``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "dump",
          "args": [
            "obj",
            "fp"
          ],
          "docstring": "Serialize data as JSON and write to a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\nmethod, otherwise it will use :func:`json.dump`.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: Arguments passed to the ``dump`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dump``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    Writing to a binary file, and the ``encoding`` argument, will be\n    removed in Flask 2.1.",
          "line_number": 47,
          "is_async": false
        },
        {
          "name": "loads",
          "args": [
            "s"
          ],
          "docstring": "Deserialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\nmethod, otherwise it will use :func:`json.loads`.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``loads`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.loads``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The data must be a\n    string or UTF-8 bytes.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
          "line_number": 77,
          "is_async": false
        },
        {
          "name": "load",
          "args": [
            "fp"
          ],
          "docstring": "Deserialize data as JSON read from a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\nmethod, otherwise it will use :func:`json.load`.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``load`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.load``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.2\n    The ``app`` parameter will be removed in Flask 2.3.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The file must be text\n    mode, or binary mode with UTF-8 bytes.",
          "line_number": 108,
          "is_async": false
        },
        {
          "name": "jsonify",
          "args": [],
          "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype. A dict or list returned from a view will be converted to a\nJSON response automatically without needing to call this.\n\nThis requires an active request or application context, and calls\n:meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\nIn debug mode, the output is formatted with indentation to make it\neasier to read. This may also be controlled by the provider.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.response``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 0.11\n    Added support for serializing top-level arrays. This was a\n    security risk in ancient browsers. See :ref:`security-json`.\n\n.. versionadded:: 0.2",
          "line_number": 138,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "security",
        "view"
      ]
    },
    "src\\flask\\sansio\\app.py": {
      "file_type": ".py",
      "size": 38093,
      "lines": 964,
      "functions": [
        {
          "name": "_make_timedelta",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 52,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "import_name",
            "static_url_path",
            "static_folder",
            "static_host",
            "host_matching",
            "subdomain_matching",
            "template_folder",
            "instance_path",
            "instance_relative_config",
            "root_path"
          ],
          "docstring": null,
          "line_number": 282,
          "is_async": false
        },
        {
          "name": "_check_setup_finished",
          "args": [
            "self",
            "f_name"
          ],
          "docstring": null,
          "line_number": 413,
          "is_async": false
        },
        {
          "name": "name",
          "args": [
            "self"
          ],
          "docstring": "The name of the application.  This is usually the import name\nwith the difference that it's guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.\n\n.. versionadded:: 0.8",
          "line_number": 426,
          "is_async": false
        },
        {
          "name": "logger",
          "args": [
            "self"
          ],
          "docstring": "A standard Python :class:`~logging.Logger` for the app, with\nthe same name as :attr:`name`.\n\nIn debug mode, the logger's :attr:`~logging.Logger.level` will\nbe set to :data:`~logging.DEBUG`.\n\nIf there are no handlers configured, a default handler will be\nadded. See :doc:`/logging` for more information.\n\n.. versionchanged:: 1.1.0\n    The logger takes the same name as :attr:`name` rather than\n    hard-coding ``\"flask.app\"``.\n\n.. versionchanged:: 1.0.0\n    Behavior was simplified. The logger is always named\n    ``\"flask.app\"``. The level is only set during configuration,\n    it doesn't check ``app.debug`` each time. Only one format is\n    used, not different ones depending on ``app.debug``. No\n    handlers are removed, and a handler is only added if no\n    handlers are already configured.\n\n.. versionadded:: 0.3",
          "line_number": 443,
          "is_async": false
        },
        {
          "name": "jinja_env",
          "args": [
            "self"
          ],
          "docstring": "The Jinja environment used to load templates.\n\nThe environment is created the first time this property is\naccessed. Changing :attr:`jinja_options` after that will have no\neffect.",
          "line_number": 470,
          "is_async": false
        },
        {
          "name": "create_jinja_environment",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 479,
          "is_async": false
        },
        {
          "name": "make_config",
          "args": [
            "self",
            "instance_relative"
          ],
          "docstring": "Used to create the config attribute by the Flask constructor.\nThe `instance_relative` parameter is passed in from the constructor\nof Flask (there named `instance_relative_config`) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.\n\n.. versionadded:: 0.8",
          "line_number": 482,
          "is_async": false
        },
        {
          "name": "make_aborter",
          "args": [
            "self"
          ],
          "docstring": "Create the object to assign to :attr:`aborter`. That object\nis called by :func:`flask.abort` to raise HTTP errors, and can\nbe called directly as well.\n\nBy default, this creates an instance of :attr:`aborter_class`,\nwhich defaults to :class:`werkzeug.exceptions.Aborter`.\n\n.. versionadded:: 2.2",
          "line_number": 498,
          "is_async": false
        },
        {
          "name": "auto_find_instance_path",
          "args": [
            "self"
          ],
          "docstring": "Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named ``instance`` next to your main file or\nthe package.\n\n.. versionadded:: 0.8",
          "line_number": 510,
          "is_async": false
        },
        {
          "name": "create_global_jinja_loader",
          "args": [
            "self"
          ],
          "docstring": "Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It's\ndiscouraged to override this function.  Instead one should override\nthe :meth:`jinja_loader` function instead.\n\nThe global loader dispatches between the loaders of the application\nand the individual blueprints.\n\n.. versionadded:: 0.7",
          "line_number": 523,
          "is_async": false
        },
        {
          "name": "select_jinja_autoescape",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Returns ``True`` if autoescaping should be active for the given\ntemplate name. If no template name is given, returns `True`.\n\n.. versionchanged:: 2.2\n    Autoescaping is now enabled by default for ``.svg`` files.\n\n.. versionadded:: 0.5",
          "line_number": 536,
          "is_async": false
        },
        {
          "name": "debug",
          "args": [
            "self"
          ],
          "docstring": "Whether debug mode is enabled. When using ``flask run`` to start the\ndevelopment server, an interactive debugger will be shown for unhandled\nexceptions, and the server will be reloaded when code changes. This maps to the\n:data:`DEBUG` config key. It may not behave as expected if set late.\n\n**Do not enable debug mode when deploying in production.**\n\nDefault: ``False``",
          "line_number": 550,
          "is_async": false
        },
        {
          "name": "debug",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 563,
          "is_async": false
        },
        {
          "name": "register_blueprint",
          "args": [
            "self",
            "blueprint"
          ],
          "docstring": "Register a :class:`~flask.Blueprint` on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.\n\nCalls the blueprint's :meth:`~flask.Blueprint.register` method after\nrecording the blueprint in the application's :attr:`blueprints`.\n\n:param blueprint: The blueprint to register.\n:param url_prefix: Blueprint routes will be prefixed with this.\n:param subdomain: Blueprint routes will match on this subdomain.\n:param url_defaults: Blueprint routes will use these default values for\n    view arguments.\n:param options: Additional keyword arguments are passed to\n    :class:`~flask.blueprints.BlueprintSetupState`. They can be\n    accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 0.7",
          "line_number": 570,
          "is_async": false
        },
        {
          "name": "iter_blueprints",
          "args": [
            "self"
          ],
          "docstring": "Iterates over all blueprints by the order they were registered.\n\n.. versionadded:: 0.11",
          "line_number": 597,
          "is_async": false
        },
        {
          "name": "add_url_rule",
          "args": [
            "self",
            "rule",
            "endpoint",
            "view_func",
            "provide_automatic_options"
          ],
          "docstring": null,
          "line_number": 605,
          "is_async": false
        },
        {
          "name": "template_filter",
          "args": [
            "self",
            "name"
          ],
          "docstring": "A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example::\n\n  @app.template_filter()\n  def reverse(s):\n      return s[::-1]\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
          "line_number": 664,
          "is_async": false
        },
        {
          "name": "add_template_filter",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a custom template filter.  Works exactly like the\n:meth:`template_filter` decorator.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
          "line_number": 686,
          "is_async": false
        },
        {
          "name": "template_test",
          "args": [
            "self",
            "name"
          ],
          "docstring": "A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example::\n\n  @app.template_test()\n  def is_prime(n):\n      if n == 2:\n          return True\n      for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n          if n % i == 0:\n              return False\n      return True\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
          "line_number": 698,
          "is_async": false
        },
        {
          "name": "add_template_test",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a custom template test.  Works exactly like the\n:meth:`template_test` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
          "line_number": 727,
          "is_async": false
        },
        {
          "name": "template_global",
          "args": [
            "self",
            "name"
          ],
          "docstring": "A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example::\n\n    @app.template_global()\n    def double(n):\n        return 2 * n\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
          "line_number": 741,
          "is_async": false
        },
        {
          "name": "add_template_global",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a custom template global function. Works exactly like the\n:meth:`template_global` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
          "line_number": 765,
          "is_async": false
        },
        {
          "name": "teardown_appcontext",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Registers a function to be called when the application\ncontext is popped. The application context is typically popped\nafter the request context for each request, at the end of CLI\ncommands, or after a manually pushed context ends.\n\n.. code-block:: python\n\n    with app.app_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the app context is\nmade inactive. Since a request context typically also manages an\napplication context it would also be called when you pop a\nrequest context.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\n.. versionadded:: 0.9",
          "line_number": 779,
          "is_async": false
        },
        {
          "name": "shell_context_processor",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Registers a shell context processor function.\n\n.. versionadded:: 0.11",
          "line_number": 813,
          "is_async": false
        },
        {
          "name": "_find_error_handler",
          "args": [
            "self",
            "e",
            "blueprints"
          ],
          "docstring": "Return a registered error handler for an exception in this order:\nblueprint handler for a specific code, app handler for a specific code,\nblueprint handler for an exception class, app handler for an exception\nclass, or ``None`` if a suitable handler is not found.",
          "line_number": 823,
          "is_async": false
        },
        {
          "name": "trap_http_exception",
          "args": [
            "self",
            "e"
          ],
          "docstring": "Checks if an HTTP exception should be trapped or not.  By default\nthis will return ``False`` for all exceptions except for a bad request\nkey error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\nalso returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\nThis is called for all HTTP exceptions raised by a view function.\nIf it returns ``True`` for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.\n\n.. versionchanged:: 1.0\n    Bad request errors are not trapped by default in debug mode.\n\n.. versionadded:: 0.8",
          "line_number": 848,
          "is_async": false
        },
        {
          "name": "should_ignore_error",
          "args": [
            "self",
            "error"
          ],
          "docstring": "This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns ``True`` then the teardown handlers will not be\npassed the error.\n\n.. versionadded:: 0.10",
          "line_number": 883,
          "is_async": false
        },
        {
          "name": "redirect",
          "args": [
            "self",
            "location",
            "code"
          ],
          "docstring": "Create a redirect response object.\n\nThis is called by :func:`flask.redirect`, and can be called\ndirectly as well.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n\n.. versionadded:: 2.2\n    Moved from ``flask.redirect``, which calls this method.",
          "line_number": 893,
          "is_async": false
        },
        {
          "name": "inject_url_defaults",
          "args": [
            "self",
            "endpoint",
            "values"
          ],
          "docstring": "Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.\n\n.. versionadded:: 0.7",
          "line_number": 911,
          "is_async": false
        },
        {
          "name": "handle_url_build_error",
          "args": [
            "self",
            "error",
            "endpoint",
            "values"
          ],
          "docstring": "Called by :meth:`.url_for` if a\n:exc:`~werkzeug.routing.BuildError` was raised. If this returns\na value, it will be returned by ``url_for``, otherwise the error\nwill be re-raised.\n\nEach function in :attr:`url_build_error_handlers` is called with\n``error``, ``endpoint`` and ``values``. If a function returns\n``None`` or raises a ``BuildError``, it is skipped. Otherwise,\nits return value is returned by ``url_for``.\n\n:param error: The active ``BuildError`` being handled.\n:param endpoint: The endpoint being built.\n:param values: The keyword arguments passed to ``url_for``.",
          "line_number": 932,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 679,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 720,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 758,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "App",
          "methods": [
            "__init__",
            "_check_setup_finished",
            "name",
            "logger",
            "jinja_env",
            "create_jinja_environment",
            "make_config",
            "make_aborter",
            "auto_find_instance_path",
            "create_global_jinja_loader",
            "select_jinja_autoescape",
            "debug",
            "debug",
            "register_blueprint",
            "iter_blueprints",
            "add_url_rule",
            "template_filter",
            "add_template_filter",
            "template_test",
            "add_template_test",
            "template_global",
            "add_template_global",
            "teardown_appcontext",
            "shell_context_processor",
            "_find_error_handler",
            "trap_http_exception",
            "should_ignore_error",
            "redirect",
            "inject_url_defaults",
            "handle_url_build_error"
          ],
          "docstring": "The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.\n\nThe name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\nFor more information about resource loading, see :func:`open_resource`.\n\nUsually you create a :class:`Flask` instance in your main module or\nin the :file:`__init__.py` file of your package like this::\n\n    from flask import Flask\n    app = Flask(__name__)\n\n.. admonition:: About the First Parameter\n\n    The idea of the first parameter is to give Flask an idea of what\n    belongs to your application.  This name is used to find resources\n    on the filesystem, can be used by extensions to improve debugging\n    information and a lot more.\n\n    So it's important what you provide there.  If you are using a single\n    module, `__name__` is always the correct value.  If you however are\n    using a package, it's usually recommended to hardcode the name of\n    your package there.\n\n    For example if your application is defined in :file:`yourapplication/app.py`\n    you should create it with one of the two versions below::\n\n        app = Flask('yourapplication')\n        app = Flask(__name__.split('.')[0])\n\n    Why is that?  The application will work even with `__name__`, thanks\n    to how resources are looked up.  However it will make debugging more\n    painful.  Certain extensions can make assumptions based on the\n    import name of your application.  For example the Flask-SQLAlchemy\n    extension will look for the code in your application that triggered\n    an SQL query in debug mode.  If the import name is not properly set\n    up, that debugging information is lost.  (For example it would only\n    pick up SQL queries in `yourapplication.app` and not\n    `yourapplication.views.frontend`)\n\n.. versionadded:: 0.7\n   The `static_url_path`, `static_folder`, and `template_folder`\n   parameters were added.\n\n.. versionadded:: 0.8\n   The `instance_path` and `instance_relative_config` parameters were\n   added.\n\n.. versionadded:: 0.11\n   The `root_path` parameter was added.\n\n.. versionadded:: 1.0\n   The ``host_matching`` and ``static_host`` parameters were added.\n\n.. versionadded:: 1.0\n   The ``subdomain_matching`` parameter was added. Subdomain\n   matching needs to be enabled manually now. Setting\n   :data:`SERVER_NAME` does not implicitly enable it.\n\n:param import_name: the name of the application package\n:param static_url_path: can be used to specify a different path for the\n                        static files on the web.  Defaults to the name\n                        of the `static_folder` folder.\n:param static_folder: The folder with static files that is served at\n    ``static_url_path``. Relative to the application ``root_path``\n    or an absolute path. Defaults to ``'static'``.\n:param static_host: the host to use when adding the static route.\n    Defaults to None. Required when using ``host_matching=True``\n    with a ``static_folder`` configured.\n:param host_matching: set ``url_map.host_matching`` attribute.\n    Defaults to False.\n:param subdomain_matching: consider the subdomain relative to\n    :data:`SERVER_NAME` when matching routes. Defaults to False.\n:param template_folder: the folder that contains the templates that should\n                        be used by the application.  Defaults to\n                        ``'templates'`` folder in the root path of the\n                        application.\n:param instance_path: An alternative instance path for the application.\n                      By default the folder ``'instance'`` next to the\n                      package or module is assumed to be the instance\n                      path.\n:param instance_relative_config: if set to ``True`` relative filenames\n                                 for loading the config are assumed to\n                                 be relative to the instance path instead\n                                 of the application root.\n:param root_path: The path to the root of the application files.\n    This should only be set manually when it can't be detected\n    automatically, such as for namespace packages.",
          "line_number": 59,
          "bases": [
            "Scaffold"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "comments": [
        ": The class of the object assigned to :attr:`aborter`, created by",
        ": :meth:`create_aborter`. That object is called by",
        ": :func:`flask.abort` to raise HTTP errors, and can be",
        ": called directly as well.",
        ":",
        ": Defaults to :class:`werkzeug.exceptions.Aborter`.",
        ":",
        ": .. versionadded:: 2.2",
        ": The class that is used for the Jinja environment.",
        ":",
        ": .. versionadded:: 0.11",
        ": The class that is used for the :data:`~flask.g` instance.",
        ":",
        ": Example use cases for a custom class:",
        ":",
        ": 1. Store arbitrary attributes on flask.g.",
        ": 2. Add a property for lazy per-request database connectors.",
        ": 3. Return None instead of AttributeError on unexpected attributes.",
        ": 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.",
        ":",
        ": In Flask 0.9 this property was called `request_globals_class` but it",
        ": was changed in 0.10 to :attr:`app_ctx_globals_class` because the",
        ": flask.g object is now application context scoped.",
        ":",
        ": .. versionadded:: 0.10",
        ": The class that is used for the ``config`` attribute of this app.",
        ": Defaults to :class:`~flask.Config`.",
        ":",
        ": Example use cases for a custom class:",
        ":",
        ": 1. Default values for certain config options.",
        ": 2. Access to config values through attributes in addition to keys.",
        ":",
        ": .. versionadded:: 0.11",
        ": The testing flag.  Set this to ``True`` to enable the test mode of",
        ": Flask extensions (and in the future probably also Flask itself).",
        ": For example this might activate test helpers that have an",
        ": additional runtime cost which should not be enabled by default.",
        ":",
        ": If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the",
        ": default it's implicitly enabled.",
        ":",
        ": This attribute can also be configured from the config with the",
        ": ``TESTING`` configuration key.  Defaults to ``False``.",
        ": If a secret key is set, cryptographic components can use this to",
        ": sign cookies and other things. Set this to a complex random value",
        ": when you want to use the secure cookie for instance.",
        ":",
        ": This attribute can also be configured from the config with the",
        ": :data:`SECRET_KEY` configuration key. Defaults to ``None``.",
        ": A :class:`~datetime.timedelta` which is used to set the expiration",
        ": date of a permanent session.  The default is 31 days which makes a",
        ": permanent session survive for roughly one month.",
        ":",
        ": This attribute can also be configured from the config with the",
        ": ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to",
        ": ``timedelta(days=31)``",
        ": Options that are passed to the Jinja environment in",
        ": :meth:`create_jinja_environment`. Changing these options after",
        ": the environment is created (accessing :attr:`jinja_env`) will",
        ": have no effect.",
        ":",
        ": .. versionchanged:: 1.1.0",
        ":     This is a ``dict`` instead of an ``ImmutableDict`` to allow",
        ":     easier configuration.",
        ":",
        ": The rule object to use for URL rules created.  This is used by",
        ": :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.",
        ":",
        ": .. versionadded:: 0.7",
        ": The map object to use for storing the URL rules and routing",
        ": configuration parameters. Defaults to :class:`werkzeug.routing.Map`.",
        ":",
        ": .. versionadded:: 1.1.0",
        ": The :meth:`test_client` method creates an instance of this test",
        ": client class. Defaults to :class:`~flask.testing.FlaskClient`.",
        ":",
        ": .. versionadded:: 0.7",
        ": The :class:`~click.testing.CliRunner` subclass, by default",
        ": :class:`~flask.testing.FlaskCliRunner` that is used by",
        ": :meth:`test_cli_runner`. Its ``__init__`` method should take a",
        ": Flask app object as the first argument.",
        ":",
        ": .. versionadded:: 1.0",
        ": Holds the path to the instance folder.",
        ":",
        ": .. versionadded:: 0.8",
        ": The configuration dictionary as :class:`Config`.  This behaves",
        ": exactly like a regular dictionary but supports additional methods",
        ": to load a config from files.",
        ": An instance of :attr:`aborter_class` created by",
        ": :meth:`make_aborter`. This is called by :func:`flask.abort`",
        ": to raise HTTP errors, and can be called directly as well.",
        ":",
        ": .. versionadded:: 2.2",
        ":     Moved from ``flask.abort``, which calls this object.",
        ": A list of functions that are called by",
        ": :meth:`handle_url_build_error` when :meth:`.url_for` raises a",
        ": :exc:`~werkzeug.routing.BuildError`. Each function is called",
        ": with ``error``, ``endpoint`` and ``values``. If a function",
        ": returns ``None`` or raises a ``BuildError``, it is skipped.",
        ": Otherwise, its return value is returned by ``url_for``.",
        ":",
        ": .. versionadded:: 0.9",
        ": A list of functions that are called when the application context",
        ": is destroyed.  Since the application context is also torn down",
        ": if the request ends this is the place to store code that disconnects",
        ": from databases.",
        ":",
        ": .. versionadded:: 0.9",
        ": A list of shell context processor functions that should be run",
        ": when a shell context is created.",
        ":",
        ": .. versionadded:: 0.11",
        ": Maps registered blueprint names to blueprint objects. The",
        ": dict retains the order the blueprints were registered in.",
        ": Blueprints can be registered multiple times, this dict does",
        ": not track how often they were attached.",
        ":",
        ": .. versionadded:: 0.7",
        ": a place where extensions can store application specific state.  For",
        ": example this is where an extension could store database engines and",
        ": similar things.",
        ":",
        ": The key must match the name of the extension module. For example in",
        ": case of a \"Flask-Foo\" extension in `flask_foo`, the key would be",
        ": ``'foo'``.",
        ":",
        ": .. versionadded:: 0.7",
        ": The :class:`~werkzeug.routing.Map` for this instance.  You can use",
        ": this to change the routing converters after the class was created",
        ": but before any routes are connected.  Example::",
        ":",
        ":    from werkzeug.routing import BaseConverter",
        ":",
        ":    class ListConverter(BaseConverter):",
        ":        def to_python(self, value):",
        ":            return value.split(',')",
        ":        def to_url(self, values):",
        ":            return ','.join(super(ListConverter, self).to_url(value)",
        ":                            for value in values)",
        ":",
        ":    app = Flask(__name__)",
        ":    app.url_map.converters['list'] = ListConverter",
        "tracks internally if the application already handled at least one",
        "request.",
        "if the methods are not given and the view_func object knows its",
        "methods we can use that instead.  If neither exists, we go with",
        "a tuple of only ``GET`` as default.",
        "Methods that should always be added",
        "starting with Flask 0.8 the view_func object can disable and",
        "force-enable the automatic options handling.",
        "Add the required methods now.",
        "if unset, trap key errors in debug mode",
        "url_for may be called outside a request context, parse the",
        "passed endpoint instead of using request.blueprints.",
        "make error available outside except block",
        "Re-raise if called with an active exception, otherwise raise",
        "the passed in exception."
      ],
      "business_keywords": [
        "setting",
        "component",
        "error",
        "endpoint",
        "api",
        "rule",
        "database",
        "config",
        "product",
        "exception",
        "query",
        "module",
        "template",
        "route",
        "register",
        "log",
        "process",
        "view",
        "order"
      ]
    },
    "src\\flask\\sansio\\blueprints.py": {
      "file_type": ".py",
      "size": 24637,
      "lines": 632,
      "functions": [
        {
          "name": "__init__",
          "args": [
            "self",
            "blueprint",
            "app",
            "options",
            "first_registration"
          ],
          "docstring": null,
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "add_url_rule",
          "args": [
            "self",
            "rule",
            "endpoint",
            "view_func"
          ],
          "docstring": "A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint's name.",
          "line_number": 87,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "import_name",
            "static_folder",
            "static_url_path",
            "template_folder",
            "url_prefix",
            "subdomain",
            "url_defaults",
            "root_path",
            "cli_group"
          ],
          "docstring": null,
          "line_number": 174,
          "is_async": false
        },
        {
          "name": "_check_setup_finished",
          "args": [
            "self",
            "f_name"
          ],
          "docstring": null,
          "line_number": 213,
          "is_async": false
        },
        {
          "name": "record",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the :meth:`make_setup_state`\nmethod.",
          "line_number": 224,
          "is_async": false
        },
        {
          "name": "record_once",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Works like :meth:`record` but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.",
          "line_number": 233,
          "is_async": false
        },
        {
          "name": "make_setup_state",
          "args": [
            "self",
            "app",
            "options",
            "first_registration"
          ],
          "docstring": "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.",
          "line_number": 246,
          "is_async": false
        },
        {
          "name": "register_blueprint",
          "args": [
            "self",
            "blueprint"
          ],
          "docstring": "Register a :class:`~flask.Blueprint` on this blueprint. Keyword\narguments passed to this method will override the defaults set\non the blueprint.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 2.0",
          "line_number": 256,
          "is_async": false
        },
        {
          "name": "register",
          "args": [
            "self",
            "app",
            "options"
          ],
          "docstring": "Called by :meth:`Flask.register_blueprint` to register all\nviews and callbacks registered on the blueprint with the\napplication. Creates a :class:`.BlueprintSetupState` and calls\neach :meth:`record` callback with it.\n\n:param app: The application this blueprint is being registered\n    with.\n:param options: Keyword arguments forwarded from\n    :meth:`~Flask.register_blueprint`.\n\n.. versionchanged:: 2.3\n    Nested blueprints now correctly apply subdomains.\n\n.. versionchanged:: 2.1\n    Registering the same blueprint with the same name multiple\n    times is an error.\n\n.. versionchanged:: 2.0.1\n    Nested blueprints are registered with their dotted name.\n    This allows different blueprints with the same name to be\n    nested at different locations.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.",
          "line_number": 273,
          "is_async": false
        },
        {
          "name": "_merge_blueprint_funcs",
          "args": [
            "self",
            "app",
            "name"
          ],
          "docstring": null,
          "line_number": 379,
          "is_async": false
        },
        {
          "name": "add_url_rule",
          "args": [
            "self",
            "rule",
            "endpoint",
            "view_func",
            "provide_automatic_options"
          ],
          "docstring": "Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\nfull documentation.\n\nThe URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\nused with :func:`url_for`, is prefixed with the blueprint's name.",
          "line_number": 413,
          "is_async": false
        },
        {
          "name": "app_template_filter",
          "args": [
            "self",
            "name"
          ],
          "docstring": "Register a template filter, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
          "line_number": 444,
          "is_async": false
        },
        {
          "name": "add_app_template_filter",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a template filter, available in any template rendered by the\napplication. Works like the :meth:`app_template_filter` decorator. Equivalent to\n:meth:`.Flask.add_template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
          "line_number": 461,
          "is_async": false
        },
        {
          "name": "app_template_test",
          "args": [
            "self",
            "name"
          ],
          "docstring": "Register a template test, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
          "line_number": 478,
          "is_async": false
        },
        {
          "name": "add_app_template_test",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a template test, available in any template rendered by the\napplication. Works like the :meth:`app_template_test` decorator. Equivalent to\n:meth:`.Flask.add_template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
          "line_number": 497,
          "is_async": false
        },
        {
          "name": "app_template_global",
          "args": [
            "self",
            "name"
          ],
          "docstring": "Register a template global, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
          "line_number": 516,
          "is_async": false
        },
        {
          "name": "add_app_template_global",
          "args": [
            "self",
            "f",
            "name"
          ],
          "docstring": "Register a template global, available in any template rendered by the\napplication. Works like the :meth:`app_template_global` decorator. Equivalent to\n:meth:`.Flask.add_template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
          "line_number": 535,
          "is_async": false
        },
        {
          "name": "before_app_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`before_request`, but before every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.before_request`.",
          "line_number": 554,
          "is_async": false
        },
        {
          "name": "after_app_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`after_request`, but after every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.after_request`.",
          "line_number": 564,
          "is_async": false
        },
        {
          "name": "teardown_app_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`teardown_request`, but after every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.",
          "line_number": 574,
          "is_async": false
        },
        {
          "name": "app_context_processor",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`context_processor`, but for templates rendered by every view, not\nonly by the blueprint. Equivalent to :meth:`.Flask.context_processor`.",
          "line_number": 584,
          "is_async": false
        },
        {
          "name": "app_errorhandler",
          "args": [
            "self",
            "code"
          ],
          "docstring": "Like :meth:`errorhandler`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.errorhandler`.",
          "line_number": 596,
          "is_async": false
        },
        {
          "name": "app_url_value_preprocessor",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`url_value_preprocessor`, but for every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.",
          "line_number": 613,
          "is_async": false
        },
        {
          "name": "app_url_defaults",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Like :meth:`url_defaults`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.url_defaults`.",
          "line_number": 625,
          "is_async": false
        },
        {
          "name": "wrapper",
          "args": [
            "state"
          ],
          "docstring": null,
          "line_number": 240,
          "is_async": false
        },
        {
          "name": "extend",
          "args": [
            "bp_dict",
            "parent_dict"
          ],
          "docstring": null,
          "line_number": 380,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 454,
          "is_async": false
        },
        {
          "name": "register_template",
          "args": [
            "state"
          ],
          "docstring": null,
          "line_number": 472,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 490,
          "is_async": false
        },
        {
          "name": "register_template",
          "args": [
            "state"
          ],
          "docstring": null,
          "line_number": 510,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 528,
          "is_async": false
        },
        {
          "name": "register_template",
          "args": [
            "state"
          ],
          "docstring": null,
          "line_number": 548,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 603,
          "is_async": false
        },
        {
          "name": "from_blueprint",
          "args": [
            "state"
          ],
          "docstring": null,
          "line_number": 604,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "BlueprintSetupState",
          "methods": [
            "__init__",
            "add_url_rule"
          ],
          "docstring": "Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the\n:meth:`~flask.Blueprint.make_setup_state` method and later passed\nto all register callback functions.",
          "line_number": 34,
          "bases": []
        },
        {
          "name": "Blueprint",
          "methods": [
            "__init__",
            "_check_setup_finished",
            "record",
            "record_once",
            "make_setup_state",
            "register_blueprint",
            "register",
            "_merge_blueprint_funcs",
            "add_url_rule",
            "app_template_filter",
            "add_app_template_filter",
            "app_template_test",
            "add_app_template_test",
            "app_template_global",
            "add_app_template_global",
            "before_app_request",
            "after_app_request",
            "teardown_app_request",
            "app_context_processor",
            "app_errorhandler",
            "app_url_value_preprocessor",
            "app_url_defaults"
          ],
          "docstring": "Represents a blueprint, a collection of routes and other\napp-related functions that can be registered on a real application\nlater.\n\nA blueprint is an object that allows defining application functions\nwithout requiring an application object ahead of time. It uses the\nsame decorators as :class:`~flask.Flask`, but defers the need for an\napplication by recording them for later registration.\n\nDecorating a function with a blueprint creates a deferred function\nthat is called with :class:`~flask.blueprints.BlueprintSetupState`\nwhen the blueprint is registered on an application.\n\nSee :doc:`/blueprints` for more information.\n\n:param name: The name of the blueprint. Will be prepended to each\n    endpoint name.\n:param import_name: The name of the blueprint package, usually\n    ``__name__``. This helps locate the ``root_path`` for the\n    blueprint.\n:param static_folder: A folder with static files that should be\n    served by the blueprint's static route. The path is relative to\n    the blueprint's root path. Blueprint static files are disabled\n    by default.\n:param static_url_path: The url to serve static files from.\n    Defaults to ``static_folder``. If the blueprint does not have\n    a ``url_prefix``, the app's static route will take precedence,\n    and the blueprint's static files won't be accessible.\n:param template_folder: A folder with templates that should be added\n    to the app's template search path. The path is relative to the\n    blueprint's root path. Blueprint templates are disabled by\n    default. Blueprint templates have a lower precedence than those\n    in the app's templates folder.\n:param url_prefix: A path to prepend to all of the blueprint's URLs,\n    to make them distinct from the rest of the app's routes.\n:param subdomain: A subdomain that blueprint routes will match on by\n    default.\n:param url_defaults: A dict of default values that blueprint routes\n    will receive by default.\n:param root_path: By default, the blueprint will automatically set\n    this based on ``import_name``. In certain situations this\n    automatic detection can fail, so the path can be specified\n    manually instead.\n\n.. versionchanged:: 1.1.0\n    Blueprints have a ``cli`` group to register nested CLI commands.\n    The ``cli_group`` parameter controls the name of the group under\n    the ``flask`` command.\n\n.. versionadded:: 0.7",
          "line_number": 119,
          "bases": [
            "Scaffold"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "comments": [
        ": a reference to the current application",
        ": a reference to the blueprint that created this setup state.",
        ": a dictionary with all options that were passed to the",
        ": :meth:`~flask.Flask.register_blueprint` method.",
        ": as blueprints can be registered multiple times with the",
        ": application and not everything wants to be registered",
        ": multiple times on it, this attribute can be used to figure",
        ": out if the blueprint was registered in the past already.",
        ": The subdomain that the blueprint should be active for, ``None``",
        ": otherwise.",
        ": The prefix that should be used for all URLs defined on the",
        ": blueprint.",
        ": A dictionary with URL defaults that is added to each and every",
        ": URL that was defined with the blueprint.",
        "Merge blueprint data into parent."
      ],
      "business_keywords": [
        "exception",
        "template",
        "route",
        "register",
        "process",
        "view",
        "error",
        "rule",
        "endpoint"
      ]
    },
    "src\\flask\\sansio\\README.md": {
      "file_type": ".md",
      "size": 228,
      "lines": 6,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [],
      "headings": [
        {
          "level": 1,
          "title": "Sansio"
        }
      ],
      "code_blocks": [],
      "links": []
    },
    "src\\flask\\sansio\\scaffold.py": {
      "file_type": ".py",
      "size": 30371,
      "lines": 792,
      "functions": [
        {
          "name": "setupmethod",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "_endpoint_from_view_func",
          "args": [
            "view_func"
          ],
          "docstring": "Internal helper that returns the default endpoint for a given\nfunction.  This always is the function name.",
          "line_number": 701,
          "is_async": false
        },
        {
          "name": "_find_package_path",
          "args": [
            "import_name"
          ],
          "docstring": "Find the path that contains the package or module.",
          "line_number": 709,
          "is_async": false
        },
        {
          "name": "find_package",
          "args": [
            "import_name"
          ],
          "docstring": "Find the prefix that a package is installed under, and the path\nthat it would be imported from.\n\nThe prefix is the directory containing the standard directory\nhierarchy (lib, bin, etc.). If the package is not installed to the\nsystem (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n``None`` is returned.\n\nThe path is the entry in :attr:`sys.path` that contains the package\nfor import. If the package is not installed, it's assumed that the\npackage was imported from the current working directory.",
          "line_number": 754,
          "is_async": false
        },
        {
          "name": "wrapper_func",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 45,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "import_name",
            "static_folder",
            "static_url_path",
            "template_folder",
            "root_path"
          ],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 217,
          "is_async": false
        },
        {
          "name": "_check_setup_finished",
          "args": [
            "self",
            "f_name"
          ],
          "docstring": null,
          "line_number": 220,
          "is_async": false
        },
        {
          "name": "static_folder",
          "args": [
            "self"
          ],
          "docstring": "The absolute path to the configured static folder. ``None``\nif no static folder is set.",
          "line_number": 224,
          "is_async": false
        },
        {
          "name": "static_folder",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 234,
          "is_async": false
        },
        {
          "name": "has_static_folder",
          "args": [
            "self"
          ],
          "docstring": "``True`` if :attr:`static_folder` is set.\n\n.. versionadded:: 0.5",
          "line_number": 241,
          "is_async": false
        },
        {
          "name": "static_url_path",
          "args": [
            "self"
          ],
          "docstring": "The URL prefix that the static route will be accessible from.\n\nIf it was not configured during init, it is derived from\n:attr:`static_folder`.",
          "line_number": 249,
          "is_async": false
        },
        {
          "name": "static_url_path",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 265,
          "is_async": false
        },
        {
          "name": "jinja_loader",
          "args": [
            "self"
          ],
          "docstring": "The Jinja loader for this object's templates. By default this\nis a class :class:`jinja2.loaders.FileSystemLoader` to\n:attr:`template_folder` if it is set.\n\n.. versionadded:: 0.5",
          "line_number": 272,
          "is_async": false
        },
        {
          "name": "_method_route",
          "args": [
            "self",
            "method",
            "rule",
            "options"
          ],
          "docstring": null,
          "line_number": 284,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n.. versionadded:: 2.0",
          "line_number": 296,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n.. versionadded:: 2.0",
          "line_number": 304,
          "is_async": false
        },
        {
          "name": "put",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n.. versionadded:: 2.0",
          "line_number": 312,
          "is_async": false
        },
        {
          "name": "delete",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n.. versionadded:: 2.0",
          "line_number": 320,
          "is_async": false
        },
        {
          "name": "patch",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n.. versionadded:: 2.0",
          "line_number": 328,
          "is_async": false
        },
        {
          "name": "route",
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Decorate a view function to register it with the given URL\nrule and options. Calls :meth:`add_url_rule`, which has more\ndetails about the implementation.\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello, World!\"\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n``OPTIONS`` are added automatically.\n\n:param rule: The URL rule string.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
          "line_number": 336,
          "is_async": false
        },
        {
          "name": "add_url_rule",
          "args": [
            "self",
            "rule",
            "endpoint",
            "view_func",
            "provide_automatic_options"
          ],
          "docstring": "Register a rule for routing incoming requests and building\nURLs. The :meth:`route` decorator is a shortcut to call this\nwith the ``view_func`` argument. These are equivalent:\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        ...\n\n.. code-block:: python\n\n    def index():\n        ...\n\n    app.add_url_rule(\"/\", view_func=index)\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed. An error\nwill be raised if a function has already been registered for the\nendpoint.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\nalways added automatically, and ``OPTIONS`` is added\nautomatically by default.\n\n``view_func`` does not necessarily need to be passed, but if the\nrule should participate in routing an endpoint name must be\nassociated with a view function at some point with the\n:meth:`endpoint` decorator.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/\", endpoint=\"index\")\n\n    @app.endpoint(\"index\")\n    def index():\n        ...\n\nIf ``view_func`` has a ``required_methods`` attribute, those\nmethods are added to the passed and automatic methods. If it\nhas a ``provide_automatic_methods`` attribute, it is used as the\ndefault if the parameter is not passed.\n\n:param rule: The URL rule string.\n:param endpoint: The endpoint name to associate with the rule\n    and view function. Used when routing and building URLs.\n    Defaults to ``view_func.__name__``.\n:param view_func: The view function to associate with the\n    endpoint name.\n:param provide_automatic_options: Add the ``OPTIONS`` method and\n    respond to ``OPTIONS`` requests automatically.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
          "line_number": 368,
          "is_async": false
        },
        {
          "name": "endpoint",
          "args": [
            "self",
            "endpoint"
          ],
          "docstring": "Decorate a view function to register it for the given\nendpoint. Used if a rule is added without a ``view_func`` with\n:meth:`add_url_rule`.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n    @app.endpoint(\"example\")\n    def example():\n        ...\n\n:param endpoint: The endpoint name to associate with the view\n    function.",
          "line_number": 436,
          "is_async": false
        },
        {
          "name": "before_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Register a function to run before each request.\n\nFor example, this can be used to open a database connection, or\nto load the logged in user from the session.\n\n.. code-block:: python\n\n    @app.before_request\n    def load_user():\n        if \"user_id\" in session:\n            g.user = db.session.get(session[\"user_id\"])\n\nThe function will be called without any arguments. If it returns\na non-``None`` value, the value is handled as if it was the\nreturn value from the view, and further request handling is\nstopped.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes before every request. When used on a blueprint, this executes before\nevery request that the blueprint handles. To register with a blueprint and\nexecute before every request, use :meth:`.Blueprint.before_app_request`.",
          "line_number": 460,
          "is_async": false
        },
        {
          "name": "after_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Register a function to run after each request to this object.\n\nThe function is called with the response object, and must return\na response object. This allows the functions to modify or\nreplace the response before it is sent.\n\nIf a function raises an exception, any remaining\n``after_request`` functions will not be called. Therefore, this\nshould not be used for actions that must execute, such as to\nclose resources. Use :meth:`teardown_request` for that.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.after_app_request`.",
          "line_number": 487,
          "is_async": false
        },
        {
          "name": "teardown_request",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Register a function to be called when the request context is\npopped. Typically this happens at the end of each request, but\ncontexts may be pushed manually as well during testing.\n\n.. code-block:: python\n\n    with app.test_request_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the request context is\nmade inactive.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.teardown_app_request`.",
          "line_number": 508,
          "is_async": false
        },
        {
          "name": "context_processor",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Registers a template context processor function. These functions run before\nrendering a template. The keys of the returned dict are added as variables\navailable in the template.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every rendered template. When used on a blueprint, this is called\nfor templates rendered from the blueprint's views. To register with a blueprint\nand affect every template, use :meth:`.Blueprint.app_context_processor`.",
          "line_number": 542,
          "is_async": false
        },
        {
          "name": "url_value_preprocessor",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n:meth:`before_request` functions.\n\nThe function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in ``g`` rather than pass it to\nevery view.\n\nThe function is passed the endpoint name and values dict. The return\nvalue is ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_value_preprocessor`.",
          "line_number": 559,
          "is_async": false
        },
        {
          "name": "url_defaults",
          "args": [
            "self",
            "f"
          ],
          "docstring": "Callback function for URL defaults for all view functions of the\napplication.  It's called with the endpoint and values and should\nupdate the values passed in place.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_defaults`.",
          "line_number": 584,
          "is_async": false
        },
        {
          "name": "errorhandler",
          "args": [
            "self",
            "code_or_exception"
          ],
          "docstring": "Register a function to handle errors by code or exception class.\n\nA decorator that is used to register a function given an\nerror code.  Example::\n\n    @app.errorhandler(404)\n    def page_not_found(error):\n        return 'This page does not exist', 404\n\nYou can also register handlers for arbitrary exceptions::\n\n    @app.errorhandler(DatabaseError)\n    def special_exception_handler(error):\n        return 'Database connection failed', 500\n\nThis is available on both app and blueprint objects. When used on an app, this\ncan handle errors from every request. When used on a blueprint, this can handle\nerrors from requests that the blueprint handles. To register with a blueprint\nand affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n.. versionadded:: 0.7\n    Use :meth:`register_error_handler` instead of modifying\n    :attr:`error_handler_spec` directly, for application wide error\n    handlers.\n\n.. versionadded:: 0.7\n   One can now additionally also register custom exception types\n   that do not necessarily have to be a subclass of the\n   :class:`~werkzeug.exceptions.HTTPException` class.\n\n:param code_or_exception: the code as integer for the handler, or\n                          an arbitrary exception",
          "line_number": 598,
          "is_async": false
        },
        {
          "name": "register_error_handler",
          "args": [
            "self",
            "code_or_exception",
            "f"
          ],
          "docstring": "Alternative error attach function to the :meth:`errorhandler`\ndecorator that is more straightforward to use for non decorator\nusage.\n\n.. versionadded:: 0.7",
          "line_number": 642,
          "is_async": false
        },
        {
          "name": "_get_exc_class_and_code",
          "args": [
            "exc_class_or_code"
          ],
          "docstring": "Get the exception class being handled. For HTTP status codes\nor ``HTTPException`` subclasses, return both the exception and\nstatus code.\n\n:param exc_class_or_code: Any exception class, or an HTTP status\n    code as an integer.",
          "line_number": 657,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 360,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 453,
          "is_async": false
        },
        {
          "name": "decorator",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 635,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Scaffold",
          "methods": [
            "__init__",
            "__repr__",
            "_check_setup_finished",
            "static_folder",
            "static_folder",
            "has_static_folder",
            "static_url_path",
            "static_url_path",
            "jinja_loader",
            "_method_route",
            "get",
            "post",
            "put",
            "delete",
            "patch",
            "route",
            "add_url_rule",
            "endpoint",
            "before_request",
            "after_request",
            "teardown_request",
            "context_processor",
            "url_value_preprocessor",
            "url_defaults",
            "errorhandler",
            "register_error_handler",
            "_get_exc_class_and_code"
          ],
          "docstring": "Common behavior shared between :class:`~flask.Flask` and\n:class:`~flask.blueprints.Blueprint`.\n\n:param import_name: The import name of the module where this object\n    is defined. Usually :attr:`__name__` should be used.\n:param static_folder: Path to a folder of static files to serve.\n    If this is set, a static route will be added.\n:param static_url_path: URL prefix for the static route.\n:param template_folder: Path to a folder containing template files.\n    for rendering. If this is set, a Jinja loader will be added.\n:param root_path: The path that static, template, and resource files\n    are relative to. Typically not set, it is discovered based on\n    the ``import_name``.\n\n.. versionadded:: 2.0",
          "line_number": 52,
          "bases": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "comments": [
        "a singleton sentinel value for parameter defaults",
        ": The name of the package or module that this object belongs",
        ": to. Do not change this once it is set by the constructor.",
        ": The path to the templates folder, relative to",
        ": :attr:`root_path`, to add to the template loader. ``None`` if",
        ": templates should not be added.",
        ": Absolute path to the package on the filesystem. Used to look",
        ": up resources contained in the package.",
        ": A dictionary mapping endpoint names to view functions.",
        ":",
        ": To register a view function, use the :meth:`route` decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of registered error handlers, in the format",
        ": ``{scope: {code: {class: handler}}}``. The ``scope`` key is",
        ": the name of a blueprint the handlers are active for, or",
        ": ``None`` for all requests. The ``code`` key is the HTTP",
        ": status code for ``HTTPException``, or ``None`` for",
        ": other exceptions. The innermost dictionary maps exception",
        ": classes to handler functions.",
        ":",
        ": To register an error handler, use the :meth:`errorhandler`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call at the beginning of",
        ": each request, in the format ``{scope: [functions]}``. The",
        ": ``scope`` key is the name of a blueprint the functions are",
        ": active for, or ``None`` for all requests.",
        ":",
        ": To register a function, use the :meth:`before_request`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call at the end of each",
        ": request, in the format ``{scope: [functions]}``. The",
        ": ``scope`` key is the name of a blueprint the functions are",
        ": active for, or ``None`` for all requests.",
        ":",
        ": To register a function, use the :meth:`after_request`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call at the end of each",
        ": request even if an exception is raised, in the format",
        ": ``{scope: [functions]}``. The ``scope`` key is the name of a",
        ": blueprint the functions are active for, or ``None`` for all",
        ": requests.",
        ":",
        ": To register a function, use the :meth:`teardown_request`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call to pass extra context",
        ": values when rendering templates, in the format",
        ": ``{scope: [functions]}``. The ``scope`` key is the name of a",
        ": blueprint the functions are active for, or ``None`` for all",
        ": requests.",
        ":",
        ": To register a function, use the :meth:`context_processor`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call to modify the keyword",
        ": arguments passed to the view function, in the format",
        ": ``{scope: [functions]}``. The ``scope`` key is the name of a",
        ": blueprint the functions are active for, or ``None`` for all",
        ": requests.",
        ":",
        ": To register a function, use the",
        ": :meth:`url_value_preprocessor` decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        ": A data structure of functions to call to modify the keyword",
        ": arguments when generating URLs, in the format",
        ": ``{scope: [functions]}``. The ``scope`` key is the name of a",
        ": blueprint the functions are active for, or ``None`` for all",
        ": requests.",
        ":",
        ": To register a function, use the :meth:`url_defaults`",
        ": decorator.",
        ":",
        ": This data structure is internal. It should not be modified",
        ": directly and its format may change at any time.",
        "ImportError: the machinery told us it does not exist",
        "ValueError:",
        "- the module name was invalid",
        "- the module name is __main__",
        "- we raised `ValueError` due to `root_spec` being `None`",
        "namespace package",
        "Pick the path in the namespace that contains the submodule.",
        "Pick the first path.",
        "package with __init__.py",
        "module",
        "installed to the system",
        "installed to a virtualenv",
        "Windows (prefix/lib/site-packages)",
        "Unix (prefix/lib/pythonX.Y/site-packages)",
        "something else (prefix/site-packages)",
        "not installed"
      ],
      "business_keywords": [
        "config",
        "module",
        "user",
        "exception",
        "template",
        "route",
        "register",
        "log",
        "process",
        "view",
        "error",
        "rule",
        "database",
        "endpoint"
      ]
    },
    "tests\\conftest.py": {
      "file_type": ".py",
      "size": 3285,
      "lines": 128,
      "functions": [
        {
          "name": "_standard_os_environ",
          "args": [],
          "docstring": "Set up ``os.environ`` at the start of the test session to have\nstandard values. Returns a list of operations that is used by\n:func:`._reset_os_environ` after each test.",
          "line_number": 12,
          "is_async": false
        },
        {
          "name": "_reset_os_environ",
          "args": [
            "monkeypatch",
            "_standard_os_environ"
          ],
          "docstring": "Reset ``os.environ`` to the standard environ after each test,\nin case a test changed something without cleaning up.",
          "line_number": 37,
          "is_async": false
        },
        {
          "name": "app",
          "args": [],
          "docstring": null,
          "line_number": 45,
          "is_async": false
        },
        {
          "name": "app_ctx",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 55,
          "is_async": false
        },
        {
          "name": "req_ctx",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        },
        {
          "name": "client",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "test_apps",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 72,
          "is_async": false
        },
        {
          "name": "leak_detector",
          "args": [],
          "docstring": null,
          "line_number": 85,
          "is_async": false
        },
        {
          "name": "modules_tmp_path",
          "args": [
            "tmp_path",
            "monkeypatch"
          ],
          "docstring": "A temporary directory added to sys.path.",
          "line_number": 99,
          "is_async": false
        },
        {
          "name": "modules_tmp_path_prefix",
          "args": [
            "modules_tmp_path",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 108,
          "is_async": false
        },
        {
          "name": "site_packages",
          "args": [
            "modules_tmp_path",
            "monkeypatch"
          ],
          "docstring": "Create a fake site-packages.",
          "line_number": 114,
          "is_async": false
        },
        {
          "name": "purge_module",
          "args": [
            "request"
          ],
          "docstring": null,
          "line_number": 124,
          "is_async": false
        },
        {
          "name": "inner",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 125,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "os",
        "sys",
        "pytest",
        "_pytest.monkeypatch",
        "flask.Flask",
        "flask.globals.request_ctx"
      ],
      "comments": [
        "Remove any imports cached during the test. Otherwise \"import app\"",
        "will work in the next test even though it's no longer on the path.",
        "make sure we're not leaking a request context since we are",
        "testing flask internally in debug mode in a few cases"
      ],
      "business_keywords": [
        "config",
        "module"
      ]
    },
    "tests\\test_appctx.py": {
      "file_type": ".py",
      "size": 4978,
      "lines": 209,
      "functions": [
        {
          "name": "test_basic_url_generation",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_url_generation_requires_server_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 21,
          "is_async": false
        },
        {
          "name": "test_url_generation_without_context_fails",
          "args": [],
          "docstring": null,
          "line_number": 27,
          "is_async": false
        },
        {
          "name": "test_request_context_means_app_context",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "test_app_context_provides_current_app",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 38,
          "is_async": false
        },
        {
          "name": "test_app_tearing_down",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 44,
          "is_async": false
        },
        {
          "name": "test_app_tearing_down_with_previous_exception",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "test_app_tearing_down_with_handled_exception_by_except_block",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "test_app_tearing_down_with_handled_exception_by_app_handler",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 91,
          "is_async": false
        },
        {
          "name": "test_app_tearing_down_with_unhandled_exception",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 113,
          "is_async": false
        },
        {
          "name": "test_app_ctx_globals_methods",
          "args": [
            "app",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 134,
          "is_async": false
        },
        {
          "name": "test_custom_app_ctx_globals_class",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 157,
          "is_async": false
        },
        {
          "name": "test_context_refcounts",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 167,
          "is_async": false
        },
        {
          "name": "test_clean_pop",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 193,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "cleanup",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "cleanup",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        },
        {
          "name": "cleanup",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 79,
          "is_async": false
        },
        {
          "name": "cleanup",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 96,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 100,
          "is_async": false
        },
        {
          "name": "handler",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 104,
          "is_async": false
        },
        {
          "name": "cleanup",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 118,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 122,
          "is_async": false
        },
        {
          "name": "teardown_req",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 171,
          "is_async": false
        },
        {
          "name": "teardown_app",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 175,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 179,
          "is_async": false
        },
        {
          "name": "teardown_req",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 198,
          "is_async": false
        },
        {
          "name": "teardown_app",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 202,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 159,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "CustomRequestGlobals",
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "line_number": 158,
          "bases": []
        }
      ],
      "imports": [
        "pytest",
        "flask",
        "flask.globals.app_ctx",
        "flask.globals.request_ctx"
      ],
      "comments": [
        "get",
        "__contains__",
        "setdefault",
        "pop",
        "__iter__",
        "__repr__"
      ],
      "business_keywords": [
        "config",
        "exception",
        "template",
        "route",
        "error"
      ]
    },
    "tests\\test_async.py": {
      "file_type": ".py",
      "size": 3335,
      "lines": 145,
      "functions": [
        {
          "name": "_async_app",
          "args": [],
          "docstring": null,
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "test_async_route",
          "args": [
            "path",
            "async_app"
          ],
          "docstring": null,
          "line_number": 82,
          "is_async": false
        },
        {
          "name": "test_async_error_handler",
          "args": [
            "path",
            "async_app"
          ],
          "docstring": null,
          "line_number": 91,
          "is_async": false
        },
        {
          "name": "test_async_before_after_request",
          "args": [],
          "docstring": null,
          "line_number": 97,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 106,
          "is_async": false
        },
        {
          "name": "bp_index",
          "args": [],
          "docstring": null,
          "line_number": 123,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "AppError",
          "methods": [],
          "docstring": null,
          "line_number": 14,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "BlueprintError",
          "methods": [],
          "docstring": null,
          "line_number": 18,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "AsyncView",
          "methods": [],
          "docstring": null,
          "line_number": 22,
          "bases": [
            "View"
          ]
        },
        {
          "name": "AsyncMethodView",
          "methods": [],
          "docstring": null,
          "line_number": 30,
          "bases": [
            "MethodView"
          ]
        }
      ],
      "imports": [
        "asyncio",
        "pytest",
        "flask.Blueprint",
        "flask.Flask",
        "flask.request",
        "flask.views.MethodView",
        "flask.views.View"
      ],
      "comments": [],
      "business_keywords": [
        "exception",
        "route",
        "register",
        "view",
        "error",
        "rule"
      ]
    },
    "tests\\test_basic.py": {
      "file_type": ".py",
      "size": 53581,
      "lines": 1944,
      "functions": [
        {
          "name": "test_options_work",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "test_options_on_multiple_rules",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 40,
          "is_async": false
        },
        {
          "name": "test_method_route",
          "args": [
            "app",
            "client",
            "method"
          ],
          "docstring": null,
          "line_number": 54,
          "is_async": false
        },
        {
          "name": "test_method_route_no_methods",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 65,
          "is_async": false
        },
        {
          "name": "test_provide_automatic_options_attr",
          "args": [],
          "docstring": null,
          "line_number": 70,
          "is_async": false
        },
        {
          "name": "test_provide_automatic_options_kwarg",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "test_request_dispatching",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 129,
          "is_async": false
        },
        {
          "name": "test_disallow_string_for_allowed_methods",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 152,
          "is_async": false
        },
        {
          "name": "test_url_mapping",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 157,
          "is_async": false
        },
        {
          "name": "test_werkzeug_routing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 193,
          "is_async": false
        },
        {
          "name": "test_endpoint_decorator",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 214,
          "is_async": false
        },
        {
          "name": "test_session",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 234,
          "is_async": false
        },
        {
          "name": "test_session_path",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 257,
          "is_async": false
        },
        {
          "name": "test_session_using_application_root",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 269,
          "is_async": false
        },
        {
          "name": "test_session_using_session_settings",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 291,
          "is_async": false
        },
        {
          "name": "test_session_using_samesite_attribute",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 334,
          "is_async": false
        },
        {
          "name": "test_missing_session",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 361,
          "is_async": false
        },
        {
          "name": "test_session_secret_key_fallbacks",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 374,
          "is_async": false
        },
        {
          "name": "test_session_expiration",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 402,
          "is_async": false
        },
        {
          "name": "test_session_stored_last",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 434,
          "is_async": false
        },
        {
          "name": "test_session_special_types",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 448,
          "is_async": false
        },
        {
          "name": "test_session_cookie_setting",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 479,
          "is_async": false
        },
        {
          "name": "test_session_vary_cookie",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 520,
          "is_async": false
        },
        {
          "name": "test_session_refresh_vary",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 581,
          "is_async": false
        },
        {
          "name": "test_flashes",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 598,
          "is_async": false
        },
        {
          "name": "test_extended_flashing",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 607,
          "is_async": false
        },
        {
          "name": "test_request_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 688,
          "is_async": false
        },
        {
          "name": "test_request_preprocessing_early_return",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 713,
          "is_async": false
        },
        {
          "name": "test_after_request_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 740,
          "is_async": false
        },
        {
          "name": "test_teardown_request_handler",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 755,
          "is_async": false
        },
        {
          "name": "test_teardown_request_handler_debug_mode",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 773,
          "is_async": false
        },
        {
          "name": "test_teardown_request_handler_error",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 791,
          "is_async": false
        },
        {
          "name": "test_before_after_request_order",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 829,
          "is_async": false
        },
        {
          "name": "test_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 867,
          "is_async": false
        },
        {
          "name": "test_error_handling_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 905,
          "is_async": false
        },
        {
          "name": "test_baseexception_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 926,
          "is_async": false
        },
        {
          "name": "test_before_request_and_routing_errors",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 937,
          "is_async": false
        },
        {
          "name": "test_user_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 951,
          "is_async": false
        },
        {
          "name": "test_http_error_subclass_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 967,
          "is_async": false
        },
        {
          "name": "test_errorhandler_precedence",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 999,
          "is_async": false
        },
        {
          "name": "test_trap_bad_request_key_error",
          "args": [
            "app",
            "client",
            "debug",
            "trap",
            "expect_key",
            "expect_abort"
          ],
          "docstring": null,
          "line_number": 1036,
          "is_async": false
        },
        {
          "name": "test_trapping_of_all_http_exceptions",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1067,
          "is_async": false
        },
        {
          "name": "test_error_handler_after_processor_error",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1078,
          "is_async": false
        },
        {
          "name": "test_enctype_debug_helper",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1107,
          "is_async": false
        },
        {
          "name": "test_response_types",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1122,
          "is_async": false
        },
        {
          "name": "test_response_type_errors",
          "args": [],
          "docstring": null,
          "line_number": 1216,
          "is_async": false
        },
        {
          "name": "test_make_response",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1265,
          "is_async": false
        },
        {
          "name": "test_make_response_with_response_instance",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1287,
          "is_async": false
        },
        {
          "name": "test_jsonify_no_prettyprint",
          "args": [
            "app",
            "compact"
          ],
          "docstring": null,
          "line_number": 1309,
          "is_async": false
        },
        {
          "name": "test_jsonify_mimetype",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1317,
          "is_async": false
        },
        {
          "name": "test_json_dump_dataclass",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1324,
          "is_async": false
        },
        {
          "name": "test_jsonify_args_and_kwargs_check",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1333,
          "is_async": false
        },
        {
          "name": "test_url_generation",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 1339,
          "is_async": false
        },
        {
          "name": "test_build_error_handler",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1351,
          "is_async": false
        },
        {
          "name": "test_build_error_handler_reraise",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1377,
          "is_async": false
        },
        {
          "name": "test_url_for_passes_special_values_to_build_error_handler",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1388,
          "is_async": false
        },
        {
          "name": "test_static_files",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1403,
          "is_async": false
        },
        {
          "name": "test_static_url_path",
          "args": [],
          "docstring": null,
          "line_number": 1412,
          "is_async": false
        },
        {
          "name": "test_static_url_path_with_ending_slash",
          "args": [],
          "docstring": null,
          "line_number": 1423,
          "is_async": false
        },
        {
          "name": "test_static_url_empty_path",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1434,
          "is_async": false
        },
        {
          "name": "test_static_url_empty_path_default",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1441,
          "is_async": false
        },
        {
          "name": "test_static_folder_with_pathlib_path",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1448,
          "is_async": false
        },
        {
          "name": "test_static_folder_with_ending_slash",
          "args": [],
          "docstring": null,
          "line_number": 1457,
          "is_async": false
        },
        {
          "name": "test_static_route_with_host_matching",
          "args": [],
          "docstring": null,
          "line_number": 1468,
          "is_async": false
        },
        {
          "name": "test_request_locals",
          "args": [],
          "docstring": null,
          "line_number": 1489,
          "is_async": false
        },
        {
          "name": "test_server_name_matching",
          "args": [
            "subdomain_matching",
            "host_matching",
            "expect_base",
            "expect_abc",
            "expect_xyz"
          ],
          "docstring": null,
          "line_number": 1502,
          "is_async": false
        },
        {
          "name": "test_server_name_subdomain",
          "args": [],
          "docstring": null,
          "line_number": 1536,
          "is_async": false
        },
        {
          "name": "test_exception_propagation",
          "args": [
            "app",
            "client",
            "key"
          ],
          "docstring": null,
          "line_number": 1582,
          "is_async": false
        },
        {
          "name": "test_werkzeug_passthrough_errors",
          "args": [
            "monkeypatch",
            "debug",
            "use_debugger",
            "use_reloader",
            "propagate_exceptions",
            "app"
          ],
          "docstring": null,
          "line_number": 1602,
          "is_async": false
        },
        {
          "name": "test_url_processors",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1616,
          "is_async": false
        },
        {
          "name": "test_inject_blueprint_url_defaults",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 1645,
          "is_async": false
        },
        {
          "name": "test_nonascii_pathinfo",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1669,
          "is_async": false
        },
        {
          "name": "test_no_setup_after_first_request",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1678,
          "is_async": false
        },
        {
          "name": "test_routing_redirect_debugging",
          "args": [
            "monkeypatch",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1693,
          "is_async": false
        },
        {
          "name": "test_route_decorator_custom_endpoint",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1713,
          "is_async": false
        },
        {
          "name": "test_get_method_on_g",
          "args": [
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 1738,
          "is_async": false
        },
        {
          "name": "test_g_iteration_protocol",
          "args": [
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 1746,
          "is_async": false
        },
        {
          "name": "test_subdomain_basic_support",
          "args": [],
          "docstring": null,
          "line_number": 1754,
          "is_async": false
        },
        {
          "name": "test_subdomain_matching",
          "args": [],
          "docstring": null,
          "line_number": 1774,
          "is_async": false
        },
        {
          "name": "test_subdomain_matching_with_ports",
          "args": [],
          "docstring": null,
          "line_number": 1787,
          "is_async": false
        },
        {
          "name": "test_subdomain_matching_other_name",
          "args": [
            "matching"
          ],
          "docstring": null,
          "line_number": 1801,
          "is_async": false
        },
        {
          "name": "test_multi_route_rules",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1824,
          "is_async": false
        },
        {
          "name": "test_multi_route_class_views",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1836,
          "is_async": false
        },
        {
          "name": "test_run_defaults",
          "args": [
            "monkeypatch",
            "app"
          ],
          "docstring": null,
          "line_number": 1852,
          "is_async": false
        },
        {
          "name": "test_run_server_port",
          "args": [
            "monkeypatch",
            "app"
          ],
          "docstring": null,
          "line_number": 1864,
          "is_async": false
        },
        {
          "name": "test_run_from_config",
          "args": [
            "monkeypatch",
            "host",
            "port",
            "server_name",
            "expect_host",
            "expect_port",
            "app"
          ],
          "docstring": null,
          "line_number": 1889,
          "is_async": false
        },
        {
          "name": "test_max_cookie_size",
          "args": [
            "app",
            "client",
            "recwarn"
          ],
          "docstring": null,
          "line_number": 1901,
          "is_async": false
        },
        {
          "name": "test_app_freed_on_zero_refcount",
          "args": [],
          "docstring": null,
          "line_number": 1932,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "index_put",
          "args": [],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "hello",
          "args": [],
          "docstring": null,
          "line_number": 59,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 73,
          "is_async": false
        },
        {
          "name": "index2",
          "args": [],
          "docstring": null,
          "line_number": 83,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 93,
          "is_async": false
        },
        {
          "name": "more",
          "args": [],
          "docstring": null,
          "line_number": 96,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 131,
          "is_async": false
        },
        {
          "name": "more",
          "args": [],
          "docstring": null,
          "line_number": 135,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 160,
          "is_async": false
        },
        {
          "name": "more",
          "args": [],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "options",
          "args": [],
          "docstring": null,
          "line_number": 166,
          "is_async": false
        },
        {
          "name": "bar",
          "args": [],
          "docstring": null,
          "line_number": 201,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 204,
          "is_async": false
        },
        {
          "name": "bar",
          "args": [],
          "docstring": null,
          "line_number": 223,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 227,
          "is_async": false
        },
        {
          "name": "set",
          "args": [],
          "docstring": null,
          "line_number": 236,
          "is_async": false
        },
        {
          "name": "get",
          "args": [],
          "docstring": null,
          "line_number": 245,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 261,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 283,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 304,
          "is_async": false
        },
        {
          "name": "clear",
          "args": [],
          "docstring": null,
          "line_number": 309,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 336,
          "is_async": false
        },
        {
          "name": "expect_exception",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 364,
          "is_async": false
        },
        {
          "name": "set_session",
          "args": [],
          "docstring": null,
          "line_number": 376,
          "is_async": false
        },
        {
          "name": "get_session",
          "args": [],
          "docstring": null,
          "line_number": 381,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 406,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 412,
          "is_async": false
        },
        {
          "name": "modify_session",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 436,
          "is_async": false
        },
        {
          "name": "dump_session_contents",
          "args": [],
          "docstring": null,
          "line_number": 441,
          "is_async": false
        },
        {
          "name": "dump_session_contents",
          "args": [],
          "docstring": null,
          "line_number": 453,
          "is_async": false
        },
        {
          "name": "bump",
          "args": [],
          "docstring": null,
          "line_number": 483,
          "is_async": false
        },
        {
          "name": "read",
          "args": [],
          "docstring": null,
          "line_number": 489,
          "is_async": false
        },
        {
          "name": "run_test",
          "args": [
            "expect_header"
          ],
          "docstring": null,
          "line_number": 492,
          "is_async": false
        },
        {
          "name": "set_session",
          "args": [],
          "docstring": null,
          "line_number": 522,
          "is_async": false
        },
        {
          "name": "get",
          "args": [],
          "docstring": null,
          "line_number": 527,
          "is_async": false
        },
        {
          "name": "getitem",
          "args": [],
          "docstring": null,
          "line_number": 531,
          "is_async": false
        },
        {
          "name": "setdefault",
          "args": [],
          "docstring": null,
          "line_number": 535,
          "is_async": false
        },
        {
          "name": "clear",
          "args": [],
          "docstring": null,
          "line_number": 539,
          "is_async": false
        },
        {
          "name": "vary_cookie_header_set",
          "args": [],
          "docstring": null,
          "line_number": 544,
          "is_async": false
        },
        {
          "name": "vary_header_set",
          "args": [],
          "docstring": null,
          "line_number": 551,
          "is_async": false
        },
        {
          "name": "no_vary_header",
          "args": [],
          "docstring": null,
          "line_number": 558,
          "is_async": false
        },
        {
          "name": "expect",
          "args": [
            "path",
            "header_value"
          ],
          "docstring": null,
          "line_number": 561,
          "is_async": false
        },
        {
          "name": "login",
          "args": [],
          "docstring": null,
          "line_number": 583,
          "is_async": false
        },
        {
          "name": "ignored",
          "args": [],
          "docstring": null,
          "line_number": 589,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 615,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 622,
          "is_async": false
        },
        {
          "name": "test_with_categories",
          "args": [],
          "docstring": null,
          "line_number": 632,
          "is_async": false
        },
        {
          "name": "test_filter",
          "args": [],
          "docstring": null,
          "line_number": 643,
          "is_async": false
        },
        {
          "name": "test_filters",
          "args": [],
          "docstring": null,
          "line_number": 651,
          "is_async": false
        },
        {
          "name": "test_filters2",
          "args": [],
          "docstring": null,
          "line_number": 662,
          "is_async": false
        },
        {
          "name": "before_request",
          "args": [],
          "docstring": null,
          "line_number": 692,
          "is_async": false
        },
        {
          "name": "after_request",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 696,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 702,
          "is_async": false
        },
        {
          "name": "before_request1",
          "args": [],
          "docstring": null,
          "line_number": 717,
          "is_async": false
        },
        {
          "name": "before_request2",
          "args": [],
          "docstring": null,
          "line_number": 721,
          "is_async": false
        },
        {
          "name": "before_request3",
          "args": [],
          "docstring": null,
          "line_number": 726,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 731,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 742,
          "is_async": false
        },
        {
          "name": "teardown_request",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 759,
          "is_async": false
        },
        {
          "name": "root",
          "args": [],
          "docstring": null,
          "line_number": 764,
          "is_async": false
        },
        {
          "name": "teardown_request",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 777,
          "is_async": false
        },
        {
          "name": "root",
          "args": [],
          "docstring": null,
          "line_number": 782,
          "is_async": false
        },
        {
          "name": "teardown_request1",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 796,
          "is_async": false
        },
        {
          "name": "teardown_request2",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 808,
          "is_async": false
        },
        {
          "name": "fails",
          "args": [],
          "docstring": null,
          "line_number": 820,
          "is_async": false
        },
        {
          "name": "before1",
          "args": [],
          "docstring": null,
          "line_number": 833,
          "is_async": false
        },
        {
          "name": "before2",
          "args": [],
          "docstring": null,
          "line_number": 837,
          "is_async": false
        },
        {
          "name": "after1",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 841,
          "is_async": false
        },
        {
          "name": "after2",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 846,
          "is_async": false
        },
        {
          "name": "finish1",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 851,
          "is_async": false
        },
        {
          "name": "finish2",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 855,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 859,
          "is_async": false
        },
        {
          "name": "not_found",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 871,
          "is_async": false
        },
        {
          "name": "internal_server_error",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 875,
          "is_async": false
        },
        {
          "name": "forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 879,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 883,
          "is_async": false
        },
        {
          "name": "error",
          "args": [],
          "docstring": null,
          "line_number": 887,
          "is_async": false
        },
        {
          "name": "error2",
          "args": [],
          "docstring": null,
          "line_number": 891,
          "is_async": false
        },
        {
          "name": "internal_server_error",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 909,
          "is_async": false
        },
        {
          "name": "broken_func",
          "args": [],
          "docstring": null,
          "line_number": 913,
          "is_async": false
        },
        {
          "name": "after_request",
          "args": [
            "resp"
          ],
          "docstring": null,
          "line_number": 917,
          "is_async": false
        },
        {
          "name": "broken_func",
          "args": [],
          "docstring": null,
          "line_number": 930,
          "is_async": false
        },
        {
          "name": "attach_something",
          "args": [],
          "docstring": null,
          "line_number": 939,
          "is_async": false
        },
        {
          "name": "return_something",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 943,
          "is_async": false
        },
        {
          "name": "handle_my_exception",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 956,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 961,
          "is_async": false
        },
        {
          "name": "handle_forbidden_subclass",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 972,
          "is_async": false
        },
        {
          "name": "handle_403",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 977,
          "is_async": false
        },
        {
          "name": "index1",
          "args": [],
          "docstring": null,
          "line_number": 983,
          "is_async": false
        },
        {
          "name": "index2",
          "args": [],
          "docstring": null,
          "line_number": 987,
          "is_async": false
        },
        {
          "name": "index3",
          "args": [],
          "docstring": null,
          "line_number": 991,
          "is_async": false
        },
        {
          "name": "handle_e2",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 1010,
          "is_async": false
        },
        {
          "name": "handle_exception",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 1014,
          "is_async": false
        },
        {
          "name": "raise_e1",
          "args": [],
          "docstring": null,
          "line_number": 1018,
          "is_async": false
        },
        {
          "name": "raise_e3",
          "args": [],
          "docstring": null,
          "line_number": 1022,
          "is_async": false
        },
        {
          "name": "fail",
          "args": [],
          "docstring": null,
          "line_number": 1041,
          "is_async": false
        },
        {
          "name": "allow_abort",
          "args": [],
          "docstring": null,
          "line_number": 1045,
          "is_async": false
        },
        {
          "name": "fail",
          "args": [],
          "docstring": null,
          "line_number": 1071,
          "is_async": false
        },
        {
          "name": "before_request",
          "args": [],
          "docstring": null,
          "line_number": 1082,
          "is_async": false
        },
        {
          "name": "after_request",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 1087,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1094,
          "is_async": false
        },
        {
          "name": "internal_server_error",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 1098,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1113,
          "is_async": false
        },
        {
          "name": "from_text",
          "args": [],
          "docstring": null,
          "line_number": 1124,
          "is_async": false
        },
        {
          "name": "from_bytes",
          "args": [],
          "docstring": null,
          "line_number": 1128,
          "is_async": false
        },
        {
          "name": "from_full_tuple",
          "args": [],
          "docstring": null,
          "line_number": 1132,
          "is_async": false
        },
        {
          "name": "from_text_headers",
          "args": [],
          "docstring": null,
          "line_number": 1140,
          "is_async": false
        },
        {
          "name": "from_text_status",
          "args": [],
          "docstring": null,
          "line_number": 1144,
          "is_async": false
        },
        {
          "name": "from_response_headers",
          "args": [],
          "docstring": null,
          "line_number": 1148,
          "is_async": false
        },
        {
          "name": "from_response_status",
          "args": [],
          "docstring": null,
          "line_number": 1157,
          "is_async": false
        },
        {
          "name": "from_wsgi",
          "args": [],
          "docstring": null,
          "line_number": 1161,
          "is_async": false
        },
        {
          "name": "from_dict",
          "args": [],
          "docstring": null,
          "line_number": 1165,
          "is_async": false
        },
        {
          "name": "from_list",
          "args": [],
          "docstring": null,
          "line_number": 1169,
          "is_async": false
        },
        {
          "name": "from_none",
          "args": [],
          "docstring": null,
          "line_number": 1221,
          "is_async": false
        },
        {
          "name": "from_small_tuple",
          "args": [],
          "docstring": null,
          "line_number": 1225,
          "is_async": false
        },
        {
          "name": "from_large_tuple",
          "args": [],
          "docstring": null,
          "line_number": 1229,
          "is_async": false
        },
        {
          "name": "from_bad_type",
          "args": [],
          "docstring": null,
          "line_number": 1233,
          "is_async": false
        },
        {
          "name": "from_bad_wsgi",
          "args": [],
          "docstring": null,
          "line_number": 1237,
          "is_async": false
        },
        {
          "name": "hello",
          "args": [],
          "docstring": null,
          "line_number": 1341,
          "is_async": false
        },
        {
          "name": "handler",
          "args": [
            "error",
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1368,
          "is_async": false
        },
        {
          "name": "handler_raises_build_error",
          "args": [
            "error",
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1379,
          "is_async": false
        },
        {
          "name": "handler",
          "args": [
            "error",
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1390,
          "is_async": false
        },
        {
          "name": "catch_all",
          "args": [
            "path"
          ],
          "docstring": null,
          "line_number": 1461,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 1519,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1541,
          "is_async": false
        },
        {
          "name": "subdomain",
          "args": [],
          "docstring": null,
          "line_number": 1545,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1586,
          "is_async": false
        },
        {
          "name": "run_simple_mock",
          "args": [],
          "docstring": null,
          "line_number": 1608,
          "is_async": false
        },
        {
          "name": "add_language_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1618,
          "is_async": false
        },
        {
          "name": "pull_lang_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1625,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1629,
          "is_async": false
        },
        {
          "name": "about",
          "args": [],
          "docstring": null,
          "line_number": 1633,
          "is_async": false
        },
        {
          "name": "something_else",
          "args": [],
          "docstring": null,
          "line_number": 1637,
          "is_async": false
        },
        {
          "name": "bp_defaults",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 1649,
          "is_async": false
        },
        {
          "name": "view",
          "args": [
            "page"
          ],
          "docstring": null,
          "line_number": 1653,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1671,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1682,
          "is_async": false
        },
        {
          "name": "user",
          "args": [],
          "docstring": null,
          "line_number": 1697,
          "is_async": false
        },
        {
          "name": "foo",
          "args": [],
          "docstring": null,
          "line_number": 1717,
          "is_async": false
        },
        {
          "name": "for_bar",
          "args": [],
          "docstring": null,
          "line_number": 1721,
          "is_async": false
        },
        {
          "name": "for_bar_foo",
          "args": [],
          "docstring": null,
          "line_number": 1725,
          "is_async": false
        },
        {
          "name": "normal_index",
          "args": [],
          "docstring": null,
          "line_number": 1760,
          "is_async": false
        },
        {
          "name": "test_index",
          "args": [],
          "docstring": null,
          "line_number": 1764,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "user"
          ],
          "docstring": null,
          "line_number": 1780,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "user"
          ],
          "docstring": null,
          "line_number": 1793,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1807,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "test"
          ],
          "docstring": null,
          "line_number": 1827,
          "is_async": false
        },
        {
          "name": "run_simple_mock",
          "args": [],
          "docstring": null,
          "line_number": 1856,
          "is_async": false
        },
        {
          "name": "run_simple_mock",
          "args": [
            "hostname",
            "port",
            "application"
          ],
          "docstring": null,
          "line_number": 1868,
          "is_async": false
        },
        {
          "name": "run_simple_mock",
          "args": [
            "hostname",
            "port"
          ],
          "docstring": null,
          "line_number": 1892,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1915,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app",
            "prefix"
          ],
          "docstring": null,
          "line_number": 271,
          "is_async": false
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "environ",
            "start_response"
          ],
          "docstring": null,
          "line_number": 275,
          "is_async": false
        },
        {
          "name": "foo",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 744,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 1838,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "self",
            "test"
          ],
          "docstring": null,
          "line_number": 1842,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "PrefixPathMiddleware",
          "methods": [
            "__init__",
            "__call__"
          ],
          "docstring": null,
          "line_number": 270,
          "bases": []
        },
        {
          "name": "MyException",
          "methods": [],
          "docstring": null,
          "line_number": 952,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "ForbiddenSubclass",
          "methods": [],
          "docstring": null,
          "line_number": 968,
          "bases": [
            "Forbidden"
          ]
        },
        {
          "name": "E1",
          "methods": [],
          "docstring": null,
          "line_number": 1000,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "E2",
          "methods": [],
          "docstring": null,
          "line_number": 1003,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "E3",
          "methods": [],
          "docstring": null,
          "line_number": 1006,
          "bases": [
            "E1",
            "E2"
          ]
        },
        {
          "name": "View",
          "methods": [
            "__init__",
            "index"
          ],
          "docstring": null,
          "line_number": 1837,
          "bases": []
        }
      ],
      "imports": [
        "gc",
        "re",
        "typing",
        "uuid",
        "warnings",
        "weakref",
        "contextlib.nullcontext",
        "datetime.datetime",
        "datetime.timezone",
        "platform.python_implementation",
        "pytest",
        "werkzeug.serving",
        "markupsafe.Markup",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.Forbidden",
        "werkzeug.exceptions.NotFound",
        "werkzeug.http.parse_date",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.RequestRedirect",
        "flask",
        "werkzeug.routing.Rule",
        "werkzeug.routing.Submount",
        "werkzeug.routing.Rule",
        "werkzeug.routing.Submount",
        "flask.debughelpers.DebugFilesKeyError",
        "dataclasses.make_dataclass",
        "pathlib.Path"
      ],
      "comments": [
        "Issue 1288: Test that automatic options are not added",
        "when non-uppercase 'options' in methods",
        "or condition for Werkzeug < 2.3",
        "or condition for Werkzeug < 2.3",
        "Set session with initial secret key, and two valid expiring keys",
        "Change secret key, session can't be loaded and appears empty",
        "Rotate the valid keys, session can be loaded",
        "The 'Vary' key should exist in the headers only once.",
        "Be sure app.testing=True below, else tests can fail silently.",
        "",
        "Specifically, if app.testing is not set to True, the AssertionErrors",
        "in the view functions will cause a 500 response to the test client",
        "instead of propagating exceptions.",
        "Create new test client on each test to clean flashed messages.",
        "This raises a new error and blows away sys.exc_info(), so we can",
        "test that all teardown_requests get passed the same original",
        "exception.",
        "This raises a new error and blows away sys.exc_info(), so we can",
        "test that all teardown_requests get passed the same original",
        "exception.",
        "Test base case, a URL which results in a BuildError.",
        "Verify the error is re-raised if not the current exception.",
        "Test a custom handler.",
        "Just a test.",
        "Test a custom handler which reraises the BuildError",
        "Providing static_host without host_matching=True should error.",
        "Providing host_matching=True with static_folder",
        "but without static_host should error.",
        "Providing host_matching=True without static_host",
        "but with static_folder=None should not error.",
        "Werkzeug 1.0 fixes matching https scheme with 443 port",
        "suppress Werkzeug 0.15 warning about name mismatch",
        "Mocks werkzeug.serving.run_simple method",
        "default redirect code preserves form data",
        "301 and 302 raise error",
        "suppress Werkzeug 0.15 warning about name mismatch",
        "ip address can't match name",
        "allow all subdomains if matching is disabled",
        "Mocks werkzeug.serving.run_simple method",
        "Mocks werkzeug.serving.run_simple method",
        "outside app context, default to Werkzeug static value,",
        "which is also the default config",
        "inside app context, use app config",
        "A Flask instance should not create a reference cycle that prevents CPython",
        "from freeing it when all external references to it are released (see #3761)."
      ],
      "business_keywords": [
        "config",
        "api",
        "user",
        "setting",
        "rule",
        "exception",
        "template",
        "route",
        "register",
        "log",
        "process",
        "view",
        "error",
        "login",
        "order",
        "endpoint"
      ]
    },
    "tests\\test_blueprints.py": {
      "file_type": ".py",
      "size": 28778,
      "lines": 1046,
      "functions": [
        {
          "name": "test_blueprint_specific_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_blueprint_specific_user_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "test_blueprint_app_error_handling",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 80,
          "is_async": false
        },
        {
          "name": "test_blueprint_prefix_slash",
          "args": [
            "app",
            "client",
            "prefix",
            "rule",
            "url"
          ],
          "docstring": null,
          "line_number": 120,
          "is_async": false
        },
        {
          "name": "test_blueprint_url_defaults",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 131,
          "is_async": false
        },
        {
          "name": "test_blueprint_url_processors",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 151,
          "is_async": false
        },
        {
          "name": "test_templates_and_static",
          "args": [
            "test_apps"
          ],
          "docstring": null,
          "line_number": 176,
          "is_async": false
        },
        {
          "name": "test_default_static_max_age",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 223,
          "is_async": false
        },
        {
          "name": "test_templates_list",
          "args": [
            "test_apps"
          ],
          "docstring": null,
          "line_number": 247,
          "is_async": false
        },
        {
          "name": "test_dotted_name_not_allowed",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 254,
          "is_async": false
        },
        {
          "name": "test_empty_name_not_allowed",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 259,
          "is_async": false
        },
        {
          "name": "test_dotted_names_from_app",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 264,
          "is_async": false
        },
        {
          "name": "test_empty_url_defaults",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 281,
          "is_async": false
        },
        {
          "name": "test_route_decorator_custom_endpoint",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 295,
          "is_async": false
        },
        {
          "name": "test_route_decorator_custom_endpoint_with_dots",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 327,
          "is_async": false
        },
        {
          "name": "test_endpoint_decorator",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 345,
          "is_async": false
        },
        {
          "name": "test_template_filter",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 362,
          "is_async": false
        },
        {
          "name": "test_add_template_filter",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 375,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 388,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 401,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 414,
          "is_async": false
        },
        {
          "name": "test_template_filter_after_route_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 431,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 447,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 464,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 481,
          "is_async": false
        },
        {
          "name": "test_template_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 498,
          "is_async": false
        },
        {
          "name": "test_add_template_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 511,
          "is_async": false
        },
        {
          "name": "test_template_test_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 524,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 537,
          "is_async": false
        },
        {
          "name": "test_template_test_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 550,
          "is_async": false
        },
        {
          "name": "test_template_test_after_route_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 567,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 583,
          "is_async": false
        },
        {
          "name": "test_template_test_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 600,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 617,
          "is_async": false
        },
        {
          "name": "test_context_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 634,
          "is_async": false
        },
        {
          "name": "test_template_global",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 675,
          "is_async": false
        },
        {
          "name": "test_request_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 696,
          "is_async": false
        },
        {
          "name": "test_app_request_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 727,
          "is_async": false
        },
        {
          "name": "test_app_url_processors",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 766,
          "is_async": false
        },
        {
          "name": "test_nested_blueprint",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 793,
          "is_async": false
        },
        {
          "name": "test_nested_callback_order",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 842,
          "is_async": false
        },
        {
          "name": "test_nesting_url_prefixes",
          "args": [
            "parent_init",
            "child_init",
            "parent_registration",
            "child_registration",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 931,
          "is_async": false
        },
        {
          "name": "test_nesting_subdomains",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 953,
          "is_async": false
        },
        {
          "name": "test_child_and_parent_subdomain",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 972,
          "is_async": false
        },
        {
          "name": "test_unique_blueprint_names",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 994,
          "is_async": false
        },
        {
          "name": "test_self_registration",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1011,
          "is_async": false
        },
        {
          "name": "test_blueprint_renaming",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 1017,
          "is_async": false
        },
        {
          "name": "frontend_forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 14,
          "is_async": false
        },
        {
          "name": "frontend_no",
          "args": [],
          "docstring": null,
          "line_number": 18,
          "is_async": false
        },
        {
          "name": "backend_forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 22,
          "is_async": false
        },
        {
          "name": "backend_no",
          "args": [],
          "docstring": null,
          "line_number": 26,
          "is_async": false
        },
        {
          "name": "sideend_no",
          "args": [],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "app_forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 38,
          "is_async": false
        },
        {
          "name": "my_decorator_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 56,
          "is_async": false
        },
        {
          "name": "my_function_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 60,
          "is_async": false
        },
        {
          "name": "blue_deco_test",
          "args": [],
          "docstring": null,
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "blue_func_test",
          "args": [],
          "docstring": null,
          "line_number": 71,
          "is_async": false
        },
        {
          "name": "forbidden_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 84,
          "is_async": false
        },
        {
          "name": "app_forbidden",
          "args": [],
          "docstring": null,
          "line_number": 88,
          "is_async": false
        },
        {
          "name": "bp_forbidden",
          "args": [],
          "docstring": null,
          "line_number": 94,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 124,
          "is_async": false
        },
        {
          "name": "foo",
          "args": [
            "bar",
            "baz"
          ],
          "docstring": null,
          "line_number": 135,
          "is_async": false
        },
        {
          "name": "bar",
          "args": [
            "bar"
          ],
          "docstring": null,
          "line_number": 139,
          "is_async": false
        },
        {
          "name": "add_language_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 155,
          "is_async": false
        },
        {
          "name": "pull_lang_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 159,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "about",
          "args": [],
          "docstring": null,
          "line_number": 167,
          "is_async": false
        },
        {
          "name": "app_index",
          "args": [],
          "docstring": null,
          "line_number": 268,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 272,
          "is_async": false
        },
        {
          "name": "something",
          "args": [
            "page"
          ],
          "docstring": null,
          "line_number": 286,
          "is_async": false
        },
        {
          "name": "foo",
          "args": [],
          "docstring": null,
          "line_number": 299,
          "is_async": false
        },
        {
          "name": "foo_bar",
          "args": [],
          "docstring": null,
          "line_number": 303,
          "is_async": false
        },
        {
          "name": "foo_bar_foo",
          "args": [],
          "docstring": null,
          "line_number": 307,
          "is_async": false
        },
        {
          "name": "bar_foo",
          "args": [],
          "docstring": null,
          "line_number": 311,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 317,
          "is_async": false
        },
        {
          "name": "view",
          "args": [],
          "docstring": null,
          "line_number": 336,
          "is_async": false
        },
        {
          "name": "foobar",
          "args": [],
          "docstring": null,
          "line_number": 353,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 366,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 378,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 392,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 404,
          "is_async": false
        },
        {
          "name": "super_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 418,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 424,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 433,
          "is_async": false
        },
        {
          "name": "super_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 439,
          "is_async": false
        },
        {
          "name": "super_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 450,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 457,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 468,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 474,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 484,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 491,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 502,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 514,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 528,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 540,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 554,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 560,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 569,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 575,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 586,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 593,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 604,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 610,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 620,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 627,
          "is_async": false
        },
        {
          "name": "template_string",
          "args": [],
          "docstring": null,
          "line_number": 637,
          "is_async": false
        },
        {
          "name": "not_answer_context_processor",
          "args": [],
          "docstring": null,
          "line_number": 645,
          "is_async": false
        },
        {
          "name": "answer_context_processor",
          "args": [],
          "docstring": null,
          "line_number": 650,
          "is_async": false
        },
        {
          "name": "bp_page",
          "args": [],
          "docstring": null,
          "line_number": 655,
          "is_async": false
        },
        {
          "name": "app_page",
          "args": [],
          "docstring": null,
          "line_number": 659,
          "is_async": false
        },
        {
          "name": "get_answer",
          "args": [],
          "docstring": null,
          "line_number": 679,
          "is_async": false
        },
        {
          "name": "before_bp",
          "args": [],
          "docstring": null,
          "line_number": 701,
          "is_async": false
        },
        {
          "name": "after_bp",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 705,
          "is_async": false
        },
        {
          "name": "teardown_bp",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 711,
          "is_async": false
        },
        {
          "name": "bp_endpoint",
          "args": [],
          "docstring": null,
          "line_number": 716,
          "is_async": false
        },
        {
          "name": "before_app",
          "args": [],
          "docstring": null,
          "line_number": 732,
          "is_async": false
        },
        {
          "name": "after_app",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 736,
          "is_async": false
        },
        {
          "name": "teardown_app",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 742,
          "is_async": false
        },
        {
          "name": "bp_endpoint",
          "args": [],
          "docstring": null,
          "line_number": 749,
          "is_async": false
        },
        {
          "name": "add_language_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 771,
          "is_async": false
        },
        {
          "name": "pull_lang_code",
          "args": [
            "endpoint",
            "values"
          ],
          "docstring": null,
          "line_number": 775,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 780,
          "is_async": false
        },
        {
          "name": "about",
          "args": [],
          "docstring": null,
          "line_number": 784,
          "is_async": false
        },
        {
          "name": "forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 799,
          "is_async": false
        },
        {
          "name": "parent_index",
          "args": [],
          "docstring": null,
          "line_number": 803,
          "is_async": false
        },
        {
          "name": "parent_no",
          "args": [],
          "docstring": null,
          "line_number": 807,
          "is_async": false
        },
        {
          "name": "child_index",
          "args": [],
          "docstring": null,
          "line_number": 811,
          "is_async": false
        },
        {
          "name": "child_no",
          "args": [],
          "docstring": null,
          "line_number": 815,
          "is_async": false
        },
        {
          "name": "grandchild_forbidden",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 819,
          "is_async": false
        },
        {
          "name": "grandchild_index",
          "args": [],
          "docstring": null,
          "line_number": 823,
          "is_async": false
        },
        {
          "name": "grandchild_no",
          "args": [],
          "docstring": null,
          "line_number": 827,
          "is_async": false
        },
        {
          "name": "app_before1",
          "args": [],
          "docstring": null,
          "line_number": 847,
          "is_async": false
        },
        {
          "name": "app_teardown1",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 851,
          "is_async": false
        },
        {
          "name": "app_before2",
          "args": [],
          "docstring": null,
          "line_number": 855,
          "is_async": false
        },
        {
          "name": "app_teardown2",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 859,
          "is_async": false
        },
        {
          "name": "app_ctx",
          "args": [],
          "docstring": null,
          "line_number": 863,
          "is_async": false
        },
        {
          "name": "parent_before1",
          "args": [],
          "docstring": null,
          "line_number": 867,
          "is_async": false
        },
        {
          "name": "parent_teardown1",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 871,
          "is_async": false
        },
        {
          "name": "parent_before2",
          "args": [],
          "docstring": null,
          "line_number": 875,
          "is_async": false
        },
        {
          "name": "parent_teardown2",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 879,
          "is_async": false
        },
        {
          "name": "parent_ctx",
          "args": [],
          "docstring": null,
          "line_number": 883,
          "is_async": false
        },
        {
          "name": "child_before1",
          "args": [],
          "docstring": null,
          "line_number": 887,
          "is_async": false
        },
        {
          "name": "child_teardown1",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 891,
          "is_async": false
        },
        {
          "name": "child_before2",
          "args": [],
          "docstring": null,
          "line_number": 895,
          "is_async": false
        },
        {
          "name": "child_teardown2",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 899,
          "is_async": false
        },
        {
          "name": "child_ctx",
          "args": [],
          "docstring": null,
          "line_number": 903,
          "is_async": false
        },
        {
          "name": "a",
          "args": [],
          "docstring": null,
          "line_number": 907,
          "is_async": false
        },
        {
          "name": "b",
          "args": [],
          "docstring": null,
          "line_number": 911,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 943,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 962,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 981,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 1022,
          "is_async": false
        },
        {
          "name": "error",
          "args": [],
          "docstring": null,
          "line_number": 1026,
          "is_async": false
        },
        {
          "name": "forbidden",
          "args": [
            "_"
          ],
          "docstring": null,
          "line_number": 1030,
          "is_async": false
        },
        {
          "name": "index2",
          "args": [],
          "docstring": null,
          "line_number": 1034,
          "is_async": false
        },
        {
          "name": "get_send_file_max_age",
          "args": [
            "self",
            "filename"
          ],
          "docstring": null,
          "line_number": 225,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MyDecoratorException",
          "methods": [],
          "docstring": null,
          "line_number": 47,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "MyFunctionException",
          "methods": [],
          "docstring": null,
          "line_number": 50,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "MyBlueprint",
          "methods": [
            "get_send_file_max_age"
          ],
          "docstring": null,
          "line_number": 224,
          "bases": [
            "flask.Blueprint"
          ]
        }
      ],
      "imports": [
        "pytest",
        "jinja2.TemplateNotFound",
        "werkzeug.http.parse_cache_control_header",
        "flask",
        "blueprintapp.app",
        "blueprintapp.app",
        "werkzeug.routing.Rule"
      ],
      "comments": [
        "try/finally, in case other tests use this app for Blueprint tests.",
        "try/finally, in case other tests use this app for Blueprint tests.",
        "App global context processor",
        "Blueprint local context processor",
        "Setup endpoints for testing",
        "Register the blueprint",
        "Make sure the function is not in the jinja_env already",
        "Tests",
        "Setup routes for testing",
        "Setup routes for testing",
        "before first request",
        "first request",
        "second request",
        "Register app-wide url defaults and preprocessor on blueprint",
        "Register route rules at the app level"
      ],
      "business_keywords": [
        "config",
        "api",
        "user",
        "admin",
        "exception",
        "template",
        "route",
        "register",
        "process",
        "view",
        "error",
        "rule",
        "order",
        "endpoint"
      ]
    },
    "tests\\test_cli.py": {
      "file_type": ".py",
      "size": 20377,
      "lines": 702,
      "functions": [
        {
          "name": "runner",
          "args": [],
          "docstring": null,
          "line_number": 37,
          "is_async": false
        },
        {
          "name": "test_cli_name",
          "args": [
            "test_apps"
          ],
          "docstring": "Make sure the CLI object's name is the app's name and not the app itself",
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "test_find_best_app",
          "args": [
            "test_apps"
          ],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "test_prepare_import",
          "args": [
            "request",
            "value",
            "path",
            "result"
          ],
          "docstring": "Expect the correct path to be set and the correct import and app names\nto be returned.\n\n:func:`prepare_exec_for_file` has a side effect where the parent directory\nof the given import is added to :data:`sys.path`. This is reset after the\ntest runs.",
          "line_number": 161,
          "is_async": false
        },
        {
          "name": "test_locate_app",
          "args": [
            "test_apps",
            "iname",
            "aname",
            "result"
          ],
          "docstring": null,
          "line_number": 195,
          "is_async": false
        },
        {
          "name": "test_locate_app_raises",
          "args": [
            "test_apps",
            "iname",
            "aname"
          ],
          "docstring": null,
          "line_number": 217,
          "is_async": false
        },
        {
          "name": "test_locate_app_suppress_raise",
          "args": [
            "test_apps"
          ],
          "docstring": null,
          "line_number": 222,
          "is_async": false
        },
        {
          "name": "test_get_version",
          "args": [
            "test_apps",
            "capsys"
          ],
          "docstring": null,
          "line_number": 231,
          "is_async": false
        },
        {
          "name": "test_scriptinfo",
          "args": [
            "test_apps",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 247,
          "is_async": false
        },
        {
          "name": "test_app_cli_has_app_context",
          "args": [
            "app",
            "runner"
          ],
          "docstring": null,
          "line_number": 289,
          "is_async": false
        },
        {
          "name": "test_with_appcontext",
          "args": [
            "runner"
          ],
          "docstring": null,
          "line_number": 307,
          "is_async": false
        },
        {
          "name": "test_appgroup_app_context",
          "args": [
            "runner"
          ],
          "docstring": null,
          "line_number": 320,
          "is_async": false
        },
        {
          "name": "test_flaskgroup_app_context",
          "args": [
            "runner"
          ],
          "docstring": null,
          "line_number": 348,
          "is_async": false
        },
        {
          "name": "test_flaskgroup_debug",
          "args": [
            "runner",
            "set_debug_flag"
          ],
          "docstring": null,
          "line_number": 366,
          "is_async": false
        },
        {
          "name": "test_flaskgroup_nested",
          "args": [
            "app",
            "runner"
          ],
          "docstring": null,
          "line_number": 385,
          "is_async": false
        },
        {
          "name": "test_no_command_echo_loading_error",
          "args": [],
          "docstring": null,
          "line_number": 398,
          "is_async": false
        },
        {
          "name": "test_help_echo_loading_error",
          "args": [],
          "docstring": null,
          "line_number": 413,
          "is_async": false
        },
        {
          "name": "test_help_echo_exception",
          "args": [],
          "docstring": null,
          "line_number": 428,
          "is_async": false
        },
        {
          "name": "dotenv_not_available",
          "args": [],
          "docstring": null,
          "line_number": 521,
          "is_async": false
        },
        {
          "name": "test_load_dotenv",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 536,
          "is_async": false
        },
        {
          "name": "test_dotenv_path",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 560,
          "is_async": false
        },
        {
          "name": "test_dotenv_optional",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 569,
          "is_async": false
        },
        {
          "name": "test_disable_dotenv_from_env",
          "args": [
            "monkeypatch",
            "runner"
          ],
          "docstring": null,
          "line_number": 577,
          "is_async": false
        },
        {
          "name": "test_run_cert_path",
          "args": [],
          "docstring": null,
          "line_number": 584,
          "is_async": false
        },
        {
          "name": "test_run_cert_adhoc",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 602,
          "is_async": false
        },
        {
          "name": "test_run_cert_import",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 619,
          "is_async": false
        },
        {
          "name": "test_run_cert_no_ssl",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 641,
          "is_async": false
        },
        {
          "name": "test_cli_blueprints",
          "args": [
            "app"
          ],
          "docstring": "Test blueprint commands register correctly to the application",
          "line_number": 648,
          "is_async": false
        },
        {
          "name": "test_cli_empty",
          "args": [
            "app"
          ],
          "docstring": "If a Blueprint's CLI group is empty, do not register it.",
          "line_number": 691,
          "is_async": false
        },
        {
          "name": "test_run_exclude_patterns",
          "args": [],
          "docstring": null,
          "line_number": 700,
          "is_async": false
        },
        {
          "name": "reset_path",
          "args": [],
          "docstring": null,
          "line_number": 171,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 265,
          "is_async": false
        },
        {
          "name": "_param_cb",
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "docstring": null,
          "line_number": 290,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 296,
          "is_async": false
        },
        {
          "name": "testcmd",
          "args": [],
          "docstring": null,
          "line_number": 310,
          "is_async": false
        },
        {
          "name": "cli",
          "args": [],
          "docstring": null,
          "line_number": 322,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 326,
          "is_async": false
        },
        {
          "name": "subgroup",
          "args": [],
          "docstring": null,
          "line_number": 330,
          "is_async": false
        },
        {
          "name": "test2",
          "args": [],
          "docstring": null,
          "line_number": 334,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 349,
          "is_async": false
        },
        {
          "name": "cli",
          "args": [],
          "docstring": null,
          "line_number": 353,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 357,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 367,
          "is_async": false
        },
        {
          "name": "cli",
          "args": [],
          "docstring": null,
          "line_number": 373,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 377,
          "is_async": false
        },
        {
          "name": "show",
          "args": [],
          "docstring": null,
          "line_number": 391,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 429,
          "is_async": false
        },
        {
          "name": "app",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 448,
          "is_async": false
        },
        {
          "name": "invoke",
          "args": [
            "self",
            "app",
            "runner"
          ],
          "docstring": null,
          "line_number": 459,
          "is_async": false
        },
        {
          "name": "expect_order",
          "args": [
            "self",
            "order",
            "output"
          ],
          "docstring": null,
          "line_number": 463,
          "is_async": false
        },
        {
          "name": "test_simple",
          "args": [
            "self",
            "invoke"
          ],
          "docstring": null,
          "line_number": 469,
          "is_async": false
        },
        {
          "name": "test_sort",
          "args": [
            "self",
            "app",
            "invoke"
          ],
          "docstring": null,
          "line_number": 474,
          "is_async": false
        },
        {
          "name": "test_all_methods",
          "args": [
            "self",
            "invoke"
          ],
          "docstring": null,
          "line_number": 489,
          "is_async": false
        },
        {
          "name": "test_no_routes",
          "args": [
            "self",
            "runner"
          ],
          "docstring": null,
          "line_number": 495,
          "is_async": false
        },
        {
          "name": "test_subdomain",
          "args": [
            "self",
            "runner"
          ],
          "docstring": null,
          "line_number": 502,
          "is_async": false
        },
        {
          "name": "test_host",
          "args": [
            "self",
            "runner"
          ],
          "docstring": null,
          "line_number": 511,
          "is_async": false
        },
        {
          "name": "custom_command",
          "args": [],
          "docstring": null,
          "line_number": 656,
          "is_async": false
        },
        {
          "name": "nested_command",
          "args": [],
          "docstring": null,
          "line_number": 660,
          "is_async": false
        },
        {
          "name": "merged_command",
          "args": [],
          "docstring": null,
          "line_number": 664,
          "is_async": false
        },
        {
          "name": "late_command",
          "args": [],
          "docstring": null,
          "line_number": 668,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 66,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "make_app",
          "args": [],
          "docstring": null,
          "line_number": 84,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 95,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 104,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [
            "foo",
            "bar"
          ],
          "docstring": null,
          "line_number": 122,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 129,
          "is_async": false
        },
        {
          "name": "exit",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 236,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestRoutes",
          "methods": [
            "app",
            "invoke",
            "expect_order",
            "test_simple",
            "test_sort",
            "test_all_methods",
            "test_no_routes",
            "test_subdomain",
            "test_host"
          ],
          "docstring": null,
          "line_number": 446,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [],
          "docstring": null,
          "line_number": 49,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [],
          "docstring": null,
          "line_number": 54,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [],
          "docstring": null,
          "line_number": 59,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 64,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 73,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "make_app"
          ],
          "docstring": null,
          "line_number": 82,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 91,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 100,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [],
          "docstring": null,
          "line_number": 109,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [],
          "docstring": null,
          "line_number": 114,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 120,
          "bases": []
        },
        {
          "name": "Module",
          "methods": [
            "create_app"
          ],
          "docstring": null,
          "line_number": 127,
          "bases": []
        },
        {
          "name": "MockCtx",
          "methods": [
            "exit"
          ],
          "docstring": null,
          "line_number": 232,
          "bases": []
        }
      ],
      "imports": [
        "importlib.metadata",
        "os",
        "platform",
        "ssl",
        "sys",
        "types",
        "functools.partial",
        "pathlib.Path",
        "click",
        "pytest",
        "_pytest.monkeypatch.notset",
        "click.testing.CliRunner",
        "flask.Blueprint",
        "flask.current_app",
        "flask.Flask",
        "flask.cli.AppGroup",
        "flask.cli.find_best_app",
        "flask.cli.FlaskGroup",
        "flask.cli.get_version",
        "flask.cli.load_dotenv",
        "flask.cli.locate_app",
        "flask.cli.NoAppException",
        "flask.cli.prepare_import",
        "flask.cli.run_command",
        "flask.cli.ScriptInfo",
        "flask.cli.with_appcontext",
        "cliapp.app.testapp",
        "flask.cli.cli",
        "flask.cli.cli",
        "dotenv"
      ],
      "comments": [
        "This file was part of Flask-CLI and was modified under the terms of",
        "its Revised BSD License. Copyright © 2015 CERN.",
        "nested package",
        "dotted name",
        "not a Python file, will be caught during import",
        "trailing comma space",
        "strip whitespace",
        "not enough arguments",
        "invalid identifier",
        "no app returned",
        "nested import error",
        "not a Python file",
        "only direct import error is suppressed",
        "import app with module's absolute path",
        "import app from wsgi.py in current directory",
        "import app from app.py in current directory",
        "current_app should be available in parameter callbacks",
        "the loaded app should be the same as current_app",
        "Click >= 8.2",
        "Click >= 8.2",
        "Click >= 8.2",
        "skip the header and match the start of each row",
        "do this instead of startswith for nicer pytest output",
        "can't use monkeypatch.delitem since the keys don't exist yet",
        ".flaskenv doesn't overwrite .env",
        "set only in .flaskenv",
        "set only in .env",
        "set manually, files don't overwrite",
        "test env file encoding",
        "Non existent file should not load",
        "no key",
        "no cert",
        "cert specified first",
        "key specified first",
        "cryptography not installed",
        "cryptography installed",
        "no key with adhoc",
        "ImportError",
        "SSLContext",
        "no --key with SSLContext"
      ],
      "business_keywords": [
        "module",
        "exception",
        "route",
        "register",
        "error",
        "rule",
        "order",
        "endpoint"
      ]
    },
    "tests\\test_config.py": {
      "file_type": ".py",
      "size": 7744,
      "lines": 250,
      "functions": [
        {
          "name": "common_object_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "test_config_from_pyfile",
          "args": [],
          "docstring": null,
          "line_number": 19,
          "is_async": false
        },
        {
          "name": "test_config_from_object",
          "args": [],
          "docstring": null,
          "line_number": 25,
          "is_async": false
        },
        {
          "name": "test_config_from_file_json",
          "args": [],
          "docstring": null,
          "line_number": 31,
          "is_async": false
        },
        {
          "name": "test_config_from_file_toml",
          "args": [],
          "docstring": null,
          "line_number": 38,
          "is_async": false
        },
        {
          "name": "test_from_prefixed_env",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "test_from_prefixed_env_custom_prefix",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 69,
          "is_async": false
        },
        {
          "name": "test_from_prefixed_env_nested",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 79,
          "is_async": false
        },
        {
          "name": "test_config_from_mapping",
          "args": [],
          "docstring": null,
          "line_number": 110,
          "is_async": false
        },
        {
          "name": "test_config_from_class",
          "args": [],
          "docstring": null,
          "line_number": 132,
          "is_async": false
        },
        {
          "name": "test_config_from_envvar",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 144,
          "is_async": false
        },
        {
          "name": "test_config_from_envvar_missing",
          "args": [
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 161,
          "is_async": false
        },
        {
          "name": "test_config_missing",
          "args": [],
          "docstring": null,
          "line_number": 174,
          "is_async": false
        },
        {
          "name": "test_config_missing_file",
          "args": [],
          "docstring": null,
          "line_number": 186,
          "is_async": false
        },
        {
          "name": "test_custom_config_class",
          "args": [],
          "docstring": null,
          "line_number": 198,
          "is_async": false
        },
        {
          "name": "test_session_lifetime",
          "args": [],
          "docstring": null,
          "line_number": 211,
          "is_async": false
        },
        {
          "name": "test_get_namespace",
          "args": [],
          "docstring": null,
          "line_number": 217,
          "is_async": false
        },
        {
          "name": "test_from_pyfile_weird_encoding",
          "args": [
            "tmp_path",
            "encoding"
          ],
          "docstring": null,
          "line_number": 244,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Base",
          "methods": [],
          "docstring": null,
          "line_number": 133,
          "bases": []
        },
        {
          "name": "Test",
          "methods": [],
          "docstring": null,
          "line_number": 136,
          "bases": [
            "Base"
          ]
        },
        {
          "name": "Config",
          "methods": [],
          "docstring": null,
          "line_number": 199,
          "bases": [
            "flask.Config"
          ]
        },
        {
          "name": "Flask",
          "methods": [],
          "docstring": null,
          "line_number": 202,
          "bases": [
            "flask.Flask"
          ]
        }
      ],
      "imports": [
        "json",
        "os",
        "pytest",
        "flask"
      ],
      "comments": [
        "config keys used for the TestConfig",
        "Windows env var keys are always uppercase."
      ],
      "business_keywords": [
        "error",
        "setting",
        "config"
      ]
    },
    "tests\\test_converters.py": {
      "file_type": ".py",
      "size": 1093,
      "lines": 42,
      "functions": [
        {
          "name": "test_custom_converters",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_context_available",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 29,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "args"
          ],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 39,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 10,
          "is_async": false
        },
        {
          "name": "to_url",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 31,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "ListConverter",
          "methods": [
            "to_python",
            "to_url"
          ],
          "docstring": null,
          "line_number": 9,
          "bases": [
            "BaseConverter"
          ]
        },
        {
          "name": "ContextConverter",
          "methods": [
            "to_python"
          ],
          "docstring": null,
          "line_number": 30,
          "bases": [
            "BaseConverter"
          ]
        }
      ],
      "imports": [
        "werkzeug.routing.BaseConverter",
        "flask.request",
        "flask.session",
        "flask.url_for"
      ],
      "comments": [],
      "business_keywords": [
        "route",
        "admin"
      ]
    },
    "tests\\test_helpers.py": {
      "file_type": ".py",
      "size": 10588,
      "lines": 360,
      "functions": [
        {
          "name": "test_redirect_no_app",
          "args": [],
          "docstring": null,
          "line_number": 172,
          "is_async": false
        },
        {
          "name": "test_redirect_with_app",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 178,
          "is_async": false
        },
        {
          "name": "test_abort_no_app",
          "args": [],
          "docstring": null,
          "line_number": 188,
          "is_async": false
        },
        {
          "name": "test_app_aborter_class",
          "args": [],
          "docstring": null,
          "line_number": 196,
          "is_async": false
        },
        {
          "name": "test_abort_with_app",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 207,
          "is_async": false
        },
        {
          "name": "test_open_resource",
          "args": [
            "mode"
          ],
          "docstring": null,
          "line_number": 339,
          "is_async": false
        },
        {
          "name": "test_open_resource_exceptions",
          "args": [
            "mode"
          ],
          "docstring": null,
          "line_number": 347,
          "is_async": false
        },
        {
          "name": "test_open_resource_with_encoding",
          "args": [
            "tmp_path",
            "encoding"
          ],
          "docstring": null,
          "line_number": 355,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "path"
          ],
          "docstring": null,
          "line_number": 18,
          "is_async": false
        },
        {
          "name": "__fspath__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 21,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 26,
          "is_async": false
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_number": 29,
          "is_async": false
        },
        {
          "name": "test_send_file",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 34,
          "is_async": false
        },
        {
          "name": "test_static_file",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 45,
          "is_async": false
        },
        {
          "name": "test_send_from_directory",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "test_url_for_with_anchor",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 103,
          "is_async": false
        },
        {
          "name": "test_url_for_with_scheme",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 110,
          "is_async": false
        },
        {
          "name": "test_url_for_with_scheme_not_external",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 120,
          "is_async": false
        },
        {
          "name": "test_url_for_with_alternating_schemes",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 131,
          "is_async": false
        },
        {
          "name": "test_url_with_method",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "test_url_for_with_self",
          "args": [
            "self",
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 164,
          "is_async": false
        },
        {
          "name": "redirect",
          "args": [
            "location",
            "code"
          ],
          "docstring": null,
          "line_number": 179,
          "is_async": false
        },
        {
          "name": "test_name_with_import_error",
          "args": [
            "self",
            "modules_tmp_path"
          ],
          "docstring": null,
          "line_number": 228,
          "is_async": false
        },
        {
          "name": "test_streaming_with_context",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 237,
          "is_async": false
        },
        {
          "name": "test_streaming_with_context_as_decorator",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 250,
          "is_async": false
        },
        {
          "name": "test_streaming_with_context_and_custom_close",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 264,
          "is_async": false
        },
        {
          "name": "test_stream_keeps_session",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 295,
          "is_async": false
        },
        {
          "name": "test_get_debug_flag",
          "args": [
            "self",
            "monkeypatch",
            "debug",
            "expect"
          ],
          "docstring": null,
          "line_number": 321,
          "is_async": false
        },
        {
          "name": "test_make_response",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 325,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 105,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 112,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 133,
          "is_async": false
        },
        {
          "name": "index",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 166,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 239,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 252,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 283,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 297,
          "is_async": false
        },
        {
          "name": "get_send_file_max_age",
          "args": [
            "self",
            "filename"
          ],
          "docstring": null,
          "line_number": 76,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self",
            "id"
          ],
          "docstring": null,
          "line_number": 147,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 152,
          "is_async": false
        },
        {
          "name": "generate",
          "args": [],
          "docstring": null,
          "line_number": 240,
          "is_async": false
        },
        {
          "name": "generate",
          "args": [
            "hello"
          ],
          "docstring": null,
          "line_number": 254,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "gen"
          ],
          "docstring": null,
          "line_number": 268,
          "is_async": false
        },
        {
          "name": "__iter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 271,
          "is_async": false
        },
        {
          "name": "close",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 274,
          "is_async": false
        },
        {
          "name": "__next__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 277,
          "is_async": false
        },
        {
          "name": "generate",
          "args": [],
          "docstring": null,
          "line_number": 284,
          "is_async": false
        },
        {
          "name": "gen",
          "args": [],
          "docstring": null,
          "line_number": 301,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "FakePath",
          "methods": [
            "__init__",
            "__fspath__"
          ],
          "docstring": "Fake object to represent a ``PathLike object``.\n\nThis represents a ``pathlib.Path`` object in python 3.\nSee: https://www.python.org/dev/peps/pep-0519/",
          "line_number": 11,
          "bases": []
        },
        {
          "name": "PyBytesIO",
          "methods": [
            "__init__",
            "__getattr__"
          ],
          "docstring": null,
          "line_number": 25,
          "bases": []
        },
        {
          "name": "TestSendfile",
          "methods": [
            "test_send_file",
            "test_static_file",
            "test_send_from_directory"
          ],
          "docstring": null,
          "line_number": 33,
          "bases": []
        },
        {
          "name": "TestUrlFor",
          "methods": [
            "test_url_for_with_anchor",
            "test_url_for_with_scheme",
            "test_url_for_with_scheme_not_external",
            "test_url_for_with_alternating_schemes",
            "test_url_with_method",
            "test_url_for_with_self"
          ],
          "docstring": null,
          "line_number": 102,
          "bases": []
        },
        {
          "name": "TestNoImports",
          "methods": [
            "test_name_with_import_error"
          ],
          "docstring": "Test Flasks are created without import.\n\nAvoiding ``__import__`` helps create Flask instances where there are errors\nat import time.  Those runtime errors will be apparent to the user soon\nenough, but tools which build Flask instances meta-programmatically benefit\nfrom a Flask which does not ``__import__``.  Instead of importing to\nretrieve file paths or metadata on a module or package, use the pkgutil and\nimp modules in the Python standard library.",
          "line_number": 217,
          "bases": []
        },
        {
          "name": "TestStreaming",
          "methods": [
            "test_streaming_with_context",
            "test_streaming_with_context_as_decorator",
            "test_streaming_with_context_and_custom_close",
            "test_stream_keeps_session"
          ],
          "docstring": null,
          "line_number": 236,
          "bases": []
        },
        {
          "name": "TestHelpers",
          "methods": [
            "test_get_debug_flag",
            "test_make_response"
          ],
          "docstring": null,
          "line_number": 310,
          "bases": []
        },
        {
          "name": "MyAborter",
          "methods": [],
          "docstring": null,
          "line_number": 197,
          "bases": [
            "werkzeug.exceptions.Aborter"
          ]
        },
        {
          "name": "MyFlask",
          "methods": [],
          "docstring": null,
          "line_number": 200,
          "bases": [
            "flask.Flask"
          ]
        },
        {
          "name": "My900Error",
          "methods": [],
          "docstring": null,
          "line_number": 208,
          "bases": [
            "werkzeug.exceptions.HTTPException"
          ]
        },
        {
          "name": "StaticFileApp",
          "methods": [
            "get_send_file_max_age"
          ],
          "docstring": null,
          "line_number": 75,
          "bases": [
            "flask.Flask"
          ]
        },
        {
          "name": "MyView",
          "methods": [
            "get",
            "post"
          ],
          "docstring": null,
          "line_number": 146,
          "bases": [
            "MethodView"
          ]
        },
        {
          "name": "Wrapper",
          "methods": [
            "__init__",
            "__iter__",
            "close",
            "__next__"
          ],
          "docstring": null,
          "line_number": 267,
          "bases": []
        }
      ],
      "imports": [
        "io",
        "os",
        "pytest",
        "werkzeug.exceptions",
        "flask",
        "flask.helpers.get_debug_flag",
        "flask.views.MethodView"
      ],
      "comments": [
        "Default max_age is None.",
        "Test with static file handler.",
        "Test with direct use of send_file.",
        "Test with static file handler.",
        "Test with direct use of send_file.",
        "Test with pathlib.Path.",
        "Test with static file handler.",
        "Test with direct use of send_file.",
        "Implicit external with scheme.",
        "Error when external=False with scheme"
      ],
      "business_keywords": [
        "config",
        "module",
        "user",
        "exception",
        "route",
        "view",
        "error",
        "rule",
        "endpoint"
      ]
    },
    "tests\\test_instance_config.py": {
      "file_type": ".py",
      "size": 3317,
      "lines": 111,
      "functions": [
        {
          "name": "test_explicit_instance_paths",
          "args": [
            "modules_tmp_path"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "test_uninstalled_module_paths",
          "args": [
            "modules_tmp_path",
            "purge_module"
          ],
          "docstring": null,
          "line_number": 16,
          "is_async": false
        },
        {
          "name": "test_uninstalled_package_paths",
          "args": [
            "modules_tmp_path",
            "purge_module"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "test_uninstalled_namespace_paths",
          "args": [
            "tmp_path",
            "monkeypatch",
            "purge_module"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "test_installed_module_paths",
          "args": [
            "modules_tmp_path",
            "modules_tmp_path_prefix",
            "purge_module",
            "site_packages"
          ],
          "docstring": null,
          "line_number": 65,
          "is_async": false
        },
        {
          "name": "test_installed_package_paths",
          "args": [
            "modules_tmp_path",
            "modules_tmp_path_prefix",
            "purge_module",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 80,
          "is_async": false
        },
        {
          "name": "test_prefix_package_paths",
          "args": [
            "modules_tmp_path",
            "modules_tmp_path_prefix",
            "purge_module",
            "site_packages"
          ],
          "docstring": null,
          "line_number": 99,
          "is_async": false
        },
        {
          "name": "create_namespace",
          "args": [
            "package"
          ],
          "docstring": null,
          "line_number": 47,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "os",
        "pytest",
        "flask",
        "config_module_app.app",
        "config_package_app.app",
        "namespace.package2.app",
        "site_app.app",
        "installed_package.app",
        "site_package"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "module",
        "config"
      ]
    },
    "tests\\test_json.py": {
      "file_type": ".py",
      "size": 8741,
      "lines": 346,
      "functions": [
        {
          "name": "test_bad_request_debug_message",
          "args": [
            "app",
            "client",
            "debug"
          ],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        },
        {
          "name": "test_json_bad_requests",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "test_json_custom_mimetypes",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 39,
          "is_async": false
        },
        {
          "name": "test_json_as_unicode",
          "args": [
            "test_value",
            "expected",
            "app",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 51,
          "is_async": false
        },
        {
          "name": "test_json_dump_to_file",
          "args": [
            "app",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "test_jsonify_basic_types",
          "args": [
            "test_value",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 70,
          "is_async": false
        },
        {
          "name": "test_jsonify_dicts",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 78,
          "is_async": false
        },
        {
          "name": "test_jsonify_arrays",
          "args": [
            "app",
            "client"
          ],
          "docstring": "Test jsonify of lists and args unpacking.",
          "line_number": 105,
          "is_async": false
        },
        {
          "name": "test_jsonify_datetime",
          "args": [
            "app",
            "client",
            "value"
          ],
          "docstring": null,
          "line_number": 136,
          "is_async": false
        },
        {
          "name": "test_jsonify_aware_datetimes",
          "args": [
            "tz"
          ],
          "docstring": "Test if aware datetime.datetime objects are converted into GMT.",
          "line_number": 167,
          "is_async": false
        },
        {
          "name": "test_jsonify_uuid_types",
          "args": [
            "app",
            "client"
          ],
          "docstring": "Test jsonify with uuid.UUID types",
          "line_number": 176,
          "is_async": false
        },
        {
          "name": "test_json_decimal",
          "args": [],
          "docstring": null,
          "line_number": 191,
          "is_async": false
        },
        {
          "name": "test_json_attr",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 196,
          "is_async": false
        },
        {
          "name": "test_tojson_filter",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 210,
          "is_async": false
        },
        {
          "name": "test_json_customization",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 223,
          "is_async": false
        },
        {
          "name": "_has_encoding",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 260,
          "is_async": false
        },
        {
          "name": "test_json_key_sorting",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 270,
          "is_async": false
        },
        {
          "name": "test_html_method",
          "args": [],
          "docstring": null,
          "line_number": 340,
          "is_async": false
        },
        {
          "name": "post_json",
          "args": [],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "return_json",
          "args": [],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "return_json",
          "args": [],
          "docstring": null,
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "return_kwargs",
          "args": [],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "return_dict",
          "args": [],
          "docstring": null,
          "line_number": 96,
          "is_async": false
        },
        {
          "name": "return_args_unpack",
          "args": [],
          "docstring": null,
          "line_number": 120,
          "is_async": false
        },
        {
          "name": "return_array",
          "args": [],
          "docstring": null,
          "line_number": 124,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 138,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "hours",
            "name"
          ],
          "docstring": null,
          "line_number": 152,
          "is_async": false
        },
        {
          "name": "utcoffset",
          "args": [
            "self",
            "dt"
          ],
          "docstring": null,
          "line_number": 156,
          "is_async": false
        },
        {
          "name": "tzname",
          "args": [
            "self",
            "dt"
          ],
          "docstring": null,
          "line_number": 159,
          "is_async": false
        },
        {
          "name": "dst",
          "args": [
            "self",
            "dt"
          ],
          "docstring": null,
          "line_number": 162,
          "is_async": false
        },
        {
          "name": "add",
          "args": [],
          "docstring": null,
          "line_number": 198,
          "is_async": false
        },
        {
          "name": "default",
          "args": [
            "o"
          ],
          "docstring": null,
          "line_number": 228,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 249,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 276,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "val"
          ],
          "docstring": null,
          "line_number": 225,
          "is_async": false
        },
        {
          "name": "object_hook",
          "args": [
            "self",
            "obj"
          ],
          "docstring": null,
          "line_number": 235,
          "is_async": false
        },
        {
          "name": "loads",
          "args": [
            "self",
            "s"
          ],
          "docstring": null,
          "line_number": 241,
          "is_async": false
        },
        {
          "name": "__html__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 342,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "FixedOffset",
          "methods": [
            "__init__",
            "utcoffset",
            "tzname",
            "dst"
          ],
          "docstring": "Fixed offset in hours east from UTC.\n\nThis is a slight adaptation of the ``FixedOffset`` example found in\nhttps://docs.python.org/2.7/library/datetime.html.",
          "line_number": 145,
          "bases": [
            "datetime.tzinfo"
          ]
        },
        {
          "name": "X",
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "line_number": 224,
          "bases": []
        },
        {
          "name": "CustomProvider",
          "methods": [
            "object_hook",
            "loads"
          ],
          "docstring": null,
          "line_number": 234,
          "bases": [
            "DefaultJSONProvider"
          ]
        },
        {
          "name": "ObjectWithHTML",
          "methods": [
            "__html__"
          ],
          "docstring": null,
          "line_number": 341,
          "bases": []
        }
      ],
      "imports": [
        "datetime",
        "decimal",
        "io",
        "uuid",
        "pytest",
        "werkzeug.http.http_date",
        "flask",
        "flask.json",
        "flask.json.provider.DefaultJSONProvider",
        "codecs"
      ],
      "comments": [
        "The tojson filter is tested in Jinja, this confirms that it's",
        "using Flask's dumps."
      ],
      "business_keywords": [
        "config",
        "template",
        "route",
        "error",
        "rule"
      ]
    },
    "tests\\test_json_tag.py": {
      "file_type": ".py",
      "size": 1998,
      "lines": 86,
      "functions": [
        {
          "name": "test_dump_load_unchanged",
          "args": [
            "data"
          ],
          "docstring": null,
          "line_number": 27,
          "is_async": false
        },
        {
          "name": "test_duplicate_tag",
          "args": [],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "test_custom_tag",
          "args": [],
          "docstring": null,
          "line_number": 43,
          "is_async": false
        },
        {
          "name": "test_tag_interface",
          "args": [],
          "docstring": null,
          "line_number": 66,
          "is_async": false
        },
        {
          "name": "test_tag_order",
          "args": [],
          "docstring": null,
          "line_number": 73,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "data"
          ],
          "docstring": null,
          "line_number": 45,
          "is_async": false
        },
        {
          "name": "check",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 52,
          "is_async": false
        },
        {
          "name": "to_json",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 55,
          "is_async": false
        },
        {
          "name": "to_python",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_number": 58,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TagDict",
          "methods": [],
          "docstring": null,
          "line_number": 33,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "Foo",
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "line_number": 44,
          "bases": []
        },
        {
          "name": "TagFoo",
          "methods": [
            "check",
            "to_json",
            "to_python"
          ],
          "docstring": null,
          "line_number": 48,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "Tag1",
          "methods": [],
          "docstring": null,
          "line_number": 74,
          "bases": [
            "JSONTag"
          ]
        },
        {
          "name": "Tag2",
          "methods": [],
          "docstring": null,
          "line_number": 77,
          "bases": [
            "JSONTag"
          ]
        }
      ],
      "imports": [
        "datetime.datetime",
        "datetime.timezone",
        "uuid.uuid4",
        "pytest",
        "markupsafe.Markup",
        "flask.json.tag.JSONTag",
        "flask.json.tag.TaggedJSONSerializer"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "register",
        "order"
      ]
    },
    "tests\\test_logging.py": {
      "file_type": ".py",
      "size": 2529,
      "lines": 98,
      "functions": [
        {
          "name": "reset_logging",
          "args": [
            "pytestconfig"
          ],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "test_logger",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 36,
          "is_async": false
        },
        {
          "name": "test_logger_debug",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "test_existing_handler",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "test_wsgi_errors_stream",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 54,
          "is_async": false
        },
        {
          "name": "test_has_level_handler",
          "args": [],
          "docstring": null,
          "line_number": 70,
          "is_async": false
        },
        {
          "name": "test_log_view_exception",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 86,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 56,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 88,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "logging",
        "sys",
        "io.StringIO",
        "pytest",
        "flask.logging.default_handler",
        "flask.logging.has_level_handler",
        "flask.logging.wsgi_errors_stream"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "exception",
        "route",
        "log",
        "register",
        "manager",
        "view",
        "error"
      ]
    },
    "tests\\test_regression.py": {
      "file_type": ".py",
      "size": 712,
      "lines": 30,
      "functions": [
        {
          "name": "test_aborting",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 4,
          "is_async": false
        },
        {
          "name": "handle_foo",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 9,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "test",
          "args": [],
          "docstring": null,
          "line_number": 17,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Foo",
          "methods": [],
          "docstring": null,
          "line_number": 5,
          "bases": [
            "Exception"
          ]
        }
      ],
      "imports": [
        "flask"
      ],
      "comments": [
        "For older Werkzeug that used absolute redirects."
      ],
      "business_keywords": [
        "error",
        "route",
        "exception"
      ]
    },
    "tests\\test_reqctx.py": {
      "file_type": ".py",
      "size": 8682,
      "lines": 325,
      "functions": [
        {
          "name": "test_teardown_on_pop",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 16,
          "is_async": false
        },
        {
          "name": "test_teardown_with_previous_exception",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "test_teardown_with_handled_exception",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 47,
          "is_async": false
        },
        {
          "name": "test_proper_test_request_context",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 63,
          "is_async": false
        },
        {
          "name": "test_context_binding",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 107,
          "is_async": false
        },
        {
          "name": "test_context_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 123,
          "is_async": false
        },
        {
          "name": "test_manual_context_binding",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 135,
          "is_async": false
        },
        {
          "name": "test_session_error_pops_context",
          "args": [],
          "docstring": null,
          "line_number": 205,
          "is_async": false
        },
        {
          "name": "test_session_dynamic_cookie_name",
          "args": [],
          "docstring": null,
          "line_number": 229,
          "is_async": false
        },
        {
          "name": "test_bad_environ_raises_bad_request",
          "args": [],
          "docstring": null,
          "line_number": 280,
          "is_async": false
        },
        {
          "name": "test_environ_for_valid_idna_completes",
          "args": [],
          "docstring": null,
          "line_number": 296,
          "is_async": false
        },
        {
          "name": "test_normal_environ_completes",
          "args": [],
          "docstring": null,
          "line_number": 317,
          "is_async": false
        },
        {
          "name": "end_of_request",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "end_of_request",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 34,
          "is_async": false
        },
        {
          "name": "end_of_request",
          "args": [
            "exception"
          ],
          "docstring": null,
          "line_number": 51,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "sub",
          "args": [],
          "docstring": null,
          "line_number": 71,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 109,
          "is_async": false
        },
        {
          "name": "meh",
          "args": [],
          "docstring": null,
          "line_number": 113,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 137,
          "is_async": false
        },
        {
          "name": "test_greenlet_context_copying",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 150,
          "is_async": false
        },
        {
          "name": "test_greenlet_context_copying_api",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 179,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 219,
          "is_async": false
        },
        {
          "name": "set",
          "args": [],
          "docstring": null,
          "line_number": 246,
          "is_async": false
        },
        {
          "name": "get",
          "args": [],
          "docstring": null,
          "line_number": 251,
          "is_async": false
        },
        {
          "name": "set_dynamic_cookie",
          "args": [],
          "docstring": null,
          "line_number": 256,
          "is_async": false
        },
        {
          "name": "get_dynamic_cookie",
          "args": [],
          "docstring": null,
          "line_number": 261,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 300,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 321,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 154,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 183,
          "is_async": false
        },
        {
          "name": "open_session",
          "args": [
            "self",
            "app",
            "request"
          ],
          "docstring": null,
          "line_number": 210,
          "is_async": false
        },
        {
          "name": "get_cookie_name",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 233,
          "is_async": false
        },
        {
          "name": "g",
          "args": [],
          "docstring": null,
          "line_number": 158,
          "is_async": false
        },
        {
          "name": "g",
          "args": [],
          "docstring": null,
          "line_number": 187,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestGreenletContextCopying",
          "methods": [
            "test_greenlet_context_copying",
            "test_greenlet_context_copying_api"
          ],
          "docstring": null,
          "line_number": 149,
          "bases": []
        },
        {
          "name": "SessionError",
          "methods": [],
          "docstring": null,
          "line_number": 206,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "FailingSessionInterface",
          "methods": [
            "open_session"
          ],
          "docstring": null,
          "line_number": 209,
          "bases": [
            "SessionInterface"
          ]
        },
        {
          "name": "CustomFlask",
          "methods": [],
          "docstring": null,
          "line_number": 213,
          "bases": [
            "flask.Flask"
          ]
        },
        {
          "name": "PathAwareSessionInterface",
          "methods": [
            "get_cookie_name"
          ],
          "docstring": null,
          "line_number": 232,
          "bases": [
            "SecureCookieSessionInterface"
          ]
        },
        {
          "name": "CustomFlask",
          "methods": [],
          "docstring": null,
          "line_number": 239,
          "bases": [
            "flask.Flask"
          ]
        }
      ],
      "imports": [
        "warnings",
        "pytest",
        "flask",
        "flask.globals.request_ctx",
        "flask.sessions.SecureCookieSessionInterface",
        "flask.sessions.SessionInterface",
        "greenlet.greenlet",
        "flask.testing.EnvironBuilder",
        "flask.testing.EnvironBuilder"
      ],
      "comments": [
        "suppress Werkzeug 0.15 warning about name mismatch",
        "shouldn't get here",
        "This session interface will use a cookie with a different name if the",
        "requested url ends with the string \"dynamic_cookie\"",
        "first set the cookie in both /set urls but each with a different value",
        "now check that the relevant values come back - meaning that different",
        "cookies are being used for the urls that end with \"dynamic cookie\"",
        "use a non-printable character in the Host - this is key to this test",
        "these characters are all IDNA-compatible"
      ],
      "business_keywords": [
        "config",
        "api",
        "user",
        "exception",
        "route",
        "error"
      ]
    },
    "tests\\test_request.py": {
      "file_type": ".py",
      "size": 1902,
      "lines": 70,
      "functions": [
        {
          "name": "test_max_content_length",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 9,
          "is_async": false
        },
        {
          "name": "test_limit_config",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 25,
          "is_async": false
        },
        {
          "name": "test_trusted_hosts_config",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "catcher",
          "args": [
            "error"
          ],
          "docstring": null,
          "line_number": 18,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "flask.Flask",
        "flask.Request",
        "flask.request",
        "flask.testing.FlaskClient"
      ],
      "comments": [
        "no app context, use Werkzeug defaults",
        "in app context, use config",
        "regardless of app context, use override"
      ],
      "business_keywords": [
        "error",
        "config"
      ]
    },
    "tests\\test_session_interface.py": {
      "file_type": ".py",
      "size": 792,
      "lines": 28,
      "functions": [
        {
          "name": "test_open_session_with_endpoint",
          "args": [],
          "docstring": "If request.endpoint (or other URL matching behavior) is needed\nwhile loading the session, RequestContext.match_request() can be\ncalled manually.",
          "line_number": 6,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 24,
          "is_async": false
        },
        {
          "name": "save_session",
          "args": [
            "self",
            "app",
            "session",
            "response"
          ],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "open_session",
          "args": [
            "self",
            "app",
            "request"
          ],
          "docstring": null,
          "line_number": 16,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MySessionInterface",
          "methods": [
            "save_session",
            "open_session"
          ],
          "docstring": null,
          "line_number": 12,
          "bases": [
            "SessionInterface"
          ]
        }
      ],
      "imports": [
        "flask",
        "flask.globals.request_ctx",
        "flask.sessions.SessionInterface"
      ],
      "comments": [],
      "business_keywords": [
        "endpoint"
      ]
    },
    "tests\\test_signals.py": {
      "file_type": ".py",
      "size": 4864,
      "lines": 181,
      "functions": [
        {
          "name": "test_template_rendered",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 4,
          "is_async": false
        },
        {
          "name": "test_before_render_template",
          "args": [],
          "docstring": null,
          "line_number": 25,
          "is_async": false
        },
        {
          "name": "test_request_signals",
          "args": [],
          "docstring": null,
          "line_number": 50,
          "is_async": false
        },
        {
          "name": "test_request_exception_signal",
          "args": [],
          "docstring": null,
          "line_number": 95,
          "is_async": false
        },
        {
          "name": "test_appcontext_signals",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 115,
          "is_async": false
        },
        {
          "name": "test_flash_signal",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 139,
          "is_async": false
        },
        {
          "name": "test_appcontext_tearing_down_signal",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 6,
          "is_async": false
        },
        {
          "name": "record",
          "args": [
            "sender",
            "template",
            "context"
          ],
          "docstring": null,
          "line_number": 11,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 29,
          "is_async": false
        },
        {
          "name": "record",
          "args": [
            "sender",
            "template",
            "context"
          ],
          "docstring": null,
          "line_number": 34,
          "is_async": false
        },
        {
          "name": "before_request_signal",
          "args": [
            "sender"
          ],
          "docstring": null,
          "line_number": 54,
          "is_async": false
        },
        {
          "name": "after_request_signal",
          "args": [
            "sender",
            "response"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "before_request_handler",
          "args": [],
          "docstring": null,
          "line_number": 62,
          "is_async": false
        },
        {
          "name": "after_request_handler",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 66,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 72,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 100,
          "is_async": false
        },
        {
          "name": "record",
          "args": [
            "sender",
            "exception"
          ],
          "docstring": null,
          "line_number": 103,
          "is_async": false
        },
        {
          "name": "record_push",
          "args": [
            "sender"
          ],
          "docstring": null,
          "line_number": 118,
          "is_async": false
        },
        {
          "name": "record_pop",
          "args": [
            "sender"
          ],
          "docstring": null,
          "line_number": 121,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 125,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 141,
          "is_async": false
        },
        {
          "name": "record",
          "args": [
            "sender",
            "message",
            "category"
          ],
          "docstring": null,
          "line_number": 147,
          "is_async": false
        },
        {
          "name": "record_teardown",
          "args": [
            "sender",
            "exc"
          ],
          "docstring": null,
          "line_number": 167,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 171,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "template",
        "route",
        "exception"
      ]
    },
    "tests\\test_subclassing.py": {
      "file_type": ".py",
      "size": 475,
      "lines": 21,
      "functions": [
        {
          "name": "test_suppressed_exception_logging",
          "args": [],
          "docstring": null,
          "line_number": 6,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        },
        {
          "name": "log_exception",
          "args": [
            "self",
            "exc_info"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "SuppressedFlask",
          "methods": [
            "log_exception"
          ],
          "docstring": null,
          "line_number": 7,
          "bases": [
            "flask.Flask"
          ]
        }
      ],
      "imports": [
        "io.StringIO",
        "flask"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "route",
        "log",
        "exception"
      ]
    },
    "tests\\test_templating.py": {
      "file_type": ".py",
      "size": 12323,
      "lines": 451,
      "functions": [
        {
          "name": "test_context_processing",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 11,
          "is_async": false
        },
        {
          "name": "test_original_win",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 24,
          "is_async": false
        },
        {
          "name": "test_simple_stream",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "test_request_less_rendering",
          "args": [
            "app",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "test_standard_context",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 53,
          "is_async": false
        },
        {
          "name": "test_escaping",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 71,
          "is_async": false
        },
        {
          "name": "test_no_escaping",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 91,
          "is_async": false
        },
        {
          "name": "test_escaping_without_template_filename",
          "args": [
            "app",
            "client",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 113,
          "is_async": false
        },
        {
          "name": "test_macros",
          "args": [
            "app",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 118,
          "is_async": false
        },
        {
          "name": "test_template_filter",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 123,
          "is_async": false
        },
        {
          "name": "test_add_template_filter",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 133,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 153,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 176,
          "is_async": false
        },
        {
          "name": "test_template_filter_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 190,
          "is_async": false
        },
        {
          "name": "test_add_template_filter_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 203,
          "is_async": false
        },
        {
          "name": "test_template_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 217,
          "is_async": false
        },
        {
          "name": "test_add_template_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 227,
          "is_async": false
        },
        {
          "name": "test_template_test_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 237,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_name",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 247,
          "is_async": false
        },
        {
          "name": "test_template_test_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 257,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 270,
          "is_async": false
        },
        {
          "name": "test_template_test_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 284,
          "is_async": false
        },
        {
          "name": "test_add_template_test_with_name_and_template",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 297,
          "is_async": false
        },
        {
          "name": "test_add_template_global",
          "args": [
            "app",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 311,
          "is_async": false
        },
        {
          "name": "test_custom_template_loader",
          "args": [
            "client"
          ],
          "docstring": null,
          "line_number": 324,
          "is_async": false
        },
        {
          "name": "test_iterable_loader",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 342,
          "is_async": false
        },
        {
          "name": "test_templates_auto_reload",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 362,
          "is_async": false
        },
        {
          "name": "test_templates_auto_reload_debug_run",
          "args": [
            "app",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 394,
          "is_async": false
        },
        {
          "name": "test_template_loader_debugging",
          "args": [
            "test_apps",
            "monkeypatch"
          ],
          "docstring": null,
          "line_number": 407,
          "is_async": false
        },
        {
          "name": "test_custom_jinja_env",
          "args": [],
          "docstring": null,
          "line_number": 443,
          "is_async": false
        },
        {
          "name": "context_processor",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 17,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 26,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 35,
          "is_async": false
        },
        {
          "name": "context_processor",
          "args": [],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 55,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 95,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 125,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 134,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 145,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 154,
          "is_async": false
        },
        {
          "name": "super_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 165,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 169,
          "is_async": false
        },
        {
          "name": "super_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 177,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 183,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 192,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 196,
          "is_async": false
        },
        {
          "name": "my_reverse",
          "args": [
            "s"
          ],
          "docstring": null,
          "line_number": 204,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 210,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 219,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 228,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 239,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 248,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 259,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 263,
          "is_async": false
        },
        {
          "name": "boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 271,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 277,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 286,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 290,
          "is_async": false
        },
        {
          "name": "is_boolean",
          "args": [
            "value"
          ],
          "docstring": null,
          "line_number": 298,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 304,
          "is_async": false
        },
        {
          "name": "get_stuff",
          "args": [],
          "docstring": null,
          "line_number": 313,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 334,
          "is_async": false
        },
        {
          "name": "context_processor",
          "args": [],
          "docstring": null,
          "line_number": 344,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 348,
          "is_async": false
        },
        {
          "name": "run_simple_mock",
          "args": [],
          "docstring": null,
          "line_number": 395,
          "is_async": false
        },
        {
          "name": "create_global_jinja_loader",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 326,
          "is_async": false
        },
        {
          "name": "handle",
          "args": [
            "self",
            "record"
          ],
          "docstring": null,
          "line_number": 413,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "MyFlask",
          "methods": [
            "create_global_jinja_loader"
          ],
          "docstring": null,
          "line_number": 325,
          "bases": [
            "flask.Flask"
          ]
        },
        {
          "name": "_TestHandler",
          "methods": [
            "handle"
          ],
          "docstring": null,
          "line_number": 412,
          "bases": [
            "logging.Handler"
          ]
        },
        {
          "name": "CustomEnvironment",
          "methods": [],
          "docstring": null,
          "line_number": 444,
          "bases": [
            "flask.templating.Environment"
          ]
        },
        {
          "name": "CustomFlask",
          "methods": [],
          "docstring": null,
          "line_number": 447,
          "bases": [
            "flask.Flask"
          ]
        }
      ],
      "imports": [
        "logging",
        "pytest",
        "werkzeug.serving",
        "jinja2.TemplateNotFound",
        "markupsafe.Markup",
        "flask",
        "blueprintapp.app",
        "jinja2.DictLoader"
      ],
      "comments": [
        "debug is False, config option is None",
        "debug is False, config option is False",
        "debug is False, config option is True",
        "debug is True, config option is None",
        "debug is True, config option is False",
        "debug is True, config option is True"
      ],
      "business_keywords": [
        "config",
        "api",
        "admin",
        "template",
        "route",
        "log",
        "process",
        "error",
        "endpoint"
      ]
    },
    "tests\\test_testing.py": {
      "file_type": ".py",
      "size": 10622,
      "lines": 396,
      "functions": [
        {
          "name": "test_environ_defaults_from_config",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        },
        {
          "name": "test_environ_defaults",
          "args": [
            "app",
            "client",
            "app_ctx",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "test_environ_base_default",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 42,
          "is_async": false
        },
        {
          "name": "test_environ_base_modified",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 57,
          "is_async": false
        },
        {
          "name": "test_client_open_environ",
          "args": [
            "app",
            "client",
            "request"
          ],
          "docstring": null,
          "line_number": 73,
          "is_async": false
        },
        {
          "name": "test_specify_url_scheme",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 90,
          "is_async": false
        },
        {
          "name": "test_path_is_url",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 102,
          "is_async": false
        },
        {
          "name": "test_environbuilder_json_dumps",
          "args": [
            "app"
          ],
          "docstring": "EnvironBuilder.json_dumps() takes settings from the app.",
          "line_number": 110,
          "is_async": false
        },
        {
          "name": "test_blueprint_with_subdomain",
          "args": [],
          "docstring": null,
          "line_number": 117,
          "is_async": false
        },
        {
          "name": "test_redirect_keep_session",
          "args": [
            "app",
            "client",
            "app_ctx"
          ],
          "docstring": null,
          "line_number": 141,
          "is_async": false
        },
        {
          "name": "test_session_transactions",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 169,
          "is_async": false
        },
        {
          "name": "test_session_transactions_no_null_sessions",
          "args": [],
          "docstring": null,
          "line_number": 186,
          "is_async": false
        },
        {
          "name": "test_session_transactions_keep_context",
          "args": [
            "app",
            "client",
            "req_ctx"
          ],
          "docstring": null,
          "line_number": 196,
          "is_async": false
        },
        {
          "name": "test_session_transaction_needs_cookies",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 204,
          "is_async": false
        },
        {
          "name": "test_test_client_context_binding",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 212,
          "is_async": false
        },
        {
          "name": "test_reuse_client",
          "args": [
            "client"
          ],
          "docstring": null,
          "line_number": 241,
          "is_async": false
        },
        {
          "name": "test_full_url_request",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 251,
          "is_async": false
        },
        {
          "name": "test_json_request_and_response",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 263,
          "is_async": false
        },
        {
          "name": "test_client_json_no_app_context",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 282,
          "is_async": false
        },
        {
          "name": "test_subdomain",
          "args": [],
          "docstring": null,
          "line_number": 302,
          "is_async": false
        },
        {
          "name": "test_nosubdomain",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 321,
          "is_async": false
        },
        {
          "name": "test_cli_runner_class",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 338,
          "is_async": false
        },
        {
          "name": "test_cli_invoke",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 350,
          "is_async": false
        },
        {
          "name": "test_cli_custom_obj",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 364,
          "is_async": false
        },
        {
          "name": "test_client_pop_all_preserved",
          "args": [
            "app",
            "req_ctx",
            "client"
          ],
          "docstring": null,
          "line_number": 382,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 44,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 59,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 75,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 126,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "get_session",
          "args": [],
          "docstring": null,
          "line_number": 150,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 171,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 216,
          "is_async": false
        },
        {
          "name": "other",
          "args": [],
          "docstring": null,
          "line_number": 221,
          "is_async": false
        },
        {
          "name": "action",
          "args": [],
          "docstring": null,
          "line_number": 253,
          "is_async": false
        },
        {
          "name": "echo",
          "args": [],
          "docstring": null,
          "line_number": 265,
          "is_async": false
        },
        {
          "name": "hello",
          "args": [],
          "docstring": null,
          "line_number": 284,
          "is_async": false
        },
        {
          "name": "view",
          "args": [
            "company_id"
          ],
          "docstring": null,
          "line_number": 308,
          "is_async": false
        },
        {
          "name": "view",
          "args": [
            "company_id"
          ],
          "docstring": null,
          "line_number": 325,
          "is_async": false
        },
        {
          "name": "hello_command",
          "args": [],
          "docstring": null,
          "line_number": 352,
          "is_async": false
        },
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 368,
          "is_async": false
        },
        {
          "name": "hello_command",
          "args": [],
          "docstring": null,
          "line_number": 373,
          "is_async": false
        },
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 384,
          "is_async": false
        },
        {
          "name": "add",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 290,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Namespace",
          "methods": [
            "add"
          ],
          "docstring": null,
          "line_number": 287,
          "bases": []
        },
        {
          "name": "SubRunner",
          "methods": [],
          "docstring": null,
          "line_number": 342,
          "bases": [
            "FlaskCliRunner"
          ]
        },
        {
          "name": "NS",
          "methods": [],
          "docstring": null,
          "line_number": 365,
          "bases": []
        }
      ],
      "imports": [
        "importlib.metadata",
        "click",
        "pytest",
        "flask",
        "flask.appcontext_popped",
        "flask.cli.ScriptInfo",
        "flask.globals._cv_request",
        "flask.json.jsonify",
        "flask.testing.EnvironBuilder",
        "flask.testing.FlaskCliRunner"
      ],
      "comments": [
        "Request should be in JSON",
        "Response should be in JSON",
        "invoke with command name",
        "invoke with command object",
        "stream_with_context pushes a third context, preserved by response",
        "req_ctx fixture pushed an initial context",
        "request pushes a second request context, preserved by client",
        "close the response, releasing the context held by stream_with_context",
        "only req_ctx fixture should still be pushed"
      ],
      "business_keywords": [
        "config",
        "user",
        "setting",
        "route",
        "register",
        "view",
        "error"
      ]
    },
    "tests\\test_user_error_handler.py": {
      "file_type": ".py",
      "size": 8436,
      "lines": 295,
      "functions": [
        {
          "name": "test_error_handler_no_match",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 10,
          "is_async": false
        },
        {
          "name": "test_error_handler_subclass",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 61,
          "is_async": false
        },
        {
          "name": "test_error_handler_http_subclass",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 100,
          "is_async": false
        },
        {
          "name": "test_error_handler_blueprint",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 136,
          "is_async": false
        },
        {
          "name": "test_default_error_handler",
          "args": [],
          "docstring": null,
          "line_number": 163,
          "is_async": false
        },
        {
          "name": "custom_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 15,
          "is_async": false
        },
        {
          "name": "handle_500",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "custom_test",
          "args": [],
          "docstring": null,
          "line_number": 44,
          "is_async": false
        },
        {
          "name": "key_error",
          "args": [],
          "docstring": null,
          "line_number": 48,
          "is_async": false
        },
        {
          "name": "do_abort",
          "args": [],
          "docstring": null,
          "line_number": 52,
          "is_async": false
        },
        {
          "name": "parent_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 72,
          "is_async": false
        },
        {
          "name": "child_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 77,
          "is_async": false
        },
        {
          "name": "parent_test",
          "args": [],
          "docstring": null,
          "line_number": 82,
          "is_async": false
        },
        {
          "name": "unregistered_test",
          "args": [],
          "docstring": null,
          "line_number": 86,
          "is_async": false
        },
        {
          "name": "registered_test",
          "args": [],
          "docstring": null,
          "line_number": 90,
          "is_async": false
        },
        {
          "name": "code_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 108,
          "is_async": false
        },
        {
          "name": "subclass_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 113,
          "is_async": false
        },
        {
          "name": "forbidden_test",
          "args": [],
          "docstring": null,
          "line_number": 118,
          "is_async": false
        },
        {
          "name": "registered_test",
          "args": [],
          "docstring": null,
          "line_number": 122,
          "is_async": false
        },
        {
          "name": "unregistered_test",
          "args": [],
          "docstring": null,
          "line_number": 126,
          "is_async": false
        },
        {
          "name": "bp_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 140,
          "is_async": false
        },
        {
          "name": "bp_test",
          "args": [],
          "docstring": null,
          "line_number": 144,
          "is_async": false
        },
        {
          "name": "app_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 148,
          "is_async": false
        },
        {
          "name": "app_test",
          "args": [],
          "docstring": null,
          "line_number": 152,
          "is_async": false
        },
        {
          "name": "bp_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 167,
          "is_async": false
        },
        {
          "name": "bp_forbidden_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 173,
          "is_async": false
        },
        {
          "name": "bp_registered_test",
          "args": [],
          "docstring": null,
          "line_number": 178,
          "is_async": false
        },
        {
          "name": "bp_forbidden_test",
          "args": [],
          "docstring": null,
          "line_number": 182,
          "is_async": false
        },
        {
          "name": "catchall_exception_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 188,
          "is_async": false
        },
        {
          "name": "catchall_forbidden_handler",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 194,
          "is_async": false
        },
        {
          "name": "forbidden",
          "args": [],
          "docstring": null,
          "line_number": 199,
          "is_async": false
        },
        {
          "name": "slash",
          "args": [],
          "docstring": null,
          "line_number": 203,
          "is_async": false
        },
        {
          "name": "app",
          "args": [
            "self",
            "app"
          ],
          "docstring": null,
          "line_number": 224,
          "is_async": false
        },
        {
          "name": "report_error",
          "args": [
            "self",
            "e"
          ],
          "docstring": null,
          "line_number": 244,
          "is_async": false
        },
        {
          "name": "test_handle_class_or_code",
          "args": [
            "self",
            "app",
            "client",
            "to_handle"
          ],
          "docstring": "``InternalServerError`` and ``500`` are aliases, they should\nhave the same behavior. Both should only receive\n``InternalServerError``, which might wrap another error.",
          "line_number": 253,
          "is_async": false
        },
        {
          "name": "test_handle_generic_http",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": "``HTTPException`` should only receive ``HTTPException``\nsubclasses. It will receive ``404`` routing exceptions.",
          "line_number": 269,
          "is_async": false
        },
        {
          "name": "test_handle_generic",
          "args": [
            "self",
            "app",
            "client"
          ],
          "docstring": "Generic ``Exception`` will handle all exceptions directly,\nincluding ``HTTPExceptions``.",
          "line_number": 283,
          "is_async": false
        },
        {
          "name": "do_custom",
          "args": [],
          "docstring": null,
          "line_number": 226,
          "is_async": false
        },
        {
          "name": "do_error",
          "args": [],
          "docstring": null,
          "line_number": 230,
          "is_async": false
        },
        {
          "name": "do_abort",
          "args": [],
          "docstring": null,
          "line_number": 234,
          "is_async": false
        },
        {
          "name": "do_raise",
          "args": [],
          "docstring": null,
          "line_number": 238,
          "is_async": false
        },
        {
          "name": "handle_500",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 260,
          "is_async": false
        },
        {
          "name": "handle_http",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 275,
          "is_async": false
        },
        {
          "name": "handle_exception",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 289,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "TestGenericHandlers",
          "methods": [
            "app",
            "report_error",
            "test_handle_class_or_code",
            "test_handle_generic_http",
            "test_handle_generic"
          ],
          "docstring": "Test how very generic handlers are dispatched to.",
          "line_number": 217,
          "bases": []
        },
        {
          "name": "CustomException",
          "methods": [],
          "docstring": null,
          "line_number": 11,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "ParentException",
          "methods": [],
          "docstring": null,
          "line_number": 62,
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "ChildExceptionUnregistered",
          "methods": [],
          "docstring": null,
          "line_number": 65,
          "bases": [
            "ParentException"
          ]
        },
        {
          "name": "ChildExceptionRegistered",
          "methods": [],
          "docstring": null,
          "line_number": 68,
          "bases": [
            "ParentException"
          ]
        },
        {
          "name": "ForbiddenSubclassRegistered",
          "methods": [],
          "docstring": null,
          "line_number": 101,
          "bases": [
            "Forbidden"
          ]
        },
        {
          "name": "ForbiddenSubclassUnregistered",
          "methods": [],
          "docstring": null,
          "line_number": 104,
          "bases": [
            "Forbidden"
          ]
        },
        {
          "name": "Custom",
          "methods": [],
          "docstring": null,
          "line_number": 220,
          "bases": [
            "Exception"
          ]
        }
      ],
      "imports": [
        "pytest",
        "werkzeug.exceptions.Forbidden",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.exceptions.NotFound",
        "flask"
      ],
      "comments": [
        "Don't handle RequestRedirect raised when adding slash."
      ],
      "business_keywords": [
        "config",
        "report",
        "exception",
        "route",
        "register",
        "error"
      ]
    },
    "tests\\test_views.py": {
      "file_type": ".py",
      "size": 6732,
      "lines": 260,
      "functions": [
        {
          "name": "common_test",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 7,
          "is_async": false
        },
        {
          "name": "test_basic_view",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 17,
          "is_async": false
        },
        {
          "name": "test_method_based_view",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 28,
          "is_async": false
        },
        {
          "name": "test_view_patching",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 41,
          "is_async": false
        },
        {
          "name": "test_view_inheritance",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 62,
          "is_async": false
        },
        {
          "name": "test_view_decorators",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 80,
          "is_async": false
        },
        {
          "name": "test_view_provide_automatic_options_attr",
          "args": [],
          "docstring": null,
          "line_number": 101,
          "is_async": false
        },
        {
          "name": "test_implicit_head",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 141,
          "is_async": false
        },
        {
          "name": "test_explicit_head",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 155,
          "is_async": false
        },
        {
          "name": "test_endpoint_override",
          "args": [
            "app"
          ],
          "docstring": null,
          "line_number": 171,
          "is_async": false
        },
        {
          "name": "test_methods_var_inheritance",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 189,
          "is_async": false
        },
        {
          "name": "test_multiple_inheritance",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 207,
          "is_async": false
        },
        {
          "name": "test_remove_method_from_parent",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 226,
          "is_async": false
        },
        {
          "name": "test_init_once",
          "args": [
            "app",
            "client"
          ],
          "docstring": null,
          "line_number": 245,
          "is_async": false
        },
        {
          "name": "add_x_parachute",
          "args": [
            "f"
          ],
          "docstring": null,
          "line_number": 81,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 21,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 30,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 33,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 43,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 50,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 53,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 64,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 67,
          "is_async": false
        },
        {
          "name": "delete",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 71,
          "is_async": false
        },
        {
          "name": "new_function",
          "args": [],
          "docstring": null,
          "line_number": 82,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 107,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 121,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 132,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 143,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 157,
          "is_async": false
        },
        {
          "name": "head",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 160,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 177,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 194,
          "is_async": false
        },
        {
          "name": "propfind",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 197,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 209,
          "is_async": false
        },
        {
          "name": "delete",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 213,
          "is_async": false
        },
        {
          "name": "get",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 228,
          "is_async": false
        },
        {
          "name": "post",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 232,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 251,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 255,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "Index",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 18,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "get",
            "post"
          ],
          "docstring": null,
          "line_number": 29,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "get",
            "post"
          ],
          "docstring": null,
          "line_number": 42,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "Other",
          "methods": [
            "get",
            "post"
          ],
          "docstring": null,
          "line_number": 49,
          "bases": [
            "Index"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "get",
            "post"
          ],
          "docstring": null,
          "line_number": 63,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "BetterIndex",
          "methods": [
            "delete"
          ],
          "docstring": null,
          "line_number": 70,
          "bases": [
            "Index"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 89,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "Index1",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 104,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "Index2",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 117,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "Index3",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 131,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "get"
          ],
          "docstring": null,
          "line_number": 142,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "get",
            "head"
          ],
          "docstring": null,
          "line_number": 156,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "Index",
          "methods": [
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 174,
          "bases": [
            "flask.views.View"
          ]
        },
        {
          "name": "BaseView",
          "methods": [],
          "docstring": null,
          "line_number": 190,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "ChildView",
          "methods": [
            "get",
            "propfind"
          ],
          "docstring": null,
          "line_number": 193,
          "bases": [
            "BaseView"
          ]
        },
        {
          "name": "GetView",
          "methods": [
            "get"
          ],
          "docstring": null,
          "line_number": 208,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "DeleteView",
          "methods": [
            "delete"
          ],
          "docstring": null,
          "line_number": 212,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "GetDeleteView",
          "methods": [],
          "docstring": null,
          "line_number": 216,
          "bases": [
            "GetView",
            "DeleteView"
          ]
        },
        {
          "name": "GetView",
          "methods": [
            "get"
          ],
          "docstring": null,
          "line_number": 227,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "OtherView",
          "methods": [
            "post"
          ],
          "docstring": null,
          "line_number": 231,
          "bases": [
            "flask.views.MethodView"
          ]
        },
        {
          "name": "View",
          "methods": [],
          "docstring": null,
          "line_number": 235,
          "bases": [
            "GetView",
            "OtherView"
          ]
        },
        {
          "name": "CountInit",
          "methods": [
            "__init__",
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 248,
          "bases": [
            "flask.views.View"
          ]
        }
      ],
      "imports": [
        "pytest",
        "werkzeug.http.parse_set_header",
        "flask.views"
      ],
      "comments": [
        "But these tests should still pass. We just log a warning."
      ],
      "business_keywords": [
        "log",
        "view",
        "error",
        "rule",
        "endpoint"
      ]
    },
    "tests\\static\\config.json": {
      "file_type": ".json",
      "size": 54,
      "lines": 4,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": [
        "config"
      ]
    },
    "tests\\test_apps\\blueprintapp\\__init__.py": {
      "file_type": ".py",
      "size": 256,
      "lines": 9,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask",
        "blueprintapp.apps.admin.admin",
        "blueprintapp.apps.frontend.frontend"
      ],
      "comments": [],
      "business_keywords": [
        "config",
        "register",
        "admin"
      ]
    },
    "tests\\test_apps\\blueprintapp\\apps\\__init__.py": {
      "file_type": ".py",
      "size": 0,
      "lines": 0,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\blueprintapp\\apps\\admin\\__init__.py": {
      "file_type": ".py",
      "size": 366,
      "lines": 20,
      "functions": [
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 14,
          "is_async": false
        },
        {
          "name": "index2",
          "args": [],
          "docstring": null,
          "line_number": 19,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.Blueprint",
        "flask.render_template"
      ],
      "comments": [],
      "business_keywords": [
        "template",
        "route",
        "admin"
      ]
    },
    "tests\\test_apps\\blueprintapp\\apps\\frontend\\__init__.py": {
      "file_type": ".py",
      "size": 327,
      "lines": 14,
      "functions": [
        {
          "name": "index",
          "args": [],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "missing_template",
          "args": [],
          "docstring": null,
          "line_number": 13,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.Blueprint",
        "flask.render_template"
      ],
      "comments": [],
      "business_keywords": [
        "template",
        "route"
      ]
    },
    "tests\\test_apps\\cliapp\\app.py": {
      "file_type": ".py",
      "size": 52,
      "lines": 3,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\factory.py": {
      "file_type": ".py",
      "size": 169,
      "lines": 13,
      "functions": [
        {
          "name": "create_app",
          "args": [],
          "docstring": null,
          "line_number": 4,
          "is_async": false
        },
        {
          "name": "create_app2",
          "args": [
            "foo",
            "bar"
          ],
          "docstring": null,
          "line_number": 8,
          "is_async": false
        },
        {
          "name": "no_app",
          "args": [],
          "docstring": null,
          "line_number": 12,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\importerrorapp.py": {
      "file_type": ".py",
      "size": 73,
      "lines": 5,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": [
        "error"
      ]
    },
    "tests\\test_apps\\cliapp\\multiapp.py": {
      "file_type": ".py",
      "size": 67,
      "lines": 4,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\__init__.py": {
      "file_type": ".py",
      "size": 0,
      "lines": 0,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\inner1\\__init__.py": {
      "file_type": ".py",
      "size": 55,
      "lines": 3,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\inner1\\inner2\\flask.py": {
      "file_type": ".py",
      "size": 47,
      "lines": 3,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\cliapp\\inner1\\inner2\\__init__.py": {
      "file_type": ".py",
      "size": 0,
      "lines": 0,
      "functions": [],
      "classes": [],
      "imports": [],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\helloworld\\hello.py": {
      "file_type": ".py",
      "size": 104,
      "lines": 8,
      "functions": [
        {
          "name": "hello",
          "args": [],
          "docstring": null,
          "line_number": 7,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": [
        "route"
      ]
    },
    "tests\\test_apps\\helloworld\\wsgi.py": {
      "file_type": ".py",
      "size": 36,
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        "hello.app"
      ],
      "comments": [],
      "business_keywords": []
    },
    "tests\\test_apps\\subdomaintestmodule\\__init__.py": {
      "file_type": ".py",
      "size": 73,
      "lines": 3,
      "functions": [],
      "classes": [],
      "imports": [
        "flask.Module"
      ],
      "comments": [],
      "business_keywords": [
        "module"
      ]
    },
    "tests\\type_check\\typing_app_decorators.py": {
      "file_type": ".py",
      "size": 589,
      "lines": 32,
      "functions": [
        {
          "name": "after_sync",
          "args": [
            "response"
          ],
          "docstring": null,
          "line_number": 10,
          "is_async": false
        },
        {
          "name": "before_sync",
          "args": [],
          "docstring": null,
          "line_number": 20,
          "is_async": false
        },
        {
          "name": "teardown_sync",
          "args": [
            "exc"
          ],
          "docstring": null,
          "line_number": 28,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "flask.Flask",
        "flask.Response"
      ],
      "comments": [],
      "business_keywords": [
        "exception"
      ]
    },
    "tests\\type_check\\typing_error_handler.py": {
      "file_type": ".py",
      "size": 647,
      "lines": 33,
      "functions": [
        {
          "name": "handle_400",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 16,
          "is_async": false
        },
        {
          "name": "handle_custom",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 21,
          "is_async": false
        },
        {
          "name": "handle_accept_base",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 26,
          "is_async": false
        },
        {
          "name": "handle_multiple",
          "args": [
            "e"
          ],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        }
      ],
      "classes": [],
      "imports": [
        "__future__.annotations",
        "http.HTTPStatus",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.NotFound",
        "flask.Flask"
      ],
      "comments": [],
      "business_keywords": [
        "error",
        "exception"
      ]
    },
    "tests\\type_check\\typing_route.py": {
      "file_type": ".py",
      "size": 2532,
      "lines": 112,
      "functions": [
        {
          "name": "hello_str",
          "args": [],
          "docstring": null,
          "line_number": 17,
          "is_async": false
        },
        {
          "name": "hello_bytes",
          "args": [],
          "docstring": null,
          "line_number": 22,
          "is_async": false
        },
        {
          "name": "hello_json",
          "args": [],
          "docstring": null,
          "line_number": 27,
          "is_async": false
        },
        {
          "name": "hello_json_dict",
          "args": [],
          "docstring": null,
          "line_number": 32,
          "is_async": false
        },
        {
          "name": "hello_json_list",
          "args": [],
          "docstring": null,
          "line_number": 37,
          "is_async": false
        },
        {
          "name": "typed_dict",
          "args": [],
          "docstring": null,
          "line_number": 46,
          "is_async": false
        },
        {
          "name": "hello_generator",
          "args": [],
          "docstring": null,
          "line_number": 51,
          "is_async": false
        },
        {
          "name": "hello_generator_expression",
          "args": [],
          "docstring": null,
          "line_number": 60,
          "is_async": false
        },
        {
          "name": "hello_iterator",
          "args": [],
          "docstring": null,
          "line_number": 65,
          "is_async": false
        },
        {
          "name": "tuple_status",
          "args": [
            "code"
          ],
          "docstring": null,
          "line_number": 71,
          "is_async": false
        },
        {
          "name": "tuple_status_enum",
          "args": [],
          "docstring": null,
          "line_number": 76,
          "is_async": false
        },
        {
          "name": "tuple_headers",
          "args": [],
          "docstring": null,
          "line_number": 81,
          "is_async": false
        },
        {
          "name": "return_template",
          "args": [
            "name"
          ],
          "docstring": null,
          "line_number": 87,
          "is_async": false
        },
        {
          "name": "return_template_stream",
          "args": [],
          "docstring": null,
          "line_number": 92,
          "is_async": false
        },
        {
          "name": "show",
          "args": [],
          "docstring": null,
          "line_number": 52,
          "is_async": false
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "template_name"
          ],
          "docstring": null,
          "line_number": 102,
          "is_async": false
        },
        {
          "name": "dispatch_request",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_number": 105,
          "is_async": false
        }
      ],
      "classes": [
        {
          "name": "StatusJSON",
          "methods": [],
          "docstring": null,
          "line_number": 41,
          "bases": [
            "t.TypedDict"
          ]
        },
        {
          "name": "RenderTemplateView",
          "methods": [
            "__init__",
            "dispatch_request"
          ],
          "docstring": null,
          "line_number": 101,
          "bases": [
            "View"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "http.HTTPStatus",
        "flask.Flask",
        "flask.jsonify",
        "flask.stream_template",
        "flask.templating.render_template",
        "flask.views.View",
        "flask.wrappers.Response"
      ],
      "comments": [],
      "business_keywords": [
        "template",
        "rule",
        "view",
        "route"
      ]
    }
  },
  "business_rules": [
    {
      "rule": "用户登录失败3次后锁定账户",
      "source_file": "extracted_from_comments",
      "type": "security_rule"
    }
  ],
  "architecture_patterns": {
    "mvc": false,
    "microservices": false,
    "layered": false,
    "event_driven": false,
    "rest_api": false
  },
  "dependencies": {
    "package_managers": [
      "poetry"
    ],
    "external_deps": [],
    "internal_deps": []
  },
  "documentation_analysis": {
    "has_readme": true,
    "has_contributing": false,
    "has_license": true,
    "doc_files": [],
    "total_doc_lines": 0
  }
}